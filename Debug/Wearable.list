
Wearable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8cc  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800da60  0800da60  0000ea60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd58  0800dd58  0000faf0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd58  0800dd58  0000faf0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd58  0800dd58  0000faf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd58  0800dd58  0000ed58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd5c  0800dd5c  0000ed5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000af0  20000000  0800dd60  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff8  20000af0  0800e850  0000faf0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ae8  0800e850  00010ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000faf0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af9e  00000000  00000000  0000fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004165  00000000  00000000  0002aabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0002ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001296  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005966  00000000  00000000  000316f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000208d8  00000000  00000000  0003705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf658  00000000  00000000  00057934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d68  00000000  00000000  00126fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000af0 	.word	0x20000af0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da44 	.word	0x0800da44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000af4 	.word	0x20000af4
 80001cc:	0800da44 	.word	0x0800da44

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <float_to_ASCII>:
 */

// includes
#include "main.h"

uint8_t float_to_ASCII(float val, uint8_t buf[]){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	ed87 0a01 	vstr	s0, [r7, #4]
 8000be2:	6038      	str	r0, [r7, #0]
	// 5123.946 -> 5123 / -0.001 -> -0.001/ 12.00 -> 12.0

	// size is normally 3
	uint8_t size = 5;
 8000be4:	2305      	movs	r3, #5
 8000be6:	727b      	strb	r3, [r7, #9]
	uint8_t ngtv_flg = 0;	// number is negative
 8000be8:	2300      	movs	r3, #0
 8000bea:	77fb      	strb	r3, [r7, #31]
	uint8_t cntr = 0;		// length of array
 8000bec:	2300      	movs	r3, #0
 8000bee:	77bb      	strb	r3, [r7, #30]
	float pos = 0.0;		// absolute value
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]

	// if value is zero
	if(val == 0.0){
 8000bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c02:	d104      	bne.n	8000c0e <float_to_ASCII+0x36>
		buf[0] = 48;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2230      	movs	r2, #48	@ 0x30
 8000c08:	701a      	strb	r2, [r3, #0]
		return 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e163      	b.n	8000ed6 <float_to_ASCII+0x2fe>
	}

	// check if value is negative
	if(val < 0.0){
 8000c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d518      	bpl.n	8000c4e <float_to_ASCII+0x76>
		ngtv_flg = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	77fb      	strb	r3, [r7, #31]
		pos = val * -1.0;
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fc39 	bl	8000498 <__aeabi_f2d>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff ff83 	bl	8000b38 <__aeabi_d2f>
 8000c32:	4603      	mov	r3, r0
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eef1 7a67 	vneg.f32	s15, s15
 8000c3c:	edc7 7a06 	vstr	s15, [r7, #24]
		cntr += 1;
 8000c40:	7fbb      	ldrb	r3, [r7, #30]
 8000c42:	3301      	adds	r3, #1
 8000c44:	77bb      	strb	r3, [r7, #30]
		buf[0] = 45;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	222d      	movs	r2, #45	@ 0x2d
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e001      	b.n	8000c52 <float_to_ASCII+0x7a>
	}
	else{
		pos = val;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	61bb      	str	r3, [r7, #24]
	}

	// check how many integers there are
	uint8_t intgr = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]
	float prfx = 1.0;
 8000c56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000c5a:	613b      	str	r3, [r7, #16]
	while(pos >= prfx){
 8000c5c:	e00a      	b.n	8000c74 <float_to_ASCII+0x9c>
		prfx *= 10.0;
 8000c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c62:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6a:	edc7 7a04 	vstr	s15, [r7, #16]
		intgr += 1;
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	3301      	adds	r3, #1
 8000c72:	75fb      	strb	r3, [r7, #23]
	while(pos >= prfx){
 8000c74:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c78:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	daeb      	bge.n	8000c5e <float_to_ASCII+0x86>
	}

	// 51235.122 -> 51235
	if(intgr >= size){
 8000c86:	7dfa      	ldrb	r2, [r7, #23]
 8000c88:	7a7b      	ldrb	r3, [r7, #9]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d33b      	bcc.n	8000d06 <float_to_ASCII+0x12e>
		for(uint8_t j=cntr;j<(intgr+cntr); j++){
 8000c8e:	7fbb      	ldrb	r3, [r7, #30]
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e02e      	b.n	8000cf2 <float_to_ASCII+0x11a>
			buf[j] = (uint8_t) fmod(pos / (prfx/10), 10) + 48;
 8000c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c98:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ca4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ca8:	ee16 0a90 	vmov	r0, s13
 8000cac:	f7ff fbf4 	bl	8000498 <__aeabi_f2d>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8000ee0 <float_to_ASCII+0x308>
 8000cb8:	ec43 2b10 	vmov	d0, r2, r3
 8000cbc:	f00b fa68 	bl	800c190 <fmod>
 8000cc0:	ec53 2b10 	vmov	r2, r3, d0
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff ff16 	bl	8000af8 <__aeabi_d2uiz>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3230      	adds	r2, #48	@ 0x30
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	701a      	strb	r2, [r3, #0]
			prfx /= 10;
 8000cdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ce0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce8:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=cntr;j<(intgr+cntr); j++){
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	7df9      	ldrb	r1, [r7, #23]
 8000cf6:	7fbb      	ldrb	r3, [r7, #30]
 8000cf8:	440b      	add	r3, r1
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dbca      	blt.n	8000c94 <float_to_ASCII+0xbc>
		}
		cntr = intgr + cntr;
 8000cfe:	7dfa      	ldrb	r2, [r7, #23]
 8000d00:	7fbb      	ldrb	r3, [r7, #30]
 8000d02:	4413      	add	r3, r2
 8000d04:	77bb      	strb	r3, [r7, #30]
	}
	// -12.96 -> -12.9 (transform to three numbers)
	if(intgr < size && intgr > 0){
 8000d06:	7dfa      	ldrb	r2, [r7, #23]
 8000d08:	7a7b      	ldrb	r3, [r7, #9]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d269      	bcs.n	8000de2 <float_to_ASCII+0x20a>
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d066      	beq.n	8000de2 <float_to_ASCII+0x20a>
		// get the 3 number containing information (12.9 -> 129)
		for(uint8_t j=intgr;j<size;j++){
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	73bb      	strb	r3, [r7, #14]
 8000d18:	e012      	b.n	8000d40 <float_to_ASCII+0x168>
			pos *= 10;
 8000d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d1e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d26:	edc7 7a06 	vstr	s15, [r7, #24]
			prfx *= 10;
 8000d2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d2e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d36:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=intgr;j<size;j++){
 8000d3a:	7bbb      	ldrb	r3, [r7, #14]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73bb      	strb	r3, [r7, #14]
 8000d40:	7bba      	ldrb	r2, [r7, #14]
 8000d42:	7a7b      	ldrb	r3, [r7, #9]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3e8      	bcc.n	8000d1a <float_to_ASCII+0x142>
		}
		// add the point and the numbers holding information
		for(uint8_t j=cntr;j<(size+cntr+1); j++){
 8000d48:	7fbb      	ldrb	r3, [r7, #30]
 8000d4a:	737b      	strb	r3, [r7, #13]
 8000d4c:	e03d      	b.n	8000dca <float_to_ASCII+0x1f2>
			if(j == intgr+cntr){
 8000d4e:	7b7a      	ldrb	r2, [r7, #13]
 8000d50:	7df9      	ldrb	r1, [r7, #23]
 8000d52:	7fbb      	ldrb	r3, [r7, #30]
 8000d54:	440b      	add	r3, r1
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d108      	bne.n	8000d6c <float_to_ASCII+0x194>
				buf[cntr+intgr] = 46;
 8000d5a:	7fba      	ldrb	r2, [r7, #30]
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	4413      	add	r3, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	222e      	movs	r2, #46	@ 0x2e
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e02b      	b.n	8000dc4 <float_to_ASCII+0x1ec>
			}
			else{
				buf[j] = (uint8_t) fmod(pos / (prfx/10), 10) + 48;
 8000d6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d70:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d78:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d80:	ee16 0a90 	vmov	r0, s13
 8000d84:	f7ff fb88 	bl	8000498 <__aeabi_f2d>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8000ee0 <float_to_ASCII+0x308>
 8000d90:	ec43 2b10 	vmov	d0, r2, r3
 8000d94:	f00b f9fc 	bl	800c190 <fmod>
 8000d98:	ec53 2b10 	vmov	r2, r3, d0
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff feaa 	bl	8000af8 <__aeabi_d2uiz>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	7b7b      	ldrb	r3, [r7, #13]
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	440b      	add	r3, r1
 8000dae:	3230      	adds	r2, #48	@ 0x30
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
				prfx /= 10;
 8000db4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000db8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc0:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=cntr;j<(size+cntr+1); j++){
 8000dc4:	7b7b      	ldrb	r3, [r7, #13]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	737b      	strb	r3, [r7, #13]
 8000dca:	7a7a      	ldrb	r2, [r7, #9]
 8000dcc:	7fbb      	ldrb	r3, [r7, #30]
 8000dce:	441a      	add	r2, r3
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dabb      	bge.n	8000d4e <float_to_ASCII+0x176>
			}
		}
		cntr = cntr + size + 1;
 8000dd6:	7fba      	ldrb	r2, [r7, #30]
 8000dd8:	7a7b      	ldrb	r3, [r7, #9]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	77bb      	strb	r3, [r7, #30]
	}
	// 0.0012345 -> 0.00123 / 0.99951 -> 0.999 / 0.100000 -> 0.100 (transform to three numbers)
	if(intgr <= 0){
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d175      	bne.n	8000ed4 <float_to_ASCII+0x2fc>
		// steps are i.e. 0.000123 -> 0. + 000 + 123
		uint8_t frctnl = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	733b      	strb	r3, [r7, #12]
		// make 0.
		buf[cntr] = 48;
 8000dec:	7fbb      	ldrb	r3, [r7, #30]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	2230      	movs	r2, #48	@ 0x30
 8000df4:	701a      	strb	r2, [r3, #0]
		cntr += 1;
 8000df6:	7fbb      	ldrb	r3, [r7, #30]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	77bb      	strb	r3, [r7, #30]
		buf[cntr] = 46;
 8000dfc:	7fbb      	ldrb	r3, [r7, #30]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	222e      	movs	r2, #46	@ 0x2e
 8000e04:	701a      	strb	r2, [r3, #0]
		cntr += 1;
 8000e06:	7fbb      	ldrb	r3, [r7, #30]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	77bb      	strb	r3, [r7, #30]
		// get the three numbers that hold the information
		while(pos < 100){
 8000e0c:	e00a      	b.n	8000e24 <float_to_ASCII+0x24c>
			pos *= 10;
 8000e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e12:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1a:	edc7 7a06 	vstr	s15, [r7, #24]
			frctnl += 1;
 8000e1e:	7b3b      	ldrb	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	733b      	strb	r3, [r7, #12]
		while(pos < 100){
 8000e24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e28:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000ee8 <float_to_ASCII+0x310>
 8000e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e34:	d4eb      	bmi.n	8000e0e <float_to_ASCII+0x236>
		}
		// pad zeros (+ 000)
		for(uint8_t i=cntr;i<(frctnl-1+ngtv_flg);i++){
 8000e36:	7fbb      	ldrb	r3, [r7, #30]
 8000e38:	72fb      	strb	r3, [r7, #11]
 8000e3a:	e00a      	b.n	8000e52 <float_to_ASCII+0x27a>
			buf[i] = 48;
 8000e3c:	7afb      	ldrb	r3, [r7, #11]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	2230      	movs	r2, #48	@ 0x30
 8000e44:	701a      	strb	r2, [r3, #0]
			cntr += 1;
 8000e46:	7fbb      	ldrb	r3, [r7, #30]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i=cntr;i<(frctnl-1+ngtv_flg);i++){
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	72fb      	strb	r3, [r7, #11]
 8000e52:	7afa      	ldrb	r2, [r7, #11]
 8000e54:	7b3b      	ldrb	r3, [r7, #12]
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbed      	blt.n	8000e3c <float_to_ASCII+0x264>
		}
		// add the numbers containing information to the array (+ 123)
		prfx = 100;
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <float_to_ASCII+0x314>)
 8000e62:	613b      	str	r3, [r7, #16]
		for(uint8_t j=cntr;j<(cntr+size); j++){
 8000e64:	7fbb      	ldrb	r3, [r7, #30]
 8000e66:	72bb      	strb	r3, [r7, #10]
 8000e68:	e02a      	b.n	8000ec0 <float_to_ASCII+0x2e8>
			buf[j] = (uint8_t) fmod(pos / (prfx), 10) + 48;
 8000e6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e76:	ee16 0a90 	vmov	r0, s13
 8000e7a:	f7ff fb0d 	bl	8000498 <__aeabi_f2d>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8000ee0 <float_to_ASCII+0x308>
 8000e86:	ec43 2b10 	vmov	d0, r2, r3
 8000e8a:	f00b f981 	bl	800c190 <fmod>
 8000e8e:	ec53 2b10 	vmov	r2, r3, d0
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fe2f 	bl	8000af8 <__aeabi_d2uiz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	7abb      	ldrb	r3, [r7, #10]
 8000ea0:	6839      	ldr	r1, [r7, #0]
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3230      	adds	r2, #48	@ 0x30
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]
			prfx /= 10;
 8000eaa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000eae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb6:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint8_t j=cntr;j<(cntr+size); j++){
 8000eba:	7abb      	ldrb	r3, [r7, #10]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	72bb      	strb	r3, [r7, #10]
 8000ec0:	7aba      	ldrb	r2, [r7, #10]
 8000ec2:	7fb9      	ldrb	r1, [r7, #30]
 8000ec4:	7a7b      	ldrb	r3, [r7, #9]
 8000ec6:	440b      	add	r3, r1
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbce      	blt.n	8000e6a <float_to_ASCII+0x292>
		}
		cntr = cntr + size;
 8000ecc:	7fba      	ldrb	r2, [r7, #30]
 8000ece:	7a7b      	ldrb	r3, [r7, #9]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	77bb      	strb	r3, [r7, #30]
	}
	return cntr;
 8000ed4:	7fbb      	ldrb	r3, [r7, #30]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40240000 	.word	0x40240000
 8000ee8:	42c80000 	.word	0x42c80000
 8000eec:	42c80000 	.word	0x42c80000

08000ef0 <ASCII_to_float>:

float ASCII_to_float(uint8_t begin, uint8_t end, uint8_t buf[]){
 8000ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	603a      	str	r2, [r7, #0]
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	460b      	mov	r3, r1
 8000f00:	71bb      	strb	r3, [r7, #6]
	float val = 0.0;		// result
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
	uint8_t k = begin;		// increment
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	74fb      	strb	r3, [r7, #19]
	uint8_t dot = 0;		// dot for decimal calculation
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	74bb      	strb	r3, [r7, #18]
	float dcmlpnt = 1.0;	// decimal point counter
 8000f10:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f14:	60fb      	str	r3, [r7, #12]
	uint8_t ngtv_flg = 0;	// number is negative
 8000f16:	2300      	movs	r3, #0
 8000f18:	72fb      	strb	r3, [r7, #11]

	if(buf[k] == 45){	// check if UART send 45 is '-' (negative sign)
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f24:	d16b      	bne.n	8000ffe <ASCII_to_float+0x10e>
	  ngtv_flg = 1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	72fb      	strb	r3, [r7, #11]
	  k = begin + 1;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	74fb      	strb	r3, [r7, #19]
	}
	// loop through UART Rx buffer
	while(k != end){
 8000f30:	e065      	b.n	8000ffe <ASCII_to_float+0x10e>
	  if(buf[k] == 46){	// 46 is ASCII '.' (dot)
 8000f32:	7cfb      	ldrb	r3, [r7, #19]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f3c:	d104      	bne.n	8000f48 <ASCII_to_float+0x58>
		  dot = 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	74bb      	strb	r3, [r7, #18]
		  k += 1;
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	3301      	adds	r3, #1
 8000f46:	74fb      	strb	r3, [r7, #19]
	  }
	  // calculate value from UART uint8_t to float
	  if(dot == 0){
 8000f48:	7cbb      	ldrb	r3, [r7, #18]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d116      	bne.n	8000f7c <ASCII_to_float+0x8c>
		  val = val * 10 + (float)buf[k] - 48.0;
 8000f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f52:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f5a:	7cfb      	ldrb	r3, [r7, #19]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001040 <ASCII_to_float+0x150>
 8000f72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f76:	edc7 7a05 	vstr	s15, [r7, #20]
 8000f7a:	e03d      	b.n	8000ff8 <ASCII_to_float+0x108>
	  }
	  else{
		  val = val + (((float)buf[k] - 48.0) / (10.0 * dcmlpnt));
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f7ff fa8b 	bl	8000498 <__aeabi_f2d>
 8000f82:	4604      	mov	r4, r0
 8000f84:	460d      	mov	r5, r1
 8000f86:	7cfb      	ldrb	r3, [r7, #19]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f96:	ee17 0a90 	vmov	r0, s15
 8000f9a:	f7ff fa7d 	bl	8000498 <__aeabi_f2d>
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <ASCII_to_float+0x154>)
 8000fa4:	f7ff f918 	bl	80001d8 <__aeabi_dsub>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4690      	mov	r8, r2
 8000fae:	4699      	mov	r9, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fa71 	bl	8000498 <__aeabi_f2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <ASCII_to_float+0x158>)
 8000fbc:	f7ff fac4 	bl	8000548 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	4649      	mov	r1, r9
 8000fc8:	f7ff fbe8 	bl	800079c <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff f902 	bl	80001dc <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdaa 	bl	8000b38 <__aeabi_d2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	617b      	str	r3, [r7, #20]
		  dcmlpnt *= 10.0;
 8000fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff4:	edc7 7a03 	vstr	s15, [r7, #12]
	  }
	  k += 1;
 8000ff8:	7cfb      	ldrb	r3, [r7, #19]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	74fb      	strb	r3, [r7, #19]
	while(k != end){
 8000ffe:	7cfa      	ldrb	r2, [r7, #19]
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	429a      	cmp	r2, r3
 8001004:	d195      	bne.n	8000f32 <ASCII_to_float+0x42>
	}
	// make value negative
	if(ngtv_flg == 1){
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d10f      	bne.n	800102c <ASCII_to_float+0x13c>
	  val *= -1.0;
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff fa43 	bl	8000498 <__aeabi_f2d>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fd8d 	bl	8000b38 <__aeabi_d2f>
 800101e:	4603      	mov	r3, r0
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef1 7a67 	vneg.f32	s15, s15
 8001028:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return val;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	ee07 3a90 	vmov	s15, r3
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800103e:	bf00      	nop
 8001040:	42400000 	.word	0x42400000
 8001044:	40480000 	.word	0x40480000
 8001048:	40240000 	.word	0x40240000

0800104c <write_DAC>:
 */

// includes
#include "main.h"

void write_DAC(uint8_t reg, uint16_t data){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	80bb      	strh	r3, [r7, #4]
	uint8_t DAC_tx_buff[3] = {(0x0F&reg), (uint16_t)(data>>8), (uint16_t)(data&0x00FF)};
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	b2db      	uxtb	r3, r3
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	737b      	strb	r3, [r7, #13]
 8001070:	88bb      	ldrh	r3, [r7, #4]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	73bb      	strb	r3, [r7, #14]

	// write data to DAC1
	HAL_GPIO_WritePin(GPIOA, CS_DAC_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2110      	movs	r1, #16
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f002 f8ed 	bl	800325c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, DAC_tx_buff, 3,100);
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	2203      	movs	r2, #3
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <write_DAC+0x58>)
 800108c:	f005 fe3d 	bl	8006d0a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_DAC_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001098:	f002 f8e0 	bl	800325c <HAL_GPIO_WritePin>

	return;
 800109c:	bf00      	nop
}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000b60 	.word	0x20000b60

080010a8 <DAC_set>:

void DAC_set(uint8_t channel, float voltage){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	ed87 0a00 	vstr	s0, [r7]
 80010b4:	71fb      	strb	r3, [r7, #7]

	uint16_t result = (uint16_t)(voltage/33.0*655360.0);
 80010b6:	6838      	ldr	r0, [r7, #0]
 80010b8:	f7ff f9ee 	bl	8000498 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <DAC_set+0x5c>)
 80010c2:	f7ff fb6b 	bl	800079c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <DAC_set+0x60>)
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd0a 	bl	8000af8 <__aeabi_d2uiz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	81fb      	strh	r3, [r7, #14]
	uint8_t reg = channel + 8;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3308      	adds	r3, #8
 80010ec:	737b      	strb	r3, [r7, #13]

	write_DAC(reg, result);
 80010ee:	89fa      	ldrh	r2, [r7, #14]
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffa9 	bl	800104c <write_DAC>

	return;
 80010fa:	bf00      	nop
}
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40408000 	.word	0x40408000
 8001108:	41240000 	.word	0x41240000

0800110c <USB_get_num>:
 */

// includes
#include "main.h"

float USB_get_num(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

	  uint32_t i=0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	  uint8_t while_end = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	72fb      	strb	r3, [r7, #11]
	  float val = 0.0;
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
	  while(while_end != 1){
 8001120:	e019      	b.n	8001156 <USB_get_num+0x4a>
		  if(USB_buffer[i] == 13){
 8001122:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <USB_get_num+0x74>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b0d      	cmp	r3, #13
 800112c:	d110      	bne.n	8001150 <USB_get_num+0x44>
			  val = ASCII_to_float(0,i,USB_buffer);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <USB_get_num+0x74>)
 8001134:	4619      	mov	r1, r3
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff feda 	bl	8000ef0 <ASCII_to_float>
 800113c:	ed87 0a01 	vstr	s0, [r7, #4]
			  if(USB_buffer[i] == 13){
 8001140:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <USB_get_num+0x74>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b0d      	cmp	r3, #13
 800114a:	d101      	bne.n	8001150 <USB_get_num+0x44>
				  while_end = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	72fb      	strb	r3, [r7, #11]
			  }
		  }
		  i++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
	  while(while_end != 1){
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d1e2      	bne.n	8001122 <USB_get_num+0x16>
	  }
	  memset(USB_buffer,'0',3000);
 800115c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001160:	2130      	movs	r1, #48	@ 0x30
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <USB_get_num+0x74>)
 8001164:	f00a ff8c 	bl	800c080 <memset>
	  USB_buffer[0] = 82;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <USB_get_num+0x74>)
 800116a:	2252      	movs	r2, #82	@ 0x52
 800116c:	701a      	strb	r2, [r3, #0]

	  return val;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ee07 3a90 	vmov	s15, r3
}
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000c14 	.word	0x20000c14

08001184 <baseline_correction>:
 */

#include "main.h"

// remove baseline
void baseline_correction(struct voltammogram *val, uint16_t threshold){
 8001184:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001188:	b08b      	sub	sp, #44	@ 0x2c
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
 8001192:	466b      	mov	r3, sp
 8001194:	4618      	mov	r0, r3
	uint16_t l = val->length;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	83bb      	strh	r3, [r7, #28]
	// remove oxidation peak
	uint16_t x = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t replacement = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	837b      	strh	r3, [r7, #26]
	float avg;

	float baseline[l];
 80011a4:	8bb9      	ldrh	r1, [r7, #28]
 80011a6:	460b      	mov	r3, r1
 80011a8:	3b01      	subs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	b28b      	uxth	r3, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	4698      	mov	r8, r3
 80011b2:	4691      	mov	r9, r2
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80011c0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80011c4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80011c8:	b28b      	uxth	r3, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	461c      	mov	r4, r3
 80011ce:	4615      	mov	r5, r2
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	016b      	lsls	r3, r5, #5
 80011da:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80011de:	0162      	lsls	r2, r4, #5
 80011e0:	460b      	mov	r3, r1
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	3307      	adds	r3, #7
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	ebad 0d03 	sub.w	sp, sp, r3
 80011ee:	466b      	mov	r3, sp
 80011f0:	3303      	adds	r3, #3
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
	for(uint16_t k=0;k<l;k++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80011fc:	e00d      	b.n	800121a <baseline_correction+0x96>
		baseline[k] = val->I[k];
 80011fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001200:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	440a      	add	r2, r1
 8001208:	3204      	adds	r2, #4
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	601a      	str	r2, [r3, #0]
	for(uint16_t k=0;k<l;k++){
 8001214:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001216:	3301      	adds	r3, #1
 8001218:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800121a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800121c:	8bbb      	ldrh	r3, [r7, #28]
 800121e:	429a      	cmp	r2, r3
 8001220:	d3ed      	bcc.n	80011fe <baseline_correction+0x7a>
	}

	while((x < threshold) && (replacement > 0)){
 8001222:	e03b      	b.n	800129c <baseline_correction+0x118>
		uint16_t replacement = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(uint16_t i=1;i<l-1;i++){
 8001228:	2301      	movs	r3, #1
 800122a:	843b      	strh	r3, [r7, #32]
 800122c:	e02e      	b.n	800128c <baseline_correction+0x108>
			avg = (baseline[i-1]+baseline[i+1])/2;
 800122e:	8c3b      	ldrh	r3, [r7, #32]
 8001230:	3b01      	subs	r3, #1
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	8c3b      	ldrh	r3, [r7, #32]
 800123e:	3301      	adds	r3, #1
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800124e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001256:	edc7 7a03 	vstr	s15, [r7, #12]
			if(baseline[i] > avg){
 800125a:	8c3b      	ldrh	r3, [r7, #32]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ed97 7a03 	vldr	s14, [r7, #12]
 800126a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d508      	bpl.n	8001286 <baseline_correction+0x102>
				baseline[i] = avg;
 8001274:	8c3b      	ldrh	r3, [r7, #32]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	601a      	str	r2, [r3, #0]
				replacement = replacement + 1;
 8001280:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001282:	3301      	adds	r3, #1
 8001284:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(uint16_t i=1;i<l-1;i++){
 8001286:	8c3b      	ldrh	r3, [r7, #32]
 8001288:	3301      	adds	r3, #1
 800128a:	843b      	strh	r3, [r7, #32]
 800128c:	8c3a      	ldrh	r2, [r7, #32]
 800128e:	8bbb      	ldrh	r3, [r7, #28]
 8001290:	3b01      	subs	r3, #1
 8001292:	429a      	cmp	r2, r3
 8001294:	dbcb      	blt.n	800122e <baseline_correction+0xaa>
			}
		}
		x = x + 1;
 8001296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001298:	3301      	adds	r3, #1
 800129a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while((x < threshold) && (replacement > 0)){
 800129c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d202      	bcs.n	80012aa <baseline_correction+0x126>
 80012a4:	8b7b      	ldrh	r3, [r7, #26]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1bc      	bne.n	8001224 <baseline_correction+0xa0>
	}
	// baseline correction
	for(uint16_t j=0;j<l;j++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	83fb      	strh	r3, [r7, #30]
 80012ae:	e02e      	b.n	800130e <baseline_correction+0x18a>
		val->I[j] = val->I[j]- baseline[j];
 80012b0:	8bfb      	ldrh	r3, [r7, #30]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3304      	adds	r3, #4
 80012ba:	ed93 7a00 	vldr	s14, [r3]
 80012be:	8bfb      	ldrh	r3, [r7, #30]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	8bfb      	ldrh	r3, [r7, #30]
 80012cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3304      	adds	r3, #4
 80012d8:	edc3 7a00 	vstr	s15, [r3]
		if(val->I[j] > 3000){
 80012dc:	8bfb      	ldrh	r3, [r7, #30]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3304      	adds	r3, #4
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001324 <baseline_correction+0x1a0>
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	dd07      	ble.n	8001308 <baseline_correction+0x184>
			val->I[j] = 0;
 80012f8:	8bfb      	ldrh	r3, [r7, #30]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3304      	adds	r3, #4
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0;j<l;j++){
 8001308:	8bfb      	ldrh	r3, [r7, #30]
 800130a:	3301      	adds	r3, #1
 800130c:	83fb      	strh	r3, [r7, #30]
 800130e:	8bfa      	ldrh	r2, [r7, #30]
 8001310:	8bbb      	ldrh	r3, [r7, #28]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3cc      	bcc.n	80012b0 <baseline_correction+0x12c>
		}
	}

	return;
 8001316:	bf00      	nop
 8001318:	4685      	mov	sp, r0
}
 800131a:	372c      	adds	r7, #44	@ 0x2c
 800131c:	46bd      	mov	sp, r7
 800131e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001322:	4770      	bx	lr
 8001324:	453b8000 	.word	0x453b8000

08001328 <window>:

// window the data
void window(struct voltammogram *val, float low, float high){
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	ed87 0a02 	vstr	s0, [r7, #8]
 8001334:	edc7 0a01 	vstr	s1, [r7, #4]
    uint16_t l = val->length;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	82bb      	strh	r3, [r7, #20]

    for(uint16_t i=0;i<l;i++){
 800133e:	2300      	movs	r3, #0
 8001340:	82fb      	strh	r3, [r7, #22]
 8001342:	e02a      	b.n	800139a <window+0x72>
        if((val->U[i] < low) || (val->U[i] > high)){
 8001344:	8afb      	ldrh	r3, [r7, #22]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3304      	adds	r3, #4
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	ed97 7a02 	vldr	s14, [r7, #8]
 800135a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dc0f      	bgt.n	8001384 <window+0x5c>
 8001364:	8afb      	ldrh	r3, [r7, #22]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3304      	adds	r3, #4
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ed97 7a01 	vldr	s14, [r7, #4]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d507      	bpl.n	8001394 <window+0x6c>
        	val->I[i] = 0;
 8001384:	8afb      	ldrh	r3, [r7, #22]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
    for(uint16_t i=0;i<l;i++){
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	3301      	adds	r3, #1
 8001398:	82fb      	strh	r3, [r7, #22]
 800139a:	8afa      	ldrh	r2, [r7, #22]
 800139c:	8abb      	ldrh	r3, [r7, #20]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3d0      	bcc.n	8001344 <window+0x1c>
		}
	}
	return;
 80013a2:	bf00      	nop
}
 80013a4:	371c      	adds	r7, #28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <get_peak>:

// get the peak of the current
void get_peak(struct voltammogram *val){
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]

	val->peakI = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<val->length;i++){
 80013c2:	2300      	movs	r3, #0
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	e029      	b.n	800141c <get_peak+0x6e>
		if(val->I[i] > val->peakI){
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	3304      	adds	r3, #4
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	dd15      	ble.n	8001416 <get_peak+0x68>
			 val->peakI = val->I[i];
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3304      	adds	r3, #4
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 80013fc:	601a      	str	r2, [r3, #0]
			 val->peakU = val->U[i];
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3304      	adds	r3, #4
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f603 1368 	addw	r3, r3, #2408	@ 0x968
 8001414:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<val->length;i++){
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	3301      	adds	r3, #1
 800141a:	81fb      	strh	r3, [r7, #14]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	89fa      	ldrh	r2, [r7, #14]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3d0      	bcc.n	80013c8 <get_peak+0x1a>
		}
	}

	return;
 8001426:	bf00      	nop
}
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	0000      	movs	r0, r0
 8001434:	0000      	movs	r0, r0
	...

08001438 <gaussian_fit>:

// fit gaussian
struct voltammogram gaussian_fit(struct voltammogram val){
 8001438:	b084      	sub	sp, #16
 800143a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143e:	f5ad 6d24 	sub.w	sp, sp, #2624	@ 0xa40
 8001442:	af00      	add	r7, sp, #0
 8001444:	f507 6424 	add.w	r4, r7, #2624	@ 0xa40
 8001448:	f6a4 2434 	subw	r4, r4, #2612	@ 0xa34
 800144c:	6020      	str	r0, [r4, #0]
 800144e:	f607 2064 	addw	r0, r7, #2660	@ 0xa64
 8001452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct voltammogram result = {
 8001456:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 800145a:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 800145e:	4618      	mov	r0, r3
 8001460:	f640 136c 	movw	r3, #2412	@ 0x96c
 8001464:	461a      	mov	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	f00a fe0a 	bl	800c080 <memset>
			.length = val.length,
 800146c:	f8b7 2a64 	ldrh.w	r2, [r7, #2660]	@ 0xa64
	struct voltammogram result = {
 8001470:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8001474:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 8001478:	801a      	strh	r2, [r3, #0]
			.peakI = val.peakI,
 800147a:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 800147e:	f603 1368 	addw	r3, r3, #2408	@ 0x968
 8001482:	681a      	ldr	r2, [r3, #0]
	struct voltammogram result = {
 8001484:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8001488:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 800148c:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 8001490:	601a      	str	r2, [r3, #0]
			.peakU = val.peakU,
 8001492:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8001496:	f603 136c 	addw	r3, r3, #2412	@ 0x96c
 800149a:	681a      	ldr	r2, [r3, #0]
	struct voltammogram result = {
 800149c:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80014a0:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 80014a4:	f603 1368 	addw	r3, r3, #2408	@ 0x968
 80014a8:	601a      	str	r2, [r3, #0]
	};
	float a = val.peakI - 0.001;
 80014aa:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80014ae:	f603 1368 	addw	r3, r3, #2408	@ 0x968
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe ffef 	bl	8000498 <__aeabi_f2d>
 80014ba:	a3c1      	add	r3, pc, #772	@ (adr r3, 80017c0 <gaussian_fit+0x388>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe fe8a 	bl	80001d8 <__aeabi_dsub>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb34 	bl	8000b38 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f607 2224 	addw	r2, r7, #2596	@ 0xa24
 80014d6:	6013      	str	r3, [r2, #0]
	float b = val.peakU;
 80014d8:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80014dc:	f603 136c 	addw	r3, r3, #2412	@ 0x96c
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f507 6222 	add.w	r2, r7, #2592	@ 0xa20
 80014e6:	6013      	str	r3, [r2, #0]
	float c = 0.01;
 80014e8:	4bb7      	ldr	r3, [pc, #732]	@ (80017c8 <gaussian_fit+0x390>)
 80014ea:	f607 223c 	addw	r2, r7, #2620	@ 0xa3c
 80014ee:	6013      	str	r3, [r2, #0]
	float f[20];
	uint16_t index = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a

	// find U peak
	uint16_t peakUi = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8a7 3a38 	strh.w	r3, [r7, #2616]	@ 0xa38
	for(uint16_t i=0;i<val.length;i++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8a7 3a36 	strh.w	r3, [r7, #2614]	@ 0xa36
 8001502:	e01f      	b.n	8001544 <gaussian_fit+0x10c>
		if(val.U[i]>b){
 8001504:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	@ 0xa36
 8001508:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	4413      	add	r3, r2
 8001518:	3308      	adds	r3, #8
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d504      	bpl.n	800153a <gaussian_fit+0x102>
			peakUi = i;
 8001530:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	@ 0xa36
 8001534:	f8a7 3a38 	strh.w	r3, [r7, #2616]	@ 0xa38
			break;
 8001538:	e00a      	b.n	8001550 <gaussian_fit+0x118>
	for(uint16_t i=0;i<val.length;i++){
 800153a:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	@ 0xa36
 800153e:	3301      	adds	r3, #1
 8001540:	f8a7 3a36 	strh.w	r3, [r7, #2614]	@ 0xa36
 8001544:	f8b7 3a64 	ldrh.w	r3, [r7, #2660]	@ 0xa64
 8001548:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	@ 0xa36
 800154c:	429a      	cmp	r2, r3
 800154e:	d3d9      	bcc.n	8001504 <gaussian_fit+0xcc>
		}
	}

	// compute gaussian fit (of the peak only)
	for(uint16_t i=peakUi-10;i<peakUi+10;i++){
 8001550:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	@ 0xa38
 8001554:	3b0a      	subs	r3, #10
 8001556:	f8a7 3a34 	strh.w	r3, [r7, #2612]	@ 0xa34
 800155a:	e055      	b.n	8001608 <gaussian_fit+0x1d0>
		f[index] = a*exp(-pow(((val.U[i]-b)/c),2));
 800155c:	f607 2324 	addw	r3, r7, #2596	@ 0xa24
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	f7fe ff99 	bl	8000498 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	f8b7 3a34 	ldrh.w	r3, [r7, #2612]	@ 0xa34
 800156e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	4413      	add	r3, r2
 800157e:	3308      	adds	r3, #8
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001590:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800159c:	ee16 0a90 	vmov	r0, s13
 80015a0:	f7fe ff7a 	bl	8000498 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	ed9f 1b83 	vldr	d1, [pc, #524]	@ 80017b8 <gaussian_fit+0x380>
 80015ac:	ec43 2b10 	vmov	d0, r2, r3
 80015b0:	f00a fe5c 	bl	800c26c <pow>
 80015b4:	ec53 2b10 	vmov	r2, r3, d0
 80015b8:	603a      	str	r2, [r7, #0]
 80015ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	ed97 0b00 	vldr	d0, [r7]
 80015c4:	f00a fd9c 	bl	800c100 <exp>
 80015c8:	ec53 2b10 	vmov	r2, r3, d0
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe ffba 	bl	8000548 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	f8b7 4a3a 	ldrh.w	r4, [r7, #2618]	@ 0xa3a
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff faaa 	bl	8000b38 <__aeabi_d2f>
 80015e4:	4601      	mov	r1, r0
 80015e6:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80015ea:	f6a3 12dc 	subw	r2, r3, #2524	@ 0x9dc
 80015ee:	00a3      	lsls	r3, r4, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	6019      	str	r1, [r3, #0]
		index++;
 80015f4:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 80015f8:	3301      	adds	r3, #1
 80015fa:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
	for(uint16_t i=peakUi-10;i<peakUi+10;i++){
 80015fe:	f8b7 3a34 	ldrh.w	r3, [r7, #2612]	@ 0xa34
 8001602:	3301      	adds	r3, #1
 8001604:	f8a7 3a34 	strh.w	r3, [r7, #2612]	@ 0xa34
 8001608:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	@ 0xa38
 800160c:	f103 0209 	add.w	r2, r3, #9
 8001610:	f8b7 3a34 	ldrh.w	r3, [r7, #2612]	@ 0xa34
 8001614:	429a      	cmp	r2, r3
 8001616:	daa1      	bge.n	800155c <gaussian_fit+0x124>
	}

	// fit gaussian
	uint16_t threshold = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	f8a7 3a32 	strh.w	r3, [r7, #2610]	@ 0xa32
	uint8_t bound = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3a31 	strb.w	r3, [r7, #2609]	@ 0xa31
	while((bound != 1) && (threshold != 1000)){
 8001624:	e0b6      	b.n	8001794 <gaussian_fit+0x35c>
	    c = c + 0.001;	// increase c
 8001626:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f7fe ff34 	bl	8000498 <__aeabi_f2d>
 8001630:	a363      	add	r3, pc, #396	@ (adr r3, 80017c0 <gaussian_fit+0x388>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe fdd1 	bl	80001dc <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fa79 	bl	8000b38 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	f607 223c 	addw	r2, r7, #2620	@ 0xa3c
 800164c:	6013      	str	r3, [r2, #0]

	    // compute gaussian fit (of the peak only)
		float f[20];
		index = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
		for(uint16_t i=peakUi-10;i<peakUi+10;i++){
 8001654:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	@ 0xa38
 8001658:	3b0a      	subs	r3, #10
 800165a:	f8a7 3a2e 	strh.w	r3, [r7, #2606]	@ 0xa2e
 800165e:	e054      	b.n	800170a <gaussian_fit+0x2d2>
			f[index] = a*exp(-pow(((val.U[i]-b)/c),2));
 8001660:	f607 2324 	addw	r3, r7, #2596	@ 0xa24
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	f7fe ff17 	bl	8000498 <__aeabi_f2d>
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	f8b7 3a2e 	ldrh.w	r3, [r7, #2606]	@ 0xa2e
 8001672:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 800167c:	f107 0208 	add.w	r2, r7, #8
 8001680:	4413      	add	r3, r2
 8001682:	3308      	adds	r3, #8
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001694:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016a0:	ee16 0a90 	vmov	r0, s13
 80016a4:	f7fe fef8 	bl	8000498 <__aeabi_f2d>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 80017b8 <gaussian_fit+0x380>
 80016b0:	ec43 2b10 	vmov	d0, r2, r3
 80016b4:	f00a fdda 	bl	800c26c <pow>
 80016b8:	ec53 2b10 	vmov	r2, r3, d0
 80016bc:	4692      	mov	sl, r2
 80016be:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80016c2:	ec4b ab10 	vmov	d0, sl, fp
 80016c6:	f00a fd1b 	bl	800c100 <exp>
 80016ca:	ec53 2b10 	vmov	r2, r3, d0
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe ff39 	bl	8000548 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	f8b7 4a3a 	ldrh.w	r4, [r7, #2618]	@ 0xa3a
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff fa29 	bl	8000b38 <__aeabi_d2f>
 80016e6:	4601      	mov	r1, r0
 80016e8:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80016ec:	f6a3 222c 	subw	r2, r3, #2604	@ 0xa2c
 80016f0:	00a3      	lsls	r3, r4, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	6019      	str	r1, [r3, #0]
			index++;
 80016f6:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 80016fa:	3301      	adds	r3, #1
 80016fc:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
		for(uint16_t i=peakUi-10;i<peakUi+10;i++){
 8001700:	f8b7 3a2e 	ldrh.w	r3, [r7, #2606]	@ 0xa2e
 8001704:	3301      	adds	r3, #1
 8001706:	f8a7 3a2e 	strh.w	r3, [r7, #2606]	@ 0xa2e
 800170a:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	@ 0xa38
 800170e:	f103 0209 	add.w	r2, r3, #9
 8001712:	f8b7 3a2e 	ldrh.w	r3, [r7, #2606]	@ 0xa2e
 8001716:	429a      	cmp	r2, r3
 8001718:	daa2      	bge.n	8001660 <gaussian_fit+0x228>
		}

		// check the peak
		index = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
		for(uint16_t i=peakUi-10;i<peakUi+10;i++){
 8001720:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	@ 0xa38
 8001724:	3b0a      	subs	r3, #10
 8001726:	f8a7 3a2c 	strh.w	r3, [r7, #2604]	@ 0xa2c
 800172a:	e026      	b.n	800177a <gaussian_fit+0x342>
			if(val.I[i] < f[index]){
 800172c:	f8b7 3a2c 	ldrh.w	r3, [r7, #2604]	@ 0xa2c
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8001736:	f107 0208 	add.w	r2, r7, #8
 800173a:	4413      	add	r3, r2
 800173c:	3308      	adds	r3, #8
 800173e:	ed93 7a00 	vldr	s14, [r3]
 8001742:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 8001746:	f507 6224 	add.w	r2, r7, #2624	@ 0xa40
 800174a:	f6a2 222c 	subw	r2, r2, #2604	@ 0xa2c
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d502      	bpl.n	8001766 <gaussian_fit+0x32e>
				bound = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 3a31 	strb.w	r3, [r7, #2609]	@ 0xa31
			}
			index++;
 8001766:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 800176a:	3301      	adds	r3, #1
 800176c:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
		for(uint16_t i=peakUi-10;i<peakUi+10;i++){
 8001770:	f8b7 3a2c 	ldrh.w	r3, [r7, #2604]	@ 0xa2c
 8001774:	3301      	adds	r3, #1
 8001776:	f8a7 3a2c 	strh.w	r3, [r7, #2604]	@ 0xa2c
 800177a:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	@ 0xa38
 800177e:	f103 0209 	add.w	r2, r3, #9
 8001782:	f8b7 3a2c 	ldrh.w	r3, [r7, #2604]	@ 0xa2c
 8001786:	429a      	cmp	r2, r3
 8001788:	dad0      	bge.n	800172c <gaussian_fit+0x2f4>
		}

	    threshold = threshold + 1;
 800178a:	f8b7 3a32 	ldrh.w	r3, [r7, #2610]	@ 0xa32
 800178e:	3301      	adds	r3, #1
 8001790:	f8a7 3a32 	strh.w	r3, [r7, #2610]	@ 0xa32
	while((bound != 1) && (threshold != 1000)){
 8001794:	f897 3a31 	ldrb.w	r3, [r7, #2609]	@ 0xa31
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <gaussian_fit+0x370>
 800179c:	f8b7 3a32 	ldrh.w	r3, [r7, #2610]	@ 0xa32
 80017a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017a4:	f47f af3f 	bne.w	8001626 <gaussian_fit+0x1ee>
	}

	// calculate the whole gaussian to return
	index = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
	for(uint16_t i=1;i<val.length;i++){
 80017ae:	2301      	movs	r3, #1
 80017b0:	f8a7 3a2a 	strh.w	r3, [r7, #2602]	@ 0xa2a
 80017b4:	e099      	b.n	80018ea <gaussian_fit+0x4b2>
 80017b6:	bf00      	nop
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40000000 	.word	0x40000000
 80017c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017c4:	3f50624d 	.word	0x3f50624d
 80017c8:	3c23d70a 	.word	0x3c23d70a
		result.I[index] = a*exp(-pow(((val.U[i]-b)/c),2));
 80017cc:	f607 2324 	addw	r3, r7, #2596	@ 0xa24
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f7fe fe61 	bl	8000498 <__aeabi_f2d>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	f8b7 3a2a 	ldrh.w	r3, [r7, #2602]	@ 0xa2a
 80017de:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 80017e8:	f107 0208 	add.w	r2, r7, #8
 80017ec:	4413      	add	r3, r2
 80017ee:	3308      	adds	r3, #8
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001800:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800180c:	ee16 0a90 	vmov	r0, s13
 8001810:	f7fe fe42 	bl	8000498 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8001930 <gaussian_fit+0x4f8>
 800181c:	ec43 2b10 	vmov	d0, r2, r3
 8001820:	f00a fd24 	bl	800c26c <pow>
 8001824:	ec53 2b10 	vmov	r2, r3, d0
 8001828:	4690      	mov	r8, r2
 800182a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800182e:	ec49 8b10 	vmov	d0, r8, r9
 8001832:	f00a fc65 	bl	800c100 <exp>
 8001836:	ec53 2b10 	vmov	r2, r3, d0
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fe83 	bl	8000548 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	f8b7 4a3a 	ldrh.w	r4, [r7, #2618]	@ 0xa3a
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f973 	bl	8000b38 <__aeabi_d2f>
 8001852:	4601      	mov	r1, r0
 8001854:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8001858:	f6a3 128c 	subw	r2, r3, #2444	@ 0x98c
 800185c:	00a3      	lsls	r3, r4, #2
 800185e:	4413      	add	r3, r2
 8001860:	3304      	adds	r3, #4
 8001862:	6019      	str	r1, [r3, #0]
		result.U[index] = val.U[index];
 8001864:	f8b7 2a3a 	ldrh.w	r2, [r7, #2618]	@ 0xa3a
 8001868:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 800186c:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	f602 2258 	addw	r2, r2, #2648	@ 0xa58
 8001876:	f107 0108 	add.w	r1, r7, #8
 800187a:	440a      	add	r2, r1
 800187c:	3208      	adds	r2, #8
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8001884:	f6a1 118c 	subw	r1, r1, #2444	@ 0x98c
 8001888:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3304      	adds	r3, #4
 8001892:	601a      	str	r2, [r3, #0]
		if(result.I[index] < 0.0001){
 8001894:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 8001898:	f507 6224 	add.w	r2, r7, #2624	@ 0xa40
 800189c:	f6a2 128c 	subw	r2, r2, #2444	@ 0x98c
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3304      	adds	r3, #4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fdf5 	bl	8000498 <__aeabi_f2d>
 80018ae:	a322      	add	r3, pc, #136	@ (adr r3, 8001938 <gaussian_fit+0x500>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7ff f8ba 	bl	8000a2c <__aeabi_dcmplt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <gaussian_fit+0x49e>
			result.I[index] = 0.0;
 80018be:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 80018c2:	f507 6224 	add.w	r2, r7, #2624	@ 0xa40
 80018c6:	f6a2 128c 	subw	r2, r2, #2444	@ 0x98c
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3304      	adds	r3, #4
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		}
		index++;
 80018d6:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	@ 0xa3a
 80018da:	3301      	adds	r3, #1
 80018dc:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	@ 0xa3a
	for(uint16_t i=1;i<val.length;i++){
 80018e0:	f8b7 3a2a 	ldrh.w	r3, [r7, #2602]	@ 0xa2a
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8a7 3a2a 	strh.w	r3, [r7, #2602]	@ 0xa2a
 80018ea:	f8b7 3a64 	ldrh.w	r3, [r7, #2660]	@ 0xa64
 80018ee:	f8b7 2a2a 	ldrh.w	r2, [r7, #2602]	@ 0xa2a
 80018f2:	429a      	cmp	r2, r3
 80018f4:	f4ff af6a 	bcc.w	80017cc <gaussian_fit+0x394>
	}


	return result;
 80018f8:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80018fc:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8001906:	f6a3 138c 	subw	r3, r3, #2444	@ 0x98c
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f640 136c 	movw	r3, #2412	@ 0x96c
 8001912:	461a      	mov	r2, r3
 8001914:	f00a fbe6 	bl	800c0e4 <memcpy>
}
 8001918:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 800191c:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f507 6724 	add.w	r7, r7, #2624	@ 0xa40
 8001926:	46bd      	mov	sp, r7
 8001928:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b004      	add	sp, #16
 800192e:	4770      	bx	lr
 8001930:	00000000 	.word	0x00000000
 8001934:	40000000 	.word	0x40000000
 8001938:	eb1c432d 	.word	0xeb1c432d
 800193c:	3f1a36e2 	.word	0x3f1a36e2

08001940 <subGaus>:

struct voltammogram subGaus(struct voltammogram gaus, struct voltammogram val){
 8001940:	b084      	sub	sp, #16
 8001942:	b590      	push	{r4, r7, lr}
 8001944:	f6ad 1d7c 	subw	sp, sp, #2428	@ 0x97c
 8001948:	af00      	add	r7, sp, #0
 800194a:	f607 1478 	addw	r4, r7, #2424	@ 0x978
 800194e:	f6a4 1474 	subw	r4, r4, #2420	@ 0x974
 8001952:	6020      	str	r0, [r4, #0]
 8001954:	f607 108c 	addw	r0, r7, #2444	@ 0x98c
 8001958:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct voltammogram result;

	for(uint16_t i=1;i<val.length;i++){
 800195c:	2301      	movs	r3, #1
 800195e:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8001962:	e05b      	b.n	8001a1c <subGaus+0xdc>
		result.I[i] = val.I[i] - gaus.I[i];
 8001964:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 8001968:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800196c:	f502 6217 	add.w	r2, r2, #2416	@ 0x970
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	ed93 7a00 	vldr	s14, [r3]
 800197a:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	f603 1388 	addw	r3, r3, #2440	@ 0x988
 8001984:	443b      	add	r3, r7
 8001986:	3308      	adds	r3, #8
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 8001990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001994:	f607 1278 	addw	r2, r7, #2424	@ 0x978
 8001998:	f5a2 6217 	sub.w	r2, r2, #2416	@ 0x970
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3304      	adds	r3, #4
 80019a2:	edc3 7a00 	vstr	s15, [r3]
		result.U[i] = val.U[i];
 80019a6:	f8b7 2976 	ldrh.w	r2, [r7, #2422]	@ 0x976
 80019aa:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 80019ae:	f607 1188 	addw	r1, r7, #2440	@ 0x988
 80019b2:	f501 6117 	add.w	r1, r1, #2416	@ 0x970
 80019b6:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	440a      	add	r2, r1
 80019be:	3204      	adds	r2, #4
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	f607 1178 	addw	r1, r7, #2424	@ 0x978
 80019c6:	f5a1 6117 	sub.w	r1, r1, #2416	@ 0x970
 80019ca:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3304      	adds	r3, #4
 80019d4:	601a      	str	r2, [r3, #0]
		if(result.I[i] > 3000){
 80019d6:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 80019da:	f607 1278 	addw	r2, r7, #2424	@ 0x978
 80019de:	f5a2 6217 	sub.w	r2, r2, #2416	@ 0x970
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3304      	adds	r3, #4
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001a68 <subGaus+0x128>
 80019f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	dd0b      	ble.n	8001a12 <subGaus+0xd2>
			result.I[i] = 0;
 80019fa:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 80019fe:	f607 1278 	addw	r2, r7, #2424	@ 0x978
 8001a02:	f5a2 6217 	sub.w	r2, r2, #2416	@ 0x970
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
	for(uint16_t i=1;i<val.length;i++){
 8001a12:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	@ 0x976
 8001a16:	3301      	adds	r3, #1
 8001a18:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 8001a1c:	f507 5397 	add.w	r3, r7, #4832	@ 0x12e0
 8001a20:	f103 0318 	add.w	r3, r3, #24
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	f8b7 2976 	ldrh.w	r2, [r7, #2422]	@ 0x976
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d39a      	bcc.n	8001964 <subGaus+0x24>
		}
	}

	return result;
 8001a2e:	f607 1378 	addw	r3, r7, #2424	@ 0x978
 8001a32:	f6a3 1374 	subw	r3, r3, #2420	@ 0x974
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f607 1378 	addw	r3, r7, #2424	@ 0x978
 8001a3c:	f5a3 6317 	sub.w	r3, r3, #2416	@ 0x970
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f640 136c 	movw	r3, #2412	@ 0x96c
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f00a fb4b 	bl	800c0e4 <memcpy>
}
 8001a4e:	f607 1378 	addw	r3, r7, #2424	@ 0x978
 8001a52:	f6a3 1374 	subw	r3, r3, #2420	@ 0x974
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	f607 177c 	addw	r7, r7, #2428	@ 0x97c
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a62:	b004      	add	sp, #16
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	453b8000 	.word	0x453b8000
 8001a6c:	00000000 	.word	0x00000000

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	f5ad 5d3e 	sub.w	sp, sp, #12160	@ 0x2f80
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	f241 27d0 	movw	r7, #4816	@ 0x12d0
 8001a7c:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7e:	f001 f8d8 	bl	8002c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a82:	f000 fd8f 	bl	80025a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a86:	f000 fe97 	bl	80027b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a8a:	f000 fddd 	bl	8002648 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a8e:	f000 fe1b 	bl	80026c8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a92:	f009 fd23 	bl	800b4dc <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8001a96:	f000 fe55 	bl	8002744 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  uint8_t I2C_addrss = 0b10010000;
 8001a9a:	2390      	movs	r3, #144	@ 0x90
 8001a9c:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001aa0:	f102 021f 	add.w	r2, r2, #31
 8001aa4:	7013      	strb	r3, [r2, #0]
  uint8_t I2C_tx_data[1];
  uint8_t I2C_rx_data[2];
  int16_t I2C_temp = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001aac:	f102 021c 	add.w	r2, r2, #28
 8001ab0:	8013      	strh	r3, [r2, #0]
  float temp = 0.0;
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001aba:	f102 0218 	add.w	r2, r2, #24
 8001abe:	6013      	str	r3, [r2, #0]

  // disable internal reference DAC's
  HAL_GPIO_WritePin(GPIOA, EN_4_2VDC_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aca:	f001 fbc7 	bl	800325c <HAL_GPIO_WritePin>
  write_DAC(CONFIG, 0x0100);
 8001ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f7ff faba 	bl	800104c <write_DAC>
  write_DAC(0x04, 0x0103);
 8001ad8:	f240 1103 	movw	r1, #259	@ 0x103
 8001adc:	2004      	movs	r0, #4
 8001ade:	f7ff fab5 	bl	800104c <write_DAC>
  HAL_GPIO_WritePin(GPIOB, EN_REF_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	48da      	ldr	r0, [pc, #872]	@ (8001e50 <main+0x3e0>)
 8001ae8:	f001 fbb8 	bl	800325c <HAL_GPIO_WritePin>
  // DAC1 set value at 0
  DAC_set(CH0, 0.00);
 8001aec:	ed9f 0ad9 	vldr	s0, [pc, #868]	@ 8001e54 <main+0x3e4>
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fad9 	bl	80010a8 <DAC_set>
  DAC_set(CH1, 0.00);
 8001af6:	ed9f 0ad7 	vldr	s0, [pc, #860]	@ 8001e54 <main+0x3e4>
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff fad4 	bl	80010a8 <DAC_set>

  USB_buffer[0] = 82;
 8001b00:	4bd5      	ldr	r3, [pc, #852]	@ (8001e58 <main+0x3e8>)
 8001b02:	2252      	movs	r2, #82	@ 0x52
 8001b04:	701a      	strb	r2, [r3, #0]
  uint32_t set_cntr = 60;
 8001b06:	233c      	movs	r3, #60	@ 0x3c
 8001b08:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001b0c:	f102 0214 	add.w	r2, r2, #20
 8001b10:	6013      	str	r3, [r2, #0]
  uint32_t cntr = set_cntr;
 8001b12:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8001b16:	f103 0314 	add.w	r3, r3, #20
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001b20:	f102 0210 	add.w	r2, r2, #16
 8001b24:	6013      	str	r3, [r2, #0]
  uint8_t use_measurement = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001b2c:	f102 0217 	add.w	r2, r2, #23
 8001b30:	7013      	strb	r3, [r2, #0]
  uint8_t run_algorithms = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001b38:	f102 020f 	add.w	r2, r2, #15
 8001b3c:	7013      	strb	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(sec_flag == 1){
 8001b3e:	4bc7      	ldr	r3, [pc, #796]	@ (8001e5c <main+0x3ec>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d1fb      	bne.n	8001b3e <main+0xce>

		  // get temperature
		  I2C_tx_data[0] = 0x01;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001b4c:	f102 020c 	add.w	r2, r2, #12
 8001b50:	7013      	strb	r3, [r2, #0]
		  HAL_I2C_Master_Transmit(&hi2c1, I2C_addrss, I2C_tx_data, 1, 100);
 8001b52:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001b56:	f103 031f 	add.w	r3, r3, #31
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001b62:	f102 020c 	add.w	r2, r2, #12
 8001b66:	2364      	movs	r3, #100	@ 0x64
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	48bc      	ldr	r0, [pc, #752]	@ (8001e60 <main+0x3f0>)
 8001b6e:	f001 fc43 	bl	80033f8 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, I2C_addrss, I2C_rx_data, 2, 100);
 8001b72:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001b76:	f103 031f 	add.w	r3, r3, #31
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001b82:	f102 0208 	add.w	r2, r2, #8
 8001b86:	2364      	movs	r3, #100	@ 0x64
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	48b4      	ldr	r0, [pc, #720]	@ (8001e60 <main+0x3f0>)
 8001b8e:	f001 fd4b 	bl	8003628 <HAL_I2C_Master_Receive>
		  if((I2C_rx_data[1]&0x20) == 0x20){
 8001b92:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 8001b96:	f103 0309 	add.w	r3, r3, #9
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d04c      	beq.n	8001c3e <main+0x1ce>
			  I2C_tx_data[0] = 0x00;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001baa:	f102 020c 	add.w	r2, r2, #12
 8001bae:	7013      	strb	r3, [r2, #0]
			  HAL_I2C_Master_Transmit(&hi2c1, I2C_addrss, I2C_tx_data, 1, 100);
 8001bb0:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001bb4:	f103 031f 	add.w	r3, r3, #31
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001bc0:	f102 020c 	add.w	r2, r2, #12
 8001bc4:	2364      	movs	r3, #100	@ 0x64
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	48a5      	ldr	r0, [pc, #660]	@ (8001e60 <main+0x3f0>)
 8001bcc:	f001 fc14 	bl	80033f8 <HAL_I2C_Master_Transmit>
			  HAL_I2C_Master_Receive(&hi2c1, I2C_addrss, I2C_rx_data, 2, 100);
 8001bd0:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001bd4:	f103 031f 	add.w	r3, r3, #31
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b299      	uxth	r1, r3
 8001bdc:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001be0:	f102 0208 	add.w	r2, r2, #8
 8001be4:	2364      	movs	r3, #100	@ 0x64
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2302      	movs	r3, #2
 8001bea:	489d      	ldr	r0, [pc, #628]	@ (8001e60 <main+0x3f0>)
 8001bec:	f001 fd1c 	bl	8003628 <HAL_I2C_Master_Receive>
			  I2C_temp = (I2C_rx_data[0]<<8) + I2C_rx_data[1];
 8001bf0:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 8001bf4:	f103 0308 	add.w	r3, r3, #8
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8001c02:	f102 0209 	add.w	r2, r2, #9
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001c10:	f102 021c 	add.w	r2, r2, #28
 8001c14:	8013      	strh	r3, [r2, #0]
			  temp = (float)I2C_temp * 0.0078125;
 8001c16:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001c1a:	f103 031c 	add.w	r3, r3, #28
 8001c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001e64 <main+0x3f4>
 8001c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c32:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001c36:	f103 0318 	add.w	r3, r3, #24
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		  }

		  CDC_Transmit_FS((uint8_t*)"Next measurement in: ", 21);
 8001c3e:	2115      	movs	r1, #21
 8001c40:	4889      	ldr	r0, [pc, #548]	@ (8001e68 <main+0x3f8>)
 8001c42:	f009 fd1f 	bl	800b684 <CDC_Transmit_FS>
		  HAL_Delay(10);
 8001c46:	200a      	movs	r0, #10
 8001c48:	f001 f868 	bl	8002d1c <HAL_Delay>
		  uint8_t buf[10];
		  uint8_t len_print_buf = float_to_ASCII((float)cntr,buf);
 8001c4c:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8001c50:	f103 0310 	add.w	r3, r3, #16
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001c62:	f103 031c 	add.w	r3, r3, #28
 8001c66:	4618      	mov	r0, r3
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	f7fe ffb4 	bl	8000bd8 <float_to_ASCII>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001c76:	f102 0216 	add.w	r2, r2, #22
 8001c7a:	7013      	strb	r3, [r2, #0]
		  CDC_Transmit_FS(buf, len_print_buf);
 8001c7c:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001c80:	f103 0316 	add.w	r3, r3, #22
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001c8c:	f103 031c 	add.w	r3, r3, #28
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f009 fcf6 	bl	800b684 <CDC_Transmit_FS>
		  HAL_Delay(10);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f001 f83f 	bl	8002d1c <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)" seconds.\n", 10);
 8001c9e:	210a      	movs	r1, #10
 8001ca0:	4872      	ldr	r0, [pc, #456]	@ (8001e6c <main+0x3fc>)
 8001ca2:	f009 fcef 	bl	800b684 <CDC_Transmit_FS>
		  HAL_Delay(10);
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f001 f838 	bl	8002d1c <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)"Press enter to change data.\n", 28);
 8001cac:	211c      	movs	r1, #28
 8001cae:	4870      	ldr	r0, [pc, #448]	@ (8001e70 <main+0x400>)
 8001cb0:	f009 fce8 	bl	800b684 <CDC_Transmit_FS>
		  HAL_Delay(10);
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f001 f831 	bl	8002d1c <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)"\n", 1);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	486d      	ldr	r0, [pc, #436]	@ (8001e74 <main+0x404>)
 8001cbe:	f009 fce1 	bl	800b684 <CDC_Transmit_FS>
		  HAL_Delay(10);
 8001cc2:	200a      	movs	r0, #10
 8001cc4:	f001 f82a 	bl	8002d1c <HAL_Delay>

		  if(USB_buffer[0] == 13){
 8001cc8:	4b63      	ldr	r3, [pc, #396]	@ (8001e58 <main+0x3e8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b0d      	cmp	r3, #13
 8001cce:	f040 814e 	bne.w	8001f6e <main+0x4fe>
			  // second to next measurement
			  CDC_Transmit_FS((uint8_t*)"Fill in seconds for next measurement or press enter to keep old value.\n", 71);
 8001cd2:	2147      	movs	r1, #71	@ 0x47
 8001cd4:	4868      	ldr	r0, [pc, #416]	@ (8001e78 <main+0x408>)
 8001cd6:	f009 fcd5 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001cda:	2064      	movs	r0, #100	@ 0x64
 8001cdc:	f001 f81e 	bl	8002d1c <HAL_Delay>
			  USB_buffer[0] = 82;
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <main+0x3e8>)
 8001ce2:	2252      	movs	r2, #82	@ 0x52
 8001ce4:	701a      	strb	r2, [r3, #0]
			  // change data cntr
			  float val = USB_data(set_cntr);
 8001ce6:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8001cea:	f103 0314 	add.w	r3, r3, #20
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfc:	f000 fdd2 	bl	80028a4 <USB_data>
 8001d00:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001d04:	f103 0310 	add.w	r3, r3, #16
 8001d08:	ed83 0a00 	vstr	s0, [r3]
			  set_cntr = (uint32_t)val;
 8001d0c:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001d10:	f103 0310 	add.w	r3, r3, #16
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1c:	ee17 3a90 	vmov	r3, s15
 8001d20:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001d24:	f102 0214 	add.w	r2, r2, #20
 8001d28:	6013      	str	r3, [r2, #0]
			  cntr = set_cntr;
 8001d2a:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8001d2e:	f103 0314 	add.w	r3, r3, #20
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001d38:	f102 0210 	add.w	r2, r2, #16
 8001d3c:	6013      	str	r3, [r2, #0]
			  CDC_Transmit_FS((uint8_t*)"\n", 1);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	484c      	ldr	r0, [pc, #304]	@ (8001e74 <main+0x404>)
 8001d42:	f009 fc9f 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001d46:	2064      	movs	r0, #100	@ 0x64
 8001d48:	f000 ffe8 	bl	8002d1c <HAL_Delay>

			  // change data SWV
			  CDC_Transmit_FS((uint8_t*)"Fill in SWV parameters (see PalmSens.nl) or press enter to keep old values:\n", 76);
 8001d4c:	214c      	movs	r1, #76	@ 0x4c
 8001d4e:	484b      	ldr	r0, [pc, #300]	@ (8001e7c <main+0x40c>)
 8001d50:	f009 fc98 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001d54:	2064      	movs	r0, #100	@ 0x64
 8001d56:	f000 ffe1 	bl	8002d1c <HAL_Delay>
			  CDC_Transmit_FS((uint8_t*)"Equilibration time: ", 20);
 8001d5a:	2114      	movs	r1, #20
 8001d5c:	4848      	ldr	r0, [pc, #288]	@ (8001e80 <main+0x410>)
 8001d5e:	f009 fc91 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001d62:	2064      	movs	r0, #100	@ 0x64
 8001d64:	f000 ffda 	bl	8002d1c <HAL_Delay>
			  swv1.t_equilibration = USB_data(swv1.t_equilibration);
 8001d68:	4b46      	ldr	r3, [pc, #280]	@ (8001e84 <main+0x414>)
 8001d6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d72:	f000 fd97 	bl	80028a4 <USB_data>
 8001d76:	eef0 7a40 	vmov.f32	s15, s0
 8001d7a:	4b42      	ldr	r3, [pc, #264]	@ (8001e84 <main+0x414>)
 8001d7c:	edc3 7a05 	vstr	s15, [r3, #20]
			  CDC_Transmit_FS((uint8_t*)"Amplitude: ", 11);
 8001d80:	210b      	movs	r1, #11
 8001d82:	4841      	ldr	r0, [pc, #260]	@ (8001e88 <main+0x418>)
 8001d84:	f009 fc7e 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001d88:	2064      	movs	r0, #100	@ 0x64
 8001d8a:	f000 ffc7 	bl	8002d1c <HAL_Delay>
			  swv1.Amplitude = USB_data(swv1.Amplitude);
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <main+0x414>)
 8001d90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	f000 fd84 	bl	80028a4 <USB_data>
 8001d9c:	eef0 7a40 	vmov.f32	s15, s0
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <main+0x414>)
 8001da2:	edc3 7a04 	vstr	s15, [r3, #16]
			  CDC_Transmit_FS((uint8_t*)"Frequency: ", 11);
 8001da6:	210b      	movs	r1, #11
 8001da8:	4838      	ldr	r0, [pc, #224]	@ (8001e8c <main+0x41c>)
 8001daa:	f009 fc6b 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001dae:	2064      	movs	r0, #100	@ 0x64
 8001db0:	f000 ffb4 	bl	8002d1c <HAL_Delay>
			  swv1.Frequency = USB_data(swv1.Frequency);
 8001db4:	4b33      	ldr	r3, [pc, #204]	@ (8001e84 <main+0x414>)
 8001db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	f000 fd71 	bl	80028a4 <USB_data>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <main+0x414>)
 8001dc8:	edc3 7a01 	vstr	s15, [r3, #4]
			  CDC_Transmit_FS((uint8_t*)"Begin potential: ", 17);
 8001dcc:	2111      	movs	r1, #17
 8001dce:	4830      	ldr	r0, [pc, #192]	@ (8001e90 <main+0x420>)
 8001dd0:	f009 fc58 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001dd4:	2064      	movs	r0, #100	@ 0x64
 8001dd6:	f000 ffa1 	bl	8002d1c <HAL_Delay>
			  swv1.E_begin = USB_data(swv1.E_begin);
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <main+0x414>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	f000 fd5e 	bl	80028a4 <USB_data>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <main+0x414>)
 8001dee:	edc3 7a00 	vstr	s15, [r3]
			  CDC_Transmit_FS((uint8_t*)"End potential: ", 15);
 8001df2:	210f      	movs	r1, #15
 8001df4:	4827      	ldr	r0, [pc, #156]	@ (8001e94 <main+0x424>)
 8001df6:	f009 fc45 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001dfa:	2064      	movs	r0, #100	@ 0x64
 8001dfc:	f000 ff8e 	bl	8002d1c <HAL_Delay>
			  swv1.E_end = USB_data(swv1.E_end);
 8001e00:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <main+0x414>)
 8001e02:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e06:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0a:	f000 fd4b 	bl	80028a4 <USB_data>
 8001e0e:	eef0 7a40 	vmov.f32	s15, s0
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <main+0x414>)
 8001e14:	edc3 7a02 	vstr	s15, [r3, #8]
			  CDC_Transmit_FS((uint8_t*)"Step: ", 6);
 8001e18:	2106      	movs	r1, #6
 8001e1a:	481f      	ldr	r0, [pc, #124]	@ (8001e98 <main+0x428>)
 8001e1c:	f009 fc32 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001e20:	2064      	movs	r0, #100	@ 0x64
 8001e22:	f000 ff7b 	bl	8002d1c <HAL_Delay>
			  swv1.E_step = USB_data(swv1.E_step);
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <main+0x414>)
 8001e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e30:	f000 fd38 	bl	80028a4 <USB_data>
 8001e34:	eef0 7a40 	vmov.f32	s15, s0
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <main+0x414>)
 8001e3a:	edc3 7a03 	vstr	s15, [r3, #12]
			  CDC_Transmit_FS((uint8_t*)"\n", 1);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <main+0x404>)
 8001e42:	f009 fc1f 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001e46:	2064      	movs	r0, #100	@ 0x64
 8001e48:	f000 ff68 	bl	8002d1c <HAL_Delay>

			  // use measurement or update voltammograms?
			  CDC_Transmit_FS((uint8_t*)"Perform voltammogram? Press: yes (y) or no (n).\n\n", 49);
 8001e4c:	2131      	movs	r1, #49	@ 0x31
 8001e4e:	e025      	b.n	8001e9c <main+0x42c>
 8001e50:	48000400 	.word	0x48000400
 8001e54:	00000000 	.word	0x00000000
 8001e58:	20000c14 	.word	0x20000c14
 8001e5c:	20000c10 	.word	0x20000c10
 8001e60:	20000b0c 	.word	0x20000b0c
 8001e64:	3c000000 	.word	0x3c000000
 8001e68:	0800da60 	.word	0x0800da60
 8001e6c:	0800da78 	.word	0x0800da78
 8001e70:	0800da84 	.word	0x0800da84
 8001e74:	0800daa4 	.word	0x0800daa4
 8001e78:	0800daa8 	.word	0x0800daa8
 8001e7c:	0800daf0 	.word	0x0800daf0
 8001e80:	0800db40 	.word	0x0800db40
 8001e84:	20000000 	.word	0x20000000
 8001e88:	0800db58 	.word	0x0800db58
 8001e8c:	0800db64 	.word	0x0800db64
 8001e90:	0800db70 	.word	0x0800db70
 8001e94:	0800db84 	.word	0x0800db84
 8001e98:	0800db94 	.word	0x0800db94
 8001e9c:	4828      	ldr	r0, [pc, #160]	@ (8001f40 <main+0x4d0>)
 8001e9e:	f009 fbf1 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001ea2:	2064      	movs	r0, #100	@ 0x64
 8001ea4:	f000 ff3a 	bl	8002d1c <HAL_Delay>
			  while(USB_buffer[0] == 82);
 8001ea8:	bf00      	nop
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <main+0x4d4>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b52      	cmp	r3, #82	@ 0x52
 8001eb0:	d0fb      	beq.n	8001eaa <main+0x43a>
			  if(USB_buffer[0] == 121){
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <main+0x4d4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b79      	cmp	r3, #121	@ 0x79
 8001eb8:	d106      	bne.n	8001ec8 <main+0x458>
				  use_measurement = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001ec0:	f102 0217 	add.w	r2, r2, #23
 8001ec4:	7013      	strb	r3, [r2, #0]
 8001ec6:	e023      	b.n	8001f10 <main+0x4a0>
			  }
			  else{
				  memset(USB_buffer,'0',3000);
 8001ec8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ecc:	2130      	movs	r1, #48	@ 0x30
 8001ece:	481d      	ldr	r0, [pc, #116]	@ (8001f44 <main+0x4d4>)
 8001ed0:	f00a f8d6 	bl	800c080 <memset>
				  USB_buffer[0] = 82;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <main+0x4d4>)
 8001ed6:	2252      	movs	r2, #82	@ 0x52
 8001ed8:	701a      	strb	r2, [r3, #0]
				  CDC_Transmit_FS((uint8_t*)"Update voltammogram? Press: yes (y) or no (n).\n\n", 48);
 8001eda:	2130      	movs	r1, #48	@ 0x30
 8001edc:	481a      	ldr	r0, [pc, #104]	@ (8001f48 <main+0x4d8>)
 8001ede:	f009 fbd1 	bl	800b684 <CDC_Transmit_FS>
				  HAL_Delay(100);
 8001ee2:	2064      	movs	r0, #100	@ 0x64
 8001ee4:	f000 ff1a 	bl	8002d1c <HAL_Delay>
				  while(USB_buffer[0] == 82);
 8001ee8:	bf00      	nop
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <main+0x4d4>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b52      	cmp	r3, #82	@ 0x52
 8001ef0:	d0fb      	beq.n	8001eea <main+0x47a>
				  if(USB_buffer[0] == 121){\
					  // for U and I
					  //USB_get_voltammogram();
					  //USB_get_voltammogram();
				  }
				  memset(USB_buffer,'0',3000);
 8001ef2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ef6:	2130      	movs	r1, #48	@ 0x30
 8001ef8:	4812      	ldr	r0, [pc, #72]	@ (8001f44 <main+0x4d4>)
 8001efa:	f00a f8c1 	bl	800c080 <memset>
				  USB_buffer[0] = 82;
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <main+0x4d4>)
 8001f00:	2252      	movs	r2, #82	@ 0x52
 8001f02:	701a      	strb	r2, [r3, #0]
				  use_measurement = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001f0a:	f102 0217 	add.w	r2, r2, #23
 8001f0e:	7013      	strb	r3, [r2, #0]
			  }

			  // run algorithms
			  CDC_Transmit_FS((uint8_t*)"Run algorithms? Press yes (y) or press no (n).\n\n", 48);
 8001f10:	2130      	movs	r1, #48	@ 0x30
 8001f12:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <main+0x4dc>)
 8001f14:	f009 fbb6 	bl	800b684 <CDC_Transmit_FS>
			  HAL_Delay(100);
 8001f18:	2064      	movs	r0, #100	@ 0x64
 8001f1a:	f000 feff 	bl	8002d1c <HAL_Delay>
			  while(USB_buffer[0] == 82);
 8001f1e:	bf00      	nop
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <main+0x4d4>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b52      	cmp	r3, #82	@ 0x52
 8001f26:	d0fb      	beq.n	8001f20 <main+0x4b0>
			  if(USB_buffer[0] == 121){
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <main+0x4d4>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b79      	cmp	r3, #121	@ 0x79
 8001f2e:	d10f      	bne.n	8001f50 <main+0x4e0>
				  run_algorithms = 1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001f36:	f102 020f 	add.w	r2, r2, #15
 8001f3a:	7013      	strb	r3, [r2, #0]
 8001f3c:	e00e      	b.n	8001f5c <main+0x4ec>
 8001f3e:	bf00      	nop
 8001f40:	0800db9c 	.word	0x0800db9c
 8001f44:	20000c14 	.word	0x20000c14
 8001f48:	0800dbd0 	.word	0x0800dbd0
 8001f4c:	0800dc04 	.word	0x0800dc04
			  }
			  else{
				  run_algorithms = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8001f56:	f102 020f 	add.w	r2, r2, #15
 8001f5a:	7013      	strb	r3, [r2, #0]
			  }
			  memset(USB_buffer,'0',3000);
 8001f5c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f60:	2130      	movs	r1, #48	@ 0x30
 8001f62:	48c1      	ldr	r0, [pc, #772]	@ (8002268 <main+0x7f8>)
 8001f64:	f00a f88c 	bl	800c080 <memset>
			  USB_buffer[0] = 82;
 8001f68:	4bbf      	ldr	r3, [pc, #764]	@ (8002268 <main+0x7f8>)
 8001f6a:	2252      	movs	r2, #82	@ 0x52
 8001f6c:	701a      	strb	r2, [r3, #0]
		  }

		if(cntr == 0){
 8001f6e:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8001f72:	f103 0310 	add.w	r3, r3, #16
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 82dc 	bne.w	8002536 <main+0xac6>
			HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8001f7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f86:	f001 f981 	bl	800328c <HAL_GPIO_TogglePin>
			CDC_Transmit_FS((uint8_t*)"START MEASUREMENT!\n\n", 20);
 8001f8a:	2114      	movs	r1, #20
 8001f8c:	48b7      	ldr	r0, [pc, #732]	@ (800226c <main+0x7fc>)
 8001f8e:	f009 fb79 	bl	800b684 <CDC_Transmit_FS>
			HAL_Delay(10);
 8001f92:	200a      	movs	r0, #10
 8001f94:	f000 fec2 	bl	8002d1c <HAL_Delay>
			if(use_measurement == 1){
				//execute_SWV(swv1);
			}
			if(run_algorithms == 1){
 8001f98:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8001f9c:	f103 030f 	add.w	r3, r3, #15
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	f040 82bd 	bne.w	8002522 <main+0xab2>
				struct voltammogram nv1 = v1;
 8001fa8:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8001fac:	f6a3 43ac 	subw	r3, r3, #3244	@ 0xcac
 8001fb0:	4aaf      	ldr	r2, [pc, #700]	@ (8002270 <main+0x800>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	f640 136c 	movw	r3, #2412	@ 0x96c
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f00a f892 	bl	800c0e4 <memcpy>
				struct voltammogram *pv1 = &nv1;
 8001fc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fc4:	3b0c      	subs	r3, #12
 8001fc6:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8001fca:	f102 020c 	add.w	r2, r2, #12
 8001fce:	6013      	str	r3, [r2, #0]
				baseline_correction(pv1, 1000);
 8001fd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd4:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001fd8:	f103 030c 	add.w	r3, r3, #12
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f7ff f8d1 	bl	8001184 <baseline_correction>
				window(pv1,0.4,1.0);
 8001fe2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001fe6:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8002274 <main+0x804>
 8001fea:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001fee:	f103 030c 	add.w	r3, r3, #12
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	f7ff f998 	bl	8001328 <window>
				get_peak(pv1);
 8001ff8:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8001ffc:	f103 030c 	add.w	r3, r3, #12
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	f7ff f9d4 	bl	80013ae <get_peak>
				struct voltammogram gaus = gaussian_fit(*pv1);
 8002006:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 800200a:	f5a3 7550 	sub.w	r5, r3, #832	@ 0x340
 800200e:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8002012:	f103 030c 	add.w	r3, r3, #12
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	4668      	mov	r0, sp
 800201a:	f104 030c 	add.w	r3, r4, #12
 800201e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002022:	4619      	mov	r1, r3
 8002024:	f00a f85e 	bl	800c0e4 <memcpy>
 8002028:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800202c:	4628      	mov	r0, r5
 800202e:	f7ff fa03 	bl	8001438 <gaussian_fit>
				struct voltammogram secondPeak = subGaus(gaus, *pv1);
 8002032:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8002036:	f103 0318 	add.w	r3, r3, #24
 800203a:	f6a3 15d4 	subw	r5, r3, #2516	@ 0x9d4
 800203e:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002042:	f5a3 7450 	sub.w	r4, r3, #832	@ 0x340
 8002046:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 800204a:	f103 030c 	add.w	r3, r3, #12
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f50d 6316 	add.w	r3, sp, #2400	@ 0x960
 8002054:	4611      	mov	r1, r2
 8002056:	f640 126c 	movw	r2, #2412	@ 0x96c
 800205a:	4618      	mov	r0, r3
 800205c:	f00a f842 	bl	800c0e4 <memcpy>
 8002060:	4668      	mov	r0, sp
 8002062:	f104 030c 	add.w	r3, r4, #12
 8002066:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800206a:	4619      	mov	r1, r3
 800206c:	f00a f83a 	bl	800c0e4 <memcpy>
 8002070:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002074:	4628      	mov	r0, r5
 8002076:	f7ff fc63 	bl	8001940 <subGaus>
				secondPeak.length = v1.length;
 800207a:	4b7d      	ldr	r3, [pc, #500]	@ (8002270 <main+0x800>)
 800207c:	881a      	ldrh	r2, [r3, #0]
 800207e:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8002082:	f103 0318 	add.w	r3, r3, #24
 8002086:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 800208a:	801a      	strh	r2, [r3, #0]
				struct voltammogram *psp = &secondPeak;
 800208c:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8002090:	f103 0304 	add.w	r3, r3, #4
 8002094:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8002098:	f102 0208 	add.w	r2, r2, #8
 800209c:	6013      	str	r3, [r2, #0]
				get_peak(psp);
 800209e:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 80020a2:	f103 0308 	add.w	r3, r3, #8
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f7ff f981 	bl	80013ae <get_peak>

				float IMTX = 0.0;
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 80020b4:	f102 0208 	add.w	r2, r2, #8
 80020b8:	6013      	str	r3, [r2, #0]
				float UMTX = 0.0;
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 80020c2:	f102 0204 	add.w	r2, r2, #4
 80020c6:	6013      	str	r3, [r2, #0]
				float LDd = 12.595243113981994*(pv1->peakI - 0.131641016666667) + -88.217138912960830*(pv1->peakU - 0.737234700000000);
 80020c8:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 80020cc:	f103 030c 	add.w	r3, r3, #12
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f9dd 	bl	8000498 <__aeabi_f2d>
 80020de:	a35a      	add	r3, pc, #360	@ (adr r3, 8002248 <main+0x7d8>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f7fe f878 	bl	80001d8 <__aeabi_dsub>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	a357      	add	r3, pc, #348	@ (adr r3, 8002250 <main+0x7e0>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fa27 	bl	8000548 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4614      	mov	r4, r2
 8002100:	461d      	mov	r5, r3
 8002102:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8002106:	f103 030c 	add.w	r3, r3, #12
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f603 1368 	addw	r3, r3, #2408	@ 0x968
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f9c0 	bl	8000498 <__aeabi_f2d>
 8002118:	a34f      	add	r3, pc, #316	@ (adr r3, 8002258 <main+0x7e8>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe f85b 	bl	80001d8 <__aeabi_dsub>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	a34d      	add	r3, pc, #308	@ (adr r3, 8002260 <main+0x7f0>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa0a 	bl	8000548 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe f84e 	bl	80001dc <__adddf3>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fcf6 	bl	8000b38 <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 8002152:	f102 0204 	add.w	r2, r2, #4
 8002156:	6013      	str	r3, [r2, #0]
				float LDr = 12.595243113981994*(psp->peakI - 0.131641016666667) + -88.217138912960830*(psp->peakI - 0.737234700000000);
 8002158:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 800215c:	f103 0308 	add.w	r3, r3, #8
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f995 	bl	8000498 <__aeabi_f2d>
 800216e:	a336      	add	r3, pc, #216	@ (adr r3, 8002248 <main+0x7d8>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe f830 	bl	80001d8 <__aeabi_dsub>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	a333      	add	r3, pc, #204	@ (adr r3, 8002250 <main+0x7e0>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe f9df 	bl	8000548 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4614      	mov	r4, r2
 8002190:	461d      	mov	r5, r3
 8002192:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8002196:	f103 0308 	add.w	r3, r3, #8
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f978 	bl	8000498 <__aeabi_f2d>
 80021a8:	a32b      	add	r3, pc, #172	@ (adr r3, 8002258 <main+0x7e8>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f813 	bl	80001d8 <__aeabi_dsub>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	a329      	add	r3, pc, #164	@ (adr r3, 8002260 <main+0x7f0>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe f9c2 	bl	8000548 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4620      	mov	r0, r4
 80021ca:	4629      	mov	r1, r5
 80021cc:	f7fe f806 	bl	80001dc <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fcae 	bl	8000b38 <__aeabi_d2f>
 80021dc:	4603      	mov	r3, r0
 80021de:	f507 52e5 	add.w	r2, r7, #7328	@ 0x1ca0
 80021e2:	6013      	str	r3, [r2, #0]
				if((LDd < 0) && (LDr > 0)){
 80021e4:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 80021e8:	f103 0304 	add.w	r3, r3, #4
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d53e      	bpl.n	8002278 <main+0x808>
 80021fa:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	dd35      	ble.n	8002278 <main+0x808>
				  IMTX = pv1->peakI;
 800220c:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8002210:	f103 030c 	add.w	r3, r3, #12
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8002220:	f102 0208 	add.w	r2, r2, #8
 8002224:	6013      	str	r3, [r2, #0]
				  UMTX = pv1->peakU;
 8002226:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 800222a:	f103 030c 	add.w	r3, r3, #12
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f603 1368 	addw	r3, r3, #2408	@ 0x968
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 800223a:	f102 0204 	add.w	r2, r2, #4
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e034      	b.n	80022ac <main+0x83c>
 8002242:	bf00      	nop
 8002244:	f3af 8000 	nop.w
 8002248:	e2b2a096 	.word	0xe2b2a096
 800224c:	3fc0d99c 	.word	0x3fc0d99c
 8002250:	b4977198 	.word	0xb4977198
 8002254:	402930c3 	.word	0x402930c3
 8002258:	39bf3e6f 	.word	0x39bf3e6f
 800225c:	3fe7976d 	.word	0x3fe7976d
 8002260:	9a9c76c5 	.word	0x9a9c76c5
 8002264:	c0560de5 	.word	0xc0560de5
 8002268:	20000c14 	.word	0x20000c14
 800226c:	0800dc38 	.word	0x0800dc38
 8002270:	20000018 	.word	0x20000018
 8002274:	3ecccccd 	.word	0x3ecccccd
				}
				else{
				  IMTX = psp->peakI;
 8002278:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 800227c:	f103 0308 	add.w	r3, r3, #8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 800228c:	f102 0208 	add.w	r2, r2, #8
 8002290:	6013      	str	r3, [r2, #0]
				  UMTX = psp->peakI;
 8002292:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8002296:	f103 0308 	add.w	r3, r3, #8
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f603 1364 	addw	r3, r3, #2404	@ 0x964
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 80022a6:	f102 0204 	add.w	r2, r2, #4
 80022aa:	6013      	str	r3, [r2, #0]
				}

				float meanI = IMTX*99.0550;
 80022ac:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 80022b0:	f103 0308 	add.w	r3, r3, #8
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f7fe f8ef 	bl	8000498 <__aeabi_f2d>
 80022ba:	a3b0      	add	r3, pc, #704	@ (adr r3, 800257c <main+0xb0c>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe f942 	bl	8000548 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc34 	bl	8000b38 <__aeabi_d2f>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 80022d6:	f102 021c 	add.w	r2, r2, #28
 80022da:	6013      	str	r3, [r2, #0]
				float pH_coef_slope = -2.4245*log(meanI)-43.0140;
 80022dc:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 80022e0:	f103 031c 	add.w	r3, r3, #28
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	f7fe f8d7 	bl	8000498 <__aeabi_f2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	ec43 2b10 	vmov	d0, r2, r3
 80022f2:	f009 ff7d 	bl	800c1f0 <log>
 80022f6:	ec51 0b10 	vmov	r0, r1, d0
 80022fa:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002584 <main+0xb14>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f922 	bl	8000548 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	a39f      	add	r3, pc, #636	@ (adr r3, 800258c <main+0xb1c>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fd ff61 	bl	80001d8 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f7fe fc0b 	bl	8000b38 <__aeabi_d2f>
 8002322:	4603      	mov	r3, r0
 8002324:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 8002328:	f102 0218 	add.w	r2, r2, #24
 800232c:	6013      	str	r3, [r2, #0]
				float pH_coef_inter = 2.3404*log(meanI)+39.4826;
 800232e:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 8002332:	f103 031c 	add.w	r3, r3, #28
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	f7fe f8ae 	bl	8000498 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	ec43 2b10 	vmov	d0, r2, r3
 8002344:	f009 ff54 	bl	800c1f0 <log>
 8002348:	ec51 0b10 	vmov	r0, r1, d0
 800234c:	a391      	add	r3, pc, #580	@ (adr r3, 8002594 <main+0xb24>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f8f9 	bl	8000548 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	a38f      	add	r3, pc, #572	@ (adr r3, 800259c <main+0xb2c>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fd ff3a 	bl	80001dc <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fbe2 	bl	8000b38 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 800237a:	f102 0214 	add.w	r2, r2, #20
 800237e:	6013      	str	r3, [r2, #0]
				float pH_est = pH_coef_slope*UMTX + pH_coef_inter;
 8002380:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 8002384:	f103 0318 	add.w	r3, r3, #24
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8002390:	f103 0304 	add.w	r3, r3, #4
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 80023a0:	f103 0314 	add.w	r3, r3, #20
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 80023b0:	edc3 7a00 	vstr	s15, [r3]
				if (pH_est > 8){
 80023b4:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80023c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	dd05      	ble.n	80023d6 <main+0x966>
				  pH_est = 8;
 80023ca:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80023ce:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e00f      	b.n	80023f6 <main+0x986>
				}
				else if(pH_est < 2){
 80023d6:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80023e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d504      	bpl.n	80023f6 <main+0x986>
				  pH_est = 2;
 80023ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023f0:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 80023f4:	6013      	str	r3, [r2, #0]
				}
				pH_est = round(pH_est);
 80023f6:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	f7fe f84c 	bl	8000498 <__aeabi_f2d>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	ec43 2b10 	vmov	d0, r2, r3
 8002408:	f009 ffb6 	bl	800c378 <round>
 800240c:	ec53 2b10 	vmov	r2, r3, d0
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fb90 	bl	8000b38 <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 800241e:	6013      	str	r3, [r2, #0]

				float fingerPrint[8] = {86.9785924968791, 93.1288806791545, 82.9734509350177, 89.2576238928360, 106.456856768742, 114.085161308293, 120.504521546912};
 8002420:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002424:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 8002428:	4618      	mov	r0, r3
 800242a:	2320      	movs	r3, #32
 800242c:	461a      	mov	r2, r3
 800242e:	2100      	movs	r1, #0
 8002430:	f009 fe26 	bl	800c080 <memset>
 8002434:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002438:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 800243c:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <main+0xae8>)
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002444:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 8002448:	4a44      	ldr	r2, [pc, #272]	@ (800255c <main+0xaec>)
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002450:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 8002454:	4a42      	ldr	r2, [pc, #264]	@ (8002560 <main+0xaf0>)
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 800245c:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 8002460:	4a40      	ldr	r2, [pc, #256]	@ (8002564 <main+0xaf4>)
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002468:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 800246c:	4a3e      	ldr	r2, [pc, #248]	@ (8002568 <main+0xaf8>)
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002474:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 8002478:	4a3c      	ldr	r2, [pc, #240]	@ (800256c <main+0xafc>)
 800247a:	615a      	str	r2, [r3, #20]
 800247c:	f607 43d8 	addw	r3, r7, #3288	@ 0xcd8
 8002480:	f6a3 43cc 	subw	r3, r3, #3276	@ 0xccc
 8002484:	4a3a      	ldr	r2, [pc, #232]	@ (8002570 <main+0xb00>)
 8002486:	619a      	str	r2, [r3, #24]
				float con = fingerPrint[(uint8_t)pH_est - 2]*IMTX;
 8002488:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002494:	edc7 7a01 	vstr	s15, [r7, #4]
 8002498:	793b      	ldrb	r3, [r7, #4]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b02      	subs	r3, #2
 800249e:	f607 42d8 	addw	r2, r7, #3288	@ 0xcd8
 80024a2:	f6a2 42cc 	subw	r2, r2, #3276	@ 0xccc
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 80024b2:	f103 0308 	add.w	r3, r3, #8
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 80024c2:	f103 0310 	add.w	r3, r3, #16
 80024c6:	edc3 7a00 	vstr	s15, [r3]

				// print
				uint8_t buf[10];
				uint8_t len_buf = float_to_ASCII(con, buf);
 80024ca:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80024ce:	f103 0310 	add.w	r3, r3, #16
 80024d2:	4618      	mov	r0, r3
 80024d4:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 80024d8:	f103 0310 	add.w	r3, r3, #16
 80024dc:	ed93 0a00 	vldr	s0, [r3]
 80024e0:	f7fe fb7a 	bl	8000bd8 <float_to_ASCII>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f507 52e4 	add.w	r2, r7, #7296	@ 0x1c80
 80024ea:	f102 020f 	add.w	r2, r2, #15
 80024ee:	7013      	strb	r3, [r2, #0]
				CDC_Transmit_FS(buf, len_buf);
 80024f0:	f507 53e4 	add.w	r3, r7, #7296	@ 0x1c80
 80024f4:	f103 030f 	add.w	r3, r3, #15
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002500:	f103 0310 	add.w	r3, r3, #16
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f009 f8bc 	bl	800b684 <CDC_Transmit_FS>
				HAL_Delay(10);
 800250c:	200a      	movs	r0, #10
 800250e:	f000 fc05 	bl	8002d1c <HAL_Delay>
				CDC_Transmit_FS((uint8_t*)" uM\n\n", 5);
 8002512:	2105      	movs	r1, #5
 8002514:	4817      	ldr	r0, [pc, #92]	@ (8002574 <main+0xb04>)
 8002516:	f009 f8b5 	bl	800b684 <CDC_Transmit_FS>
				HAL_Delay(1000);
 800251a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800251e:	f000 fbfd 	bl	8002d1c <HAL_Delay>
			}
			// reset counter
			cntr = set_cntr;
 8002522:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 8002526:	f103 0314 	add.w	r3, r3, #20
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8002530:	f102 0210 	add.w	r2, r2, #16
 8002534:	6013      	str	r3, [r2, #0]
		}
		cntr--;
 8002536:	f507 53e6 	add.w	r3, r7, #7360	@ 0x1cc0
 800253a:	f103 0310 	add.w	r3, r3, #16
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3b01      	subs	r3, #1
 8002542:	f507 52e6 	add.w	r2, r7, #7360	@ 0x1cc0
 8002546:	f102 0210 	add.w	r2, r2, #16
 800254a:	6013      	str	r3, [r2, #0]
	    sec_flag = 0;
 800254c:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <main+0xb08>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
	  if(sec_flag == 1){
 8002552:	f7ff baf4 	b.w	8001b3e <main+0xce>
 8002556:	bf00      	nop
 8002558:	42adf50a 	.word	0x42adf50a
 800255c:	42ba41fd 	.word	0x42ba41fd
 8002560:	42a5f268 	.word	0x42a5f268
 8002564:	42b283e7 	.word	0x42b283e7
 8002568:	42d4e9e9 	.word	0x42d4e9e9
 800256c:	42e42b9a 	.word	0x42e42b9a
 8002570:	42f10251 	.word	0x42f10251
 8002574:	0800dc50 	.word	0x0800dc50
 8002578:	20000c10 	.word	0x20000c10
 800257c:	1eb851ec 	.word	0x1eb851ec
 8002580:	4058c385 	.word	0x4058c385
 8002584:	4189374c 	.word	0x4189374c
 8002588:	c0036560 	.word	0xc0036560
 800258c:	c083126f 	.word	0xc083126f
 8002590:	404581ca 	.word	0x404581ca
 8002594:	a29c779a 	.word	0xa29c779a
 8002598:	4002b923 	.word	0x4002b923
 800259c:	d6388659 	.word	0xd6388659
 80025a0:	4043bdc5 	.word	0x4043bdc5

080025a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b096      	sub	sp, #88	@ 0x58
 80025a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	2244      	movs	r2, #68	@ 0x44
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f009 fd64 	bl	800c080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b8:	463b      	mov	r3, r7
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025ca:	f003 f9ad 	bl	8005928 <HAL_PWREx_ControlVoltageScaling>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025d4:	f000 f9c4 	bl	8002960 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025d8:	2310      	movs	r3, #16
 80025da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025dc:	2301      	movs	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80025e4:	2360      	movs	r3, #96	@ 0x60
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e8:	2302      	movs	r3, #2
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80025ec:	2301      	movs	r3, #1
 80025ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80025f4:	2328      	movs	r3, #40	@ 0x28
 80025f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80025f8:	2307      	movs	r3, #7
 80025fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025fc:	2302      	movs	r3, #2
 80025fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002600:	2302      	movs	r3, #2
 8002602:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4618      	mov	r0, r3
 800260a:	f003 f9f3 	bl	80059f4 <HAL_RCC_OscConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002614:	f000 f9a4 	bl	8002960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002618:	230f      	movs	r3, #15
 800261a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261c:	2303      	movs	r3, #3
 800261e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800262c:	463b      	mov	r3, r7
 800262e:	2104      	movs	r1, #4
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fdf3 	bl	800621c <HAL_RCC_ClockConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800263c:	f000 f990 	bl	8002960 <Error_Handler>
  }
}
 8002640:	bf00      	nop
 8002642:	3758      	adds	r7, #88	@ 0x58
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <MX_I2C1_Init+0x74>)
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <MX_I2C1_Init+0x78>)
 8002650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002654:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <MX_I2C1_Init+0x7c>)
 8002656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002658:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <MX_I2C1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800265e:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002660:	2201      	movs	r2, #1
 8002662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <MX_I2C1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002682:	480e      	ldr	r0, [pc, #56]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002684:	f000 fe1c 	bl	80032c0 <HAL_I2C_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800268e:	f000 f967 	bl	8002960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002692:	2100      	movs	r1, #0
 8002694:	4809      	ldr	r0, [pc, #36]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002696:	f001 fb63 	bl	8003d60 <HAL_I2CEx_ConfigAnalogFilter>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026a0:	f000 f95e 	bl	8002960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	4805      	ldr	r0, [pc, #20]	@ (80026bc <MX_I2C1_Init+0x74>)
 80026a8:	f001 fba5 	bl	8003df6 <HAL_I2CEx_ConfigDigitalFilter>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026b2:	f000 f955 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000b0c 	.word	0x20000b0c
 80026c0:	40005400 	.word	0x40005400
 80026c4:	10909cec 	.word	0x10909cec

080026c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <MX_SPI1_Init+0x74>)
 80026ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <MX_SPI1_Init+0x78>)
 80026d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_SPI1_Init+0x74>)
 80026d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <MX_SPI1_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <MX_SPI1_Init+0x74>)
 80026e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80026e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <MX_SPI1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <MX_SPI1_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_SPI1_Init+0x74>)
 80026f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_SPI1_Init+0x74>)
 80026fe:	2228      	movs	r2, #40	@ 0x28
 8002700:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <MX_SPI1_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <MX_SPI1_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <MX_SPI1_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002714:	4b09      	ldr	r3, [pc, #36]	@ (800273c <MX_SPI1_Init+0x74>)
 8002716:	2207      	movs	r2, #7
 8002718:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800271a:	4b08      	ldr	r3, [pc, #32]	@ (800273c <MX_SPI1_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <MX_SPI1_Init+0x74>)
 8002722:	2208      	movs	r2, #8
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_SPI1_Init+0x74>)
 8002728:	f004 fa4c 	bl	8006bc4 <HAL_SPI_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002732:	f000 f915 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000b60 	.word	0x20000b60
 8002740:	40013000 	.word	0x40013000

08002744 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002754:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 8002756:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <MX_TIM7_Init+0x70>)
 8002758:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 800275c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002760:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002762:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 800276a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800276e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002770:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 8002778:	f004 fda2 	bl	80072c0 <HAL_TIM_Base_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002782:	f000 f8ed 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 8002794:	f004 ffe0 	bl	8007758 <HAL_TIMEx_MasterConfigSynchronization>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800279e:	f000 f8df 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80027a2:	4803      	ldr	r0, [pc, #12]	@ (80027b0 <MX_TIM7_Init+0x6c>)
 80027a4:	f004 fde4 	bl	8007370 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000bc4 	.word	0x20000bc4
 80027b4:	40001400 	.word	0x40001400

080027b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <MX_GPIO_Init+0xb8>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <MX_GPIO_Init+0xb8>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027da:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <MX_GPIO_Init+0xb8>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <MX_GPIO_Init+0xb8>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <MX_GPIO_Init+0xb8>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <MX_GPIO_Init+0xb8>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CH_ADC_Pin|CS_DAC_Pin, GPIO_PIN_SET);
 80027fe:	2201      	movs	r2, #1
 8002800:	2111      	movs	r1, #17
 8002802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002806:	f000 fd29 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PDEN_Pin|MUX_SEL1_Pin|RSTSEL_Pin|LED_Pin
 800280a:	2200      	movs	r2, #0
 800280c:	f248 7102 	movw	r1, #34562	@ 0x8702
 8002810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002814:	f000 fd22 	bl	800325c <HAL_GPIO_WritePin>
                          |EN_4_2VDC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_SEL_GPIO_Port, CH_SEL_Pin, GPIO_PIN_SET);
 8002818:	2201      	movs	r2, #1
 800281a:	2101      	movs	r1, #1
 800281c:	4815      	ldr	r0, [pc, #84]	@ (8002874 <MX_GPIO_Init+0xbc>)
 800281e:	f000 fd1d 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SEL2_Pin|EN_REF_Pin, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	2112      	movs	r1, #18
 8002826:	4813      	ldr	r0, [pc, #76]	@ (8002874 <MX_GPIO_Init+0xbc>)
 8002828:	f000 fd18 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH_ADC_Pin PDEN_Pin CS_DAC_Pin MUX_SEL1_Pin
                           RSTSEL_Pin LED_Pin EN_4_2VDC_Pin */
  GPIO_InitStruct.Pin = CH_ADC_Pin|PDEN_Pin|CS_DAC_Pin|MUX_SEL1_Pin
 800282c:	f248 7313 	movw	r3, #34579	@ 0x8713
 8002830:	60fb      	str	r3, [r7, #12]
                          |RSTSEL_Pin|LED_Pin|EN_4_2VDC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002848:	f000 fb9e 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH_SEL_Pin MUX_SEL2_Pin EN_REF_Pin */
  GPIO_InitStruct.Pin = CH_SEL_Pin|MUX_SEL2_Pin|EN_REF_Pin;
 800284c:	2313      	movs	r3, #19
 800284e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285c:	f107 030c 	add.w	r3, r7, #12
 8002860:	4619      	mov	r1, r3
 8002862:	4804      	ldr	r0, [pc, #16]	@ (8002874 <MX_GPIO_Init+0xbc>)
 8002864:	f000 fb90 	bl	8002f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	48000400 	.word	0x48000400

08002878 <HAL_TIM_PeriodElapsedCallback>:
	if(hspi == &hspi1){
		SPI_tx_flag = 1;
	}
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a06      	ldr	r2, [pc, #24]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d102      	bne.n	800288e <HAL_TIM_PeriodElapsedCallback+0x16>
		sec_flag = 1;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
	}
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000bc4 	.word	0x20000bc4
 80028a0:	20000c10 	.word	0x20000c10

080028a4 <USB_data>:

float USB_data(float num){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	@ 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float val = num;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24

	while(USB_buffer[0] == 82);
 80028b2:	bf00      	nop
 80028b4:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <USB_data+0xb4>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b52      	cmp	r3, #82	@ 0x52
 80028ba:	d0fb      	beq.n	80028b4 <USB_data+0x10>
	if(USB_buffer[0] == 13){
 80028bc:	4b26      	ldr	r3, [pc, #152]	@ (8002958 <USB_data+0xb4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b0d      	cmp	r3, #13
 80028c2:	d11f      	bne.n	8002904 <USB_data+0x60>
	  uint8_t buf[10];
	  uint8_t len_buf = float_to_ASCII(num, buf);
 80028c4:	f107 0318 	add.w	r3, r7, #24
 80028c8:	4618      	mov	r0, r3
 80028ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80028ce:	f7fe f983 	bl	8000bd8 <float_to_ASCII>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  CDC_Transmit_FS(buf, len_buf);
 80028d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80028dc:	b29a      	uxth	r2, r3
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f008 fecd 	bl	800b684 <CDC_Transmit_FS>
	  memset(USB_buffer,'0',3000);
 80028ea:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028ee:	2130      	movs	r1, #48	@ 0x30
 80028f0:	4819      	ldr	r0, [pc, #100]	@ (8002958 <USB_data+0xb4>)
 80028f2:	f009 fbc5 	bl	800c080 <memset>
	  USB_buffer[0] = 82;
 80028f6:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <USB_data+0xb4>)
 80028f8:	2252      	movs	r2, #82	@ 0x52
 80028fa:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f000 fa0d 	bl	8002d1c <HAL_Delay>
 8002902:	e019      	b.n	8002938 <USB_data+0x94>
	}
	else{
	  val = USB_get_num();
 8002904:	f7fe fc02 	bl	800110c <USB_get_num>
 8002908:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	  uint8_t buf[10];
	  uint8_t len_buf = float_to_ASCII(val, buf);
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	4618      	mov	r0, r3
 8002912:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002916:	f7fe f95f 	bl	8000bd8 <float_to_ASCII>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  CDC_Transmit_FS(buf, len_buf);
 8002920:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002924:	b29a      	uxth	r2, r3
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f008 fea9 	bl	800b684 <CDC_Transmit_FS>
	  HAL_Delay(10);
 8002932:	200a      	movs	r0, #10
 8002934:	f000 f9f2 	bl	8002d1c <HAL_Delay>
	}
	CDC_Transmit_FS((uint8_t*)"\n", 1);
 8002938:	2101      	movs	r1, #1
 800293a:	4808      	ldr	r0, [pc, #32]	@ (800295c <USB_data+0xb8>)
 800293c:	f008 fea2 	bl	800b684 <CDC_Transmit_FS>
	HAL_Delay(10);
 8002940:	200a      	movs	r0, #10
 8002942:	f000 f9eb 	bl	8002d1c <HAL_Delay>

	return val;
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	ee07 3a90 	vmov	s15, r3
}
 800294c:	eeb0 0a67 	vmov.f32	s0, s15
 8002950:	3728      	adds	r7, #40	@ 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000c14 	.word	0x20000c14
 800295c:	0800daa4 	.word	0x0800daa4

08002960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002964:	b672      	cpsid	i
}
 8002966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <Error_Handler+0x8>

0800296c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <HAL_MspInit+0x44>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <HAL_MspInit+0x44>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6613      	str	r3, [r2, #96]	@ 0x60
 800297e:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <HAL_MspInit+0x44>)
 8002980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_MspInit+0x44>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <HAL_MspInit+0x44>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	6593      	str	r3, [r2, #88]	@ 0x58
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_MspInit+0x44>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b09e      	sub	sp, #120	@ 0x78
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2254      	movs	r2, #84	@ 0x54
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f009 fb53 	bl	800c080 <memset>
  if(hi2c->Instance==I2C1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_I2C_MspInit+0xa4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d135      	bne.n	8002a50 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029e4:	2340      	movs	r3, #64	@ 0x40
 80029e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fdff 	bl	80065f4 <HAL_RCCEx_PeriphCLKConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80029fc:	f7ff ffb0 	bl	8002960 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_I2C_MspInit+0xa8>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	4a15      	ldr	r2, [pc, #84]	@ (8002a5c <HAL_I2C_MspInit+0xa8>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <HAL_I2C_MspInit+0xa8>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a18:	23c0      	movs	r3, #192	@ 0xc0
 8002a1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a30:	4619      	mov	r1, r3
 8002a32:	480b      	ldr	r0, [pc, #44]	@ (8002a60 <HAL_I2C_MspInit+0xac>)
 8002a34:	f000 faa8 	bl	8002f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <HAL_I2C_MspInit+0xa8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <HAL_I2C_MspInit+0xa8>)
 8002a3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_I2C_MspInit+0xa8>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3778      	adds	r7, #120	@ 0x78
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40005400 	.word	0x40005400
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	48000400 	.word	0x48000400

08002a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_SPI_MspInit+0x7c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d128      	bne.n	8002ad8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a86:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <HAL_SPI_MspInit+0x80>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ae4 <HAL_SPI_MspInit+0x80>)
 8002a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a92:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <HAL_SPI_MspInit+0x80>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_SPI_MspInit+0x80>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <HAL_SPI_MspInit+0x80>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_SPI_MspInit+0x80>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ab6:	23e0      	movs	r3, #224	@ 0xe0
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ad4:	f000 fa58 	bl	8002f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	@ 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40013000 	.word	0x40013000
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <HAL_TIM_Base_MspInit+0x44>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d113      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_TIM_Base_MspInit+0x48>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <HAL_TIM_Base_MspInit+0x48>)
 8002b00:	f043 0320 	orr.w	r3, r3, #32
 8002b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_TIM_Base_MspInit+0x48>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2037      	movs	r0, #55	@ 0x37
 8002b18:	f000 f9ff 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b1c:	2037      	movs	r0, #55	@ 0x37
 8002b1e:	f000 fa18 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40001400 	.word	0x40001400
 8002b30:	40021000 	.word	0x40021000

08002b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <NMI_Handler+0x4>

08002b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8a:	f000 f8a7 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <TIM7_IRQHandler+0x10>)
 8002b9a:	f004 fc3d 	bl	8007418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000bc4 	.word	0x20000bc4

08002ba8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002bac:	4802      	ldr	r0, [pc, #8]	@ (8002bb8 <USB_IRQHandler+0x10>)
 8002bae:	f001 fa8d 	bl	80040cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200024b0 	.word	0x200024b0

08002bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <SystemInit+0x20>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <SystemInit+0x20>)
 8002bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be4:	f7ff ffea 	bl	8002bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be8:	480c      	ldr	r0, [pc, #48]	@ (8002c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bea:	490d      	ldr	r1, [pc, #52]	@ (8002c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <LoopForever+0xe>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c00:	4c0a      	ldr	r4, [pc, #40]	@ (8002c2c <LoopForever+0x16>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f009 fa45 	bl	800c09c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c12:	f7fe ff2d 	bl	8001a70 <main>

08002c16 <LoopForever>:

LoopForever:
    b LoopForever
 8002c16:	e7fe      	b.n	8002c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	20000af0 	.word	0x20000af0
  ldr r2, =_sidata
 8002c24:	0800dd60 	.word	0x0800dd60
  ldr r2, =_sbss
 8002c28:	20000af0 	.word	0x20000af0
  ldr r4, =_ebss
 8002c2c:	20002ae8 	.word	0x20002ae8

08002c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC1_IRQHandler>

08002c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f961 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c42:	200f      	movs	r0, #15
 8002c44:	f000 f80e 	bl	8002c64 <HAL_InitTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	e001      	b.n	8002c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c54:	f7ff fe8a 	bl	800296c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c58:	79fb      	ldrb	r3, [r7, #7]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c70:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <HAL_InitTick+0x6c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c78:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <HAL_InitTick+0x70>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <HAL_InitTick+0x6c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f96d 	bl	8002f6e <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d809      	bhi.n	8002cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f000 f937 	bl	8002f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <HAL_InitTick+0x74>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e007      	b.n	8002cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e004      	b.n	8002cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e001      	b.n	8002cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000098c 	.word	0x2000098c
 8002cd4:	20000984 	.word	0x20000984
 8002cd8:	20000988 	.word	0x20000988

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2000098c 	.word	0x2000098c
 8002d00:	200017cc 	.word	0x200017cc

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	200017cc 	.word	0x200017cc

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000098c 	.word	0x2000098c

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	@ (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	@ (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed0:	d301      	bcc.n	8002ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00f      	b.n	8002ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <SysTick_Config+0x40>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ede:	210f      	movs	r1, #15
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	f7ff ff8e 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <SysTick_Config+0x40>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <SysTick_Config+0x40>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff29 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff3e 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff8e 	bl	8002e58 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff31 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa2 	bl	8002ec0 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e148      	b.n	800322a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 813a 	beq.w	8003224 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d005      	beq.n	8002fc8 <HAL_GPIO_Init+0x40>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d130      	bne.n	800302a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffe:	2201      	movs	r2, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0201 	and.w	r2, r3, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d017      	beq.n	8003066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d123      	bne.n	80030ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	6939      	ldr	r1, [r7, #16]
 80030b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8094 	beq.w	8003224 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fc:	4b52      	ldr	r3, [pc, #328]	@ (8003248 <HAL_GPIO_Init+0x2c0>)
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	4a51      	ldr	r2, [pc, #324]	@ (8003248 <HAL_GPIO_Init+0x2c0>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6613      	str	r3, [r2, #96]	@ 0x60
 8003108:	4b4f      	ldr	r3, [pc, #316]	@ (8003248 <HAL_GPIO_Init+0x2c0>)
 800310a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003114:	4a4d      	ldr	r2, [pc, #308]	@ (800324c <HAL_GPIO_Init+0x2c4>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800313e:	d00d      	beq.n	800315c <HAL_GPIO_Init+0x1d4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a43      	ldr	r2, [pc, #268]	@ (8003250 <HAL_GPIO_Init+0x2c8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <HAL_GPIO_Init+0x1d0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a42      	ldr	r2, [pc, #264]	@ (8003254 <HAL_GPIO_Init+0x2cc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_GPIO_Init+0x1cc>
 8003150:	2302      	movs	r3, #2
 8003152:	e004      	b.n	800315e <HAL_GPIO_Init+0x1d6>
 8003154:	2307      	movs	r3, #7
 8003156:	e002      	b.n	800315e <HAL_GPIO_Init+0x1d6>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_GPIO_Init+0x1d6>
 800315c:	2300      	movs	r3, #0
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	f002 0203 	and.w	r2, r2, #3
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	4093      	lsls	r3, r2
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800316e:	4937      	ldr	r1, [pc, #220]	@ (800324c <HAL_GPIO_Init+0x2c4>)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800317c:	4b36      	ldr	r3, [pc, #216]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ca:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031d0:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f4:	4a18      	ldr	r2, [pc, #96]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031fa:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800321e:	4a0e      	ldr	r2, [pc, #56]	@ (8003258 <HAL_GPIO_Init+0x2d0>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f47f aeaf 	bne.w	8002f98 <HAL_GPIO_Init+0x10>
  }
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	48000400 	.word	0x48000400
 8003254:	48000800 	.word	0x48000800
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003278:	e002      	b.n	8003280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43d9      	mvns	r1, r3
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	400b      	ands	r3, r1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e08d      	b.n	80033ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fb64 	bl	80029b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e006      	b.n	8003348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d108      	bne.n	8003362 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	e007      	b.n	8003372 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	460b      	mov	r3, r1
 8003406:	817b      	strh	r3, [r7, #10]
 8003408:	4613      	mov	r3, r2
 800340a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	f040 80fd 	bne.w	8003614 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_I2C_Master_Transmit+0x30>
 8003424:	2302      	movs	r3, #2
 8003426:	e0f6      	b.n	8003616 <HAL_I2C_Master_Transmit+0x21e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003430:	f7ff fc68 	bl	8002d04 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa0a 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0e1      	b.n	8003616 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2221      	movs	r2, #33	@ 0x21
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2210      	movs	r2, #16
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	893a      	ldrh	r2, [r7, #8]
 8003472:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	2bff      	cmp	r3, #255	@ 0xff
 8003482:	d906      	bls.n	8003492 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	22ff      	movs	r2, #255	@ 0xff
 8003488:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800348a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e007      	b.n	80034a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800349c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d024      	beq.n	80034f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	8979      	ldrh	r1, [r7, #10]
 80034e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003620 <HAL_I2C_Master_Transmit+0x228>)
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fc05 	bl	8003cfc <I2C_TransferConfig>
 80034f2:	e066      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	4b48      	ldr	r3, [pc, #288]	@ (8003620 <HAL_I2C_Master_Transmit+0x228>)
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fbfa 	bl	8003cfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003508:	e05b      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f9fd 	bl	800390e <I2C_WaitOnTXISFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e07b      	b.n	8003616 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d034      	beq.n	80035c2 <HAL_I2C_Master_Transmit+0x1ca>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d130      	bne.n	80035c2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	2200      	movs	r2, #0
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f976 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e04d      	b.n	8003616 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	2bff      	cmp	r3, #255	@ 0xff
 8003582:	d90e      	bls.n	80035a2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	22ff      	movs	r2, #255	@ 0xff
 8003588:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358e:	b2da      	uxtb	r2, r3
 8003590:	8979      	ldrh	r1, [r7, #10]
 8003592:	2300      	movs	r3, #0
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fbae 	bl	8003cfc <I2C_TransferConfig>
 80035a0:	e00f      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	8979      	ldrh	r1, [r7, #10]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fb9d 	bl	8003cfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d19e      	bne.n	800350a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	6a39      	ldr	r1, [r7, #32]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f9e3 	bl	800399c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e01a      	b.n	8003616 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2220      	movs	r2, #32
 80035e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <HAL_I2C_Master_Transmit+0x22c>)
 80035f4:	400b      	ands	r3, r1
 80035f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	80002000 	.word	0x80002000
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	460b      	mov	r3, r1
 8003636:	817b      	strh	r3, [r7, #10]
 8003638:	4613      	mov	r3, r2
 800363a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	f040 80db 	bne.w	8003800 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_I2C_Master_Receive+0x30>
 8003654:	2302      	movs	r3, #2
 8003656:	e0d4      	b.n	8003802 <HAL_I2C_Master_Receive+0x1da>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003660:	f7ff fb50 	bl	8002d04 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2319      	movs	r3, #25
 800366c:	2201      	movs	r2, #1
 800366e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f8f2 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0bf      	b.n	8003802 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2222      	movs	r2, #34	@ 0x22
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2210      	movs	r2, #16
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	893a      	ldrh	r2, [r7, #8]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2bff      	cmp	r3, #255	@ 0xff
 80036b2:	d90e      	bls.n	80036d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	8979      	ldrh	r1, [r7, #10]
 80036c2:	4b52      	ldr	r3, [pc, #328]	@ (800380c <HAL_I2C_Master_Receive+0x1e4>)
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb16 	bl	8003cfc <I2C_TransferConfig>
 80036d0:	e06d      	b.n	80037ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	4b49      	ldr	r3, [pc, #292]	@ (800380c <HAL_I2C_Master_Receive+0x1e4>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fb05 	bl	8003cfc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80036f2:	e05c      	b.n	80037ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	6a39      	ldr	r1, [r7, #32]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f993 	bl	8003a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e07c      	b.n	8003802 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d034      	beq.n	80037ae <HAL_I2C_Master_Receive+0x186>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d130      	bne.n	80037ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2200      	movs	r2, #0
 8003754:	2180      	movs	r1, #128	@ 0x80
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f880 	bl	800385c <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e04d      	b.n	8003802 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2bff      	cmp	r3, #255	@ 0xff
 800376e:	d90e      	bls.n	800378e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	22ff      	movs	r2, #255	@ 0xff
 8003774:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	b2da      	uxtb	r2, r3
 800377c:	8979      	ldrh	r1, [r7, #10]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fab8 	bl	8003cfc <I2C_TransferConfig>
 800378c:	e00f      	b.n	80037ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	b2da      	uxtb	r2, r3
 800379e:	8979      	ldrh	r1, [r7, #10]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 faa7 	bl	8003cfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d19d      	bne.n	80036f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	6a39      	ldr	r1, [r7, #32]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f8ed 	bl	800399c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e01a      	b.n	8003802 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2220      	movs	r2, #32
 80037d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <HAL_I2C_Master_Receive+0x1e8>)
 80037e0:	400b      	ands	r3, r1
 80037e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	80002400 	.word	0x80002400
 8003810:	fe00e800 	.word	0xfe00e800

08003814 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d103      	bne.n	8003832 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d007      	beq.n	8003850 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	619a      	str	r2, [r3, #24]
  }
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800386c:	e03b      	b.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f962 	bl	8003b3c <I2C_IsErrorOccurred>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e041      	b.n	8003906 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d02d      	beq.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7ff fa3b 	bl	8002d04 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d122      	bne.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d113      	bne.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00f      	b.n	8003906 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	429a      	cmp	r2, r3
 8003902:	d0b4      	beq.n	800386e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800391a:	e033      	b.n	8003984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f90b 	bl	8003b3c <I2C_IsErrorOccurred>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e031      	b.n	8003994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d025      	beq.n	8003984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7ff f9e4 	bl	8002d04 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11a      	bne.n	8003984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d013      	beq.n	8003984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e007      	b.n	8003994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d1c4      	bne.n	800391c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a8:	e02f      	b.n	8003a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f8c4 	bl	8003b3c <I2C_IsErrorOccurred>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e02d      	b.n	8003a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7ff f9a1 	bl	8002d04 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11a      	bne.n	8003a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d013      	beq.n	8003a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d1c8      	bne.n	80039aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a34:	e071      	b.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f87e 	bl	8003b3c <I2C_IsErrorOccurred>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d13b      	bne.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d138      	bne.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d105      	bne.n	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d121      	bne.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2204      	movs	r2, #4
 8003a92:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	75fb      	strb	r3, [r7, #23]
 8003ac8:	e002      	b.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003ad0:	f7ff f918 	bl	8002d04 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00f      	beq.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d002      	beq.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d083      	beq.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fe00e800 	.word	0xfe00e800

08003b3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	@ 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d068      	beq.n	8003c3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b70:	e049      	b.n	8003c06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d045      	beq.n	8003c06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7ff f8c3 	bl	8002d04 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <I2C_IsErrorOccurred+0x54>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d13a      	bne.n	8003c06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ba2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb2:	d121      	bne.n	8003bf8 <I2C_IsErrorOccurred+0xbc>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bba:	d01d      	beq.n	8003bf8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d01a      	beq.n	8003bf8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bd2:	f7ff f897 	bl	8002d04 <HAL_GetTick>
 8003bd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd8:	e00e      	b.n	8003bf8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bda:	f7ff f893 	bl	8002d04 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b19      	cmp	r3, #25
 8003be6:	d907      	bls.n	8003bf8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f043 0320 	orr.w	r3, r3, #32
 8003bee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bf6:	e006      	b.n	8003c06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d1e9      	bne.n	8003bda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d003      	beq.n	8003c1c <I2C_IsErrorOccurred+0xe0>
 8003c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0aa      	beq.n	8003b72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01c      	beq.n	8003cea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fdaf 	bl	8003814 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <I2C_IsErrorOccurred+0x1bc>)
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3728      	adds	r7, #40	@ 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	fe00e800 	.word	0xfe00e800

08003cfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d14:	7a7b      	ldrb	r3, [r7, #9]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	0d5b      	lsrs	r3, r3, #21
 8003d36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <I2C_TransferConfig+0x60>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	ea02 0103 	and.w	r1, r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	03ff63ff 	.word	0x03ff63ff

08003d60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d138      	bne.n	8003de8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e032      	b.n	8003dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	@ 0x24
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003db2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d139      	bne.n	8003e80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e033      	b.n	8003e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2224      	movs	r2, #36	@ 0x24
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0ef      	b.n	8004080 <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f007 fd3f 	bl	800b938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f003 fcec 	bl	80078aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003edc:	f003 fcc0 	bl	8007860 <USB_CoreInit>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0c6      	b.n	8004080 <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 fcf1 	bl	80078e0 <USB_SetCurrentMode>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b7      	b.n	8004080 <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e03e      	b.n	8003f94 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	3311      	adds	r3, #17
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	3310      	adds	r3, #16
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3313      	adds	r3, #19
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	3320      	adds	r3, #32
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3324      	adds	r3, #36	@ 0x24
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	3301      	adds	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	791b      	ldrb	r3, [r3, #4]
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3bb      	bcc.n	8003f16 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e044      	b.n	800402e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fba:	7bfa      	ldrb	r2, [r7, #15]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	440b      	add	r3, r1
 8004020:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	3301      	adds	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	791b      	ldrb	r3, [r3, #4]
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	429a      	cmp	r2, r3
 8004036:	d3b5      	bcc.n	8003fa4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004042:	f003 fc5a 	bl	80078fa <USB_DevInit>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e013      	b.n	8004080 <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7adb      	ldrb	r3, [r3, #11]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f001 fc21 	bl	80058b6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f005 fa06 	bl	800948a <USB_DevDisconnect>

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_PCD_Start+0x16>
 800409a:	2302      	movs	r3, #2
 800409c:	e012      	b.n	80040c4 <HAL_PCD_Start+0x3c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fbe6 	bl	800787c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f005 f9d1 	bl	800945c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 f9eb 	bl	80094b4 <USB_ReadInterrupts>
 80040de:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fb14 	bl	8004718 <PCD_EP_ISR_Handler>

    return;
 80040f0:	e110      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410e:	b292      	uxth	r2, r2
 8004110:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f007 fcb0 	bl	800ba7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800411a:	2100      	movs	r1, #0
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8fc 	bl	800431a <HAL_PCD_SetAddress>

    return;
 8004122:	e0f7      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004140:	b292      	uxth	r2, r2
 8004142:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004146:	e0e5      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004164:	b292      	uxth	r2, r2
 8004166:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800416a:	e0d3      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d034      	beq.n	80041e0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0204 	bic.w	r2, r2, #4
 8004188:	b292      	uxth	r2, r2
 800418a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0208 	bic.w	r2, r2, #8
 80041a0:	b292      	uxth	r2, r2
 80041a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041b8:	2100      	movs	r1, #0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f007 ff0c 	bl	800bfd8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f007 fc93 	bl	800baec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041d8:	b292      	uxth	r2, r2
 80041da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041de:	e099      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d027      	beq.n	800423a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0208 	orr.w	r2, r2, #8
 80041fc:	b292      	uxth	r2, r2
 80041fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004214:	b292      	uxth	r2, r2
 8004216:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0204 	orr.w	r2, r2, #4
 800422c:	b292      	uxth	r2, r2
 800422e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f007 fc40 	bl	800bab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004238:	e06c      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d040      	beq.n	80042c6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004256:	b292      	uxth	r2, r2
 8004258:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12b      	bne.n	80042be <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0204 	orr.w	r2, r2, #4
 8004278:	b292      	uxth	r2, r2
 800427a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	b292      	uxth	r2, r2
 8004292:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80042b4:	2101      	movs	r1, #1
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f007 fe8e 	bl	800bfd8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80042bc:	e02a      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f007 fbfa 	bl	800bab8 <HAL_PCD_SuspendCallback>
    return;
 80042c4:	e026      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042e2:	b292      	uxth	r2, r2
 80042e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f007 fbb8 	bl	800ba5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042ee:	e011      	b.n	8004314 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800430c:	b292      	uxth	r2, r2
 800430e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004312:	bf00      	nop
  }
}
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_PCD_SetAddress+0x1a>
 8004330:	2302      	movs	r3, #2
 8004332:	e012      	b.n	800435a <HAL_PCD_SetAddress+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f005 f872 	bl	8009434 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	461a      	mov	r2, r3
 8004370:	4603      	mov	r3, r0
 8004372:	70fb      	strb	r3, [r7, #3]
 8004374:	460b      	mov	r3, r1
 8004376:	803b      	strh	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da0e      	bge.n	80043a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 0207 	and.w	r2, r3, #7
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	3310      	adds	r3, #16
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	705a      	strb	r2, [r3, #1]
 80043a4:	e00e      	b.n	80043c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 0207 	and.w	r2, r3, #7
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80043d0:	883b      	ldrh	r3, [r7, #0]
 80043d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	78ba      	ldrb	r2, [r7, #2]
 80043de:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043e0:	78bb      	ldrb	r3, [r7, #2]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d102      	bne.n	80043ec <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_PCD_EP_Open+0x98>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e00e      	b.n	8004418 <HAL_PCD_EP_Open+0xb6>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	4618      	mov	r0, r3
 800440a:	f003 fa95 	bl	8007938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004416:	7afb      	ldrb	r3, [r7, #11]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800442c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004430:	2b00      	cmp	r3, #0
 8004432:	da0e      	bge.n	8004452 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 0207 	and.w	r2, r3, #7
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	3310      	adds	r3, #16
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4413      	add	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	705a      	strb	r2, [r3, #1]
 8004450:	e00e      	b.n	8004470 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 0207 	and.w	r2, r3, #7
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_PCD_EP_Close+0x6a>
 8004486:	2302      	movs	r3, #2
 8004488:	e00e      	b.n	80044a8 <HAL_PCD_EP_Close+0x88>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	4618      	mov	r0, r3
 800449a:	f003 ff35 	bl	8008308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	460b      	mov	r3, r1
 80044be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	7afb      	ldrb	r3, [r7, #11]
 80044c2:	f003 0207 	and.w	r2, r3, #7
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f0:	7afb      	ldrb	r3, [r7, #11]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	4618      	mov	r0, r3
 8004504:	f004 f8ed 	bl	80086e2 <USB_EPStartXfer>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 0207 	and.w	r2, r3, #7
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004534:	681b      	ldr	r3, [r3, #0]
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	460b      	mov	r3, r1
 8004550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	f003 0207 	and.w	r2, r3, #7
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3310      	adds	r3, #16
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2201      	movs	r2, #1
 800458c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	b2da      	uxtb	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f004 f89e 	bl	80086e2 <USB_EPStartXfer>

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	7912      	ldrb	r2, [r2, #4]
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e04c      	b.n	8004668 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da0e      	bge.n	80045f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	f003 0207 	and.w	r2, r3, #7
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	3310      	adds	r3, #16
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	705a      	strb	r2, [r3, #1]
 80045f2:	e00c      	b.n	800460e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	b2da      	uxtb	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_PCD_EP_SetStall+0x7e>
 800462a:	2302      	movs	r3, #2
 800462c:	e01c      	b.n	8004668 <HAL_PCD_EP_SetStall+0xb8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	4618      	mov	r0, r3
 800463e:	f004 fdff 	bl	8009240 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	2b00      	cmp	r3, #0
 800464a:	d108      	bne.n	800465e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f004 ff3b 	bl	80094d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	7912      	ldrb	r2, [r2, #4]
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e040      	b.n	8004710 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800468e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004692:	2b00      	cmp	r3, #0
 8004694:	da0e      	bge.n	80046b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	f003 0207 	and.w	r2, r3, #7
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	3310      	adds	r3, #16
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	705a      	strb	r2, [r3, #1]
 80046b2:	e00e      	b.n	80046d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	f003 0207 	and.w	r2, r3, #7
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_PCD_EP_ClrStall+0x82>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e00e      	b.n	8004710 <HAL_PCD_EP_ClrStall+0xa0>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	4618      	mov	r0, r3
 8004702:	f004 fdee 	bl	80092e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b092      	sub	sp, #72	@ 0x48
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004720:	e333      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800472a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800472c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004738:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 8108 	bne.w	8004952 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004742:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d14c      	bne.n	80047e6 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475c:	813b      	strh	r3, [r7, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	893b      	ldrh	r3, [r7, #8]
 8004764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3310      	adds	r3, #16
 8004774:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	4413      	add	r3, r2
 8004790:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800479a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800479c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800479e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	441a      	add	r2, r3
 80047a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047ac:	2100      	movs	r1, #0
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f007 f93b 	bl	800ba2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	7b5b      	ldrb	r3, [r3, #13]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 82e5 	beq.w	8004d8a <PCD_EP_ISR_Handler+0x672>
 80047c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 82e0 	bne.w	8004d8a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7b5b      	ldrb	r3, [r3, #13]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	735a      	strb	r2, [r3, #13]
 80047e4:	e2d1      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047ec:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d032      	beq.n	8004866 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4413      	add	r3, r2
 800481a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004826:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004834:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004838:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800483a:	b29b      	uxth	r3, r3
 800483c:	f004 fe98 	bl	8009570 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29a      	uxth	r2, r3
 8004848:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800484c:	4013      	ands	r3, r2
 800484e:	817b      	strh	r3, [r7, #10]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	897a      	ldrh	r2, [r7, #10]
 8004856:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800485a:	b292      	uxth	r2, r2
 800485c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f007 f8b6 	bl	800b9d0 <HAL_PCD_SetupStageCallback>
 8004864:	e291      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004866:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800486a:	2b00      	cmp	r3, #0
 800486c:	f280 828d 	bge.w	8004d8a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800487c:	4013      	ands	r3, r2
 800487e:	81fb      	strh	r3, [r7, #14]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	89fa      	ldrh	r2, [r7, #14]
 8004886:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800488a:	b292      	uxth	r2, r2
 800488c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004896:	b29b      	uxth	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d019      	beq.n	80048f2 <PCD_EP_ISR_Handler+0x1da>
 80048be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048cc:	6959      	ldr	r1, [r3, #20]
 80048ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f004 fe4a 	bl	8009570 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	441a      	add	r2, r3
 80048e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048ea:	2100      	movs	r1, #0
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f007 f881 	bl	800b9f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80048fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80048fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 8242 	bne.w	8004d8a <PCD_EP_ISR_Handler+0x672>
 8004906:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004908:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800490c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004910:	f000 823b 	beq.w	8004d8a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004924:	81bb      	strh	r3, [r7, #12]
 8004926:	89bb      	ldrh	r3, [r7, #12]
 8004928:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800492c:	81bb      	strh	r3, [r7, #12]
 800492e:	89bb      	ldrh	r3, [r7, #12]
 8004930:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004934:	81bb      	strh	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	89bb      	ldrh	r3, [r7, #12]
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
 8004950:	e21b      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004964:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004968:	2b00      	cmp	r3, #0
 800496a:	f280 80f1 	bge.w	8004b50 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29a      	uxth	r2, r3
 8004980:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004984:	4013      	ands	r3, r2
 8004986:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004998:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800499c:	b292      	uxth	r2, r2
 800499e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80049a0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80049b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b8:	7b1b      	ldrb	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d123      	bne.n	8004a06 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80049e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 808b 	beq.w	8004b06 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f6:	6959      	ldr	r1, [r3, #20]
 80049f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049fa:	88da      	ldrh	r2, [r3, #6]
 80049fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a00:	f004 fdb6 	bl	8009570 <USB_ReadPMA>
 8004a04:	e07f      	b.n	8004b06 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a08:	78db      	ldrb	r3, [r3, #3]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d109      	bne.n	8004a22 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004a0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a10:	461a      	mov	r2, r3
 8004a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f9c6 	bl	8004da6 <HAL_PCD_EP_DB_Receive>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a20:	e071      	b.n	8004b06 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d022      	beq.n	8004ac2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004aa4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02c      	beq.n	8004b06 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab2:	6959      	ldr	r1, [r3, #20]
 8004ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab6:	891a      	ldrh	r2, [r3, #8]
 8004ab8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004abc:	f004 fd58 	bl	8009570 <USB_ReadPMA>
 8004ac0:	e021      	b.n	8004b06 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	4413      	add	r3, r2
 8004adc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004aea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af8:	6959      	ldr	r1, [r3, #20]
 8004afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004afc:	895a      	ldrh	r2, [r3, #10]
 8004afe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b02:	f004 fd35 	bl	8009570 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b0e:	441a      	add	r2, r3
 8004b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b1c:	441a      	add	r2, r3
 8004b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b20:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <PCD_EP_ISR_Handler+0x41e>
 8004b2a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d206      	bcs.n	8004b44 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f006 ff59 	bl	800b9f4 <HAL_PCD_DataOutStageCallback>
 8004b42:	e005      	b.n	8004b50 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 fdc9 	bl	80086e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8117 	beq.w	8004d8a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004b5c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3310      	adds	r3, #16
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004baa:	78db      	ldrb	r3, [r3, #3]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 80a1 	bne.w	8004cf4 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bba:	7b1b      	ldrb	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8092 	beq.w	8004ce6 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d046      	beq.n	8004c5a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d126      	bne.n	8004c22 <PCD_EP_ISR_Handler+0x50a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	00da      	lsls	r2, r3, #3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	e061      	b.n	8004ce6 <PCD_EP_ISR_Handler+0x5ce>
 8004c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d15d      	bne.n	8004ce6 <PCD_EP_ISR_Handler+0x5ce>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	00da      	lsls	r2, r3, #3
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2200      	movs	r2, #0
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e045      	b.n	8004ce6 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d126      	bne.n	8004cb6 <PCD_EP_ISR_Handler+0x59e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	4413      	add	r3, r2
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	00da      	lsls	r2, r3, #3
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	4413      	add	r3, r2
 8004c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	801a      	strh	r2, [r3, #0]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	e017      	b.n	8004ce6 <PCD_EP_ISR_Handler+0x5ce>
 8004cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d113      	bne.n	8004ce6 <PCD_EP_ISR_Handler+0x5ce>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	4413      	add	r3, r2
 8004cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	00da      	lsls	r2, r3, #3
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	4413      	add	r3, r2
 8004cda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f006 fe9c 	bl	800ba2a <HAL_PCD_DataInStageCallback>
 8004cf2:	e04a      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004cf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d13f      	bne.n	8004d7e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	4413      	add	r3, r2
 8004d18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d22:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d906      	bls.n	8004d3c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8004d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004d34:	1ad2      	subs	r2, r2, r3
 8004d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d38:	619a      	str	r2, [r3, #24]
 8004d3a:	e002      	b.n	8004d42 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d3e:	2200      	movs	r2, #0
 8004d40:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f006 fe6a 	bl	800ba2a <HAL_PCD_DataInStageCallback>
 8004d56:	e018      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004d5e:	441a      	add	r2, r3
 8004d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d62:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004d6a:	441a      	add	r2, r3
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d76:	4618      	mov	r0, r3
 8004d78:	f003 fcb3 	bl	80086e2 <USB_EPStartXfer>
 8004d7c:	e005      	b.n	8004d8a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d80:	461a      	mov	r2, r3
 8004d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f917 	bl	8004fb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f6ff acc3 	blt.w	8004722 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3748      	adds	r7, #72	@ 0x48
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b088      	sub	sp, #32
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	4613      	mov	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d07c      	beq.n	8004eb8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	8b7b      	ldrh	r3, [r7, #26]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d306      	bcc.n	8004dfc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	8b7b      	ldrh	r3, [r7, #26]
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	619a      	str	r2, [r3, #24]
 8004dfa:	e002      	b.n	8004e02 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d123      	bne.n	8004e52 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e24:	833b      	strh	r3, [r7, #24]
 8004e26:	8b3b      	ldrh	r3, [r7, #24]
 8004e28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e2c:	833b      	strh	r3, [r7, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	8b3b      	ldrh	r3, [r7, #24]
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01f      	beq.n	8004e9c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e76:	82fb      	strh	r3, [r7, #22]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	8afb      	ldrh	r3, [r7, #22]
 8004e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e9c:	8b7b      	ldrh	r3, [r7, #26]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8085 	beq.w	8004fae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6959      	ldr	r1, [r3, #20]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	891a      	ldrh	r2, [r3, #8]
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	f004 fb5d 	bl	8009570 <USB_ReadPMA>
 8004eb6:	e07a      	b.n	8004fae <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004edc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	8b7b      	ldrh	r3, [r7, #26]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d306      	bcc.n	8004ef6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	8b7b      	ldrh	r3, [r7, #26]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	619a      	str	r2, [r3, #24]
 8004ef4:	e002      	b.n	8004efc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d123      	bne.n	8004f4c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1e:	83fb      	strh	r3, [r7, #30]
 8004f20:	8bfb      	ldrh	r3, [r7, #30]
 8004f22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f26:	83fb      	strh	r3, [r7, #30]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	441a      	add	r2, r3
 8004f36:	8bfb      	ldrh	r3, [r7, #30]
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11f      	bne.n	8004f96 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f70:	83bb      	strh	r3, [r7, #28]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	8bbb      	ldrh	r3, [r7, #28]
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f96:	8b7b      	ldrh	r3, [r7, #26]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6959      	ldr	r1, [r3, #20]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	895a      	ldrh	r2, [r3, #10]
 8004fa8:	8b7b      	ldrh	r3, [r7, #26]
 8004faa:	f004 fae1 	bl	8009570 <USB_ReadPMA>
    }
  }

  return count;
 8004fae:	8b7b      	ldrh	r3, [r7, #26]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0a6      	sub	sp, #152	@ 0x98
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 81f7 	beq.w	80053c0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	4413      	add	r3, r2
 8004fec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005002:	429a      	cmp	r2, r3
 8005004:	d907      	bls.n	8005016 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	619a      	str	r2, [r3, #24]
 8005014:	e002      	b.n	800501c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2200      	movs	r2, #0
 800501a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 80e1 	bne.w	80051e8 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d126      	bne.n	800507c <HAL_PCD_EP_DB_Transmit+0xc4>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800503c:	b29b      	uxth	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	4413      	add	r3, r2
 8005044:	633b      	str	r3, [r7, #48]	@ 0x30
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	00da      	lsls	r2, r3, #3
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	4413      	add	r3, r2
 8005050:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005060:	b29a      	uxth	r2, r3
 8005062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005064:	801a      	strh	r2, [r3, #0]
 8005066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005074:	b29a      	uxth	r2, r3
 8005076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	e01a      	b.n	80050b2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d116      	bne.n	80050b2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005098:	4413      	add	r3, r2
 800509a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	00da      	lsls	r2, r3, #3
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ae:	2200      	movs	r2, #0
 80050b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d126      	bne.n	800510e <HAL_PCD_EP_DB_Transmit+0x156>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	4413      	add	r3, r2
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	00da      	lsls	r2, r3, #3
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005106:	b29a      	uxth	r2, r3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e017      	b.n	800513e <HAL_PCD_EP_DB_Transmit+0x186>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d113      	bne.n	800513e <HAL_PCD_EP_DB_Transmit+0x186>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511e:	b29b      	uxth	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	4413      	add	r3, r2
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	00da      	lsls	r2, r3, #3
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	4413      	add	r3, r2
 8005132:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	2200      	movs	r2, #0
 800513c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	78db      	ldrb	r3, [r3, #3]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d123      	bne.n	800518e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005160:	837b      	strh	r3, [r7, #26]
 8005162:	8b7b      	ldrh	r3, [r7, #26]
 8005164:	f083 0320 	eor.w	r3, r3, #32
 8005168:	837b      	strh	r3, [r7, #26]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	8b7b      	ldrh	r3, [r7, #26]
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f006 fc48 	bl	800ba2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01f      	beq.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051be:	833b      	strh	r3, [r7, #24]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	8b3b      	ldrh	r3, [r7, #24]
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e31f      	b.n	8005828 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d021      	beq.n	8005236 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800522a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800522e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 82ca 	bne.w	80057d6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800524a:	441a      	add	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005258:	441a      	add	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d309      	bcc.n	800527e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	621a      	str	r2, [r3, #32]
 800527c:	e015      	b.n	80052aa <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d107      	bne.n	8005296 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800528a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005294:	e009      	b.n	80052aa <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d15f      	bne.n	8005372 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c6:	4413      	add	r3, r2
 80052c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	00da      	lsls	r2, r3, #3
 80052d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d2:	4413      	add	r3, r2
 80052d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <HAL_PCD_EP_DB_Transmit+0x34e>
 80052f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e051      	b.n	80053aa <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005308:	2b3e      	cmp	r3, #62	@ 0x3e
 800530a:	d816      	bhi.n	800533a <HAL_PCD_EP_DB_Transmit+0x382>
 800530c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	653b      	str	r3, [r7, #80]	@ 0x50
 8005312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_PCD_EP_DB_Transmit+0x36a>
 800531c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800531e:	3301      	adds	r3, #1
 8005320:	653b      	str	r3, [r7, #80]	@ 0x50
 8005322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29a      	uxth	r2, r3
 8005328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	b29b      	uxth	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	b29a      	uxth	r2, r3
 8005334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e037      	b.n	80053aa <HAL_PCD_EP_DB_Transmit+0x3f2>
 800533a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_PCD_EP_DB_Transmit+0x398>
 800534a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534c:	3b01      	subs	r3, #1
 800534e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29a      	uxth	r2, r3
 8005356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29b      	uxth	r3, r3
 800535e:	4313      	orrs	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536a:	b29a      	uxth	r2, r3
 800536c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e01b      	b.n	80053aa <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d117      	bne.n	80053aa <HAL_PCD_EP_DB_Transmit+0x3f2>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800538e:	4413      	add	r3, r2
 8005390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	00da      	lsls	r2, r3, #3
 8005398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800539a:	4413      	add	r3, r2
 800539c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6959      	ldr	r1, [r3, #20]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	891a      	ldrh	r2, [r3, #8]
 80053b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f004 f897 	bl	80094ec <USB_WritePMA>
 80053be:	e20a      	b.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d307      	bcc.n	8005404 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	619a      	str	r2, [r3, #24]
 8005402:	e002      	b.n	800540a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 80f6 	bne.w	8005600 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d126      	bne.n	800546a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	677b      	str	r3, [r7, #116]	@ 0x74
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005430:	4413      	add	r3, r2
 8005432:	677b      	str	r3, [r7, #116]	@ 0x74
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	00da      	lsls	r2, r3, #3
 800543a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800543c:	4413      	add	r3, r2
 800543e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005442:	673b      	str	r3, [r7, #112]	@ 0x70
 8005444:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800544e:	b29a      	uxth	r2, r3
 8005450:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005462:	b29a      	uxth	r2, r3
 8005464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e01a      	b.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d116      	bne.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005486:	4413      	add	r3, r2
 8005488:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	00da      	lsls	r2, r3, #3
 8005490:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005492:	4413      	add	r3, r2
 8005494:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800549a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800549c:	2200      	movs	r2, #0
 800549e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d12f      	bne.n	8005510 <HAL_PCD_EP_DB_Transmit+0x558>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c8:	4413      	add	r3, r2
 80054ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d8:	4413      	add	r3, r2
 80054da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e01c      	b.n	800554a <HAL_PCD_EP_DB_Transmit+0x592>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d118      	bne.n	800554a <HAL_PCD_EP_DB_Transmit+0x592>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005528:	4413      	add	r3, r2
 800552a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00da      	lsls	r2, r3, #3
 8005534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005538:	4413      	add	r3, r2
 800553a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800553e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005542:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005546:	2200      	movs	r2, #0
 8005548:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d127      	bne.n	80055a2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800556c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005570:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005574:	f083 0320 	eor.w	r3, r3, #32
 8005578:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800559a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	4619      	mov	r1, r3
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f006 fa3e 	bl	800ba2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d121      	bne.n	80055fc <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	441a      	add	r2, r3
 80055e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80055e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e113      	b.n	8005828 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d121      	bne.n	800564e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005624:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005642:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005654:	2b01      	cmp	r3, #1
 8005656:	f040 80be 	bne.w	80057d6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005662:	441a      	add	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005670:	441a      	add	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d309      	bcc.n	8005696 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	621a      	str	r2, [r3, #32]
 8005694:	e015      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800569e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80056a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056ac:	e009      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d15f      	bne.n	8005790 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e4:	4413      	add	r3, r2
 80056e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	00da      	lsls	r2, r3, #3
 80056ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80056f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005702:	b29a      	uxth	r2, r3
 8005704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_PCD_EP_DB_Transmit+0x76c>
 800570e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571c:	b29a      	uxth	r2, r3
 800571e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	e04e      	b.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005726:	2b3e      	cmp	r3, #62	@ 0x3e
 8005728:	d816      	bhi.n	8005758 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800572a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_PCD_EP_DB_Transmit+0x788>
 800573a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800573c:	3301      	adds	r3, #1
 800573e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29a      	uxth	r2, r3
 8005746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005748:	b29b      	uxth	r3, r3
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	b29b      	uxth	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b29a      	uxth	r2, r3
 8005752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	e034      	b.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	663b      	str	r3, [r7, #96]	@ 0x60
 800575e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800576a:	3b01      	subs	r3, #1
 800576c:	663b      	str	r3, [r7, #96]	@ 0x60
 800576e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29a      	uxth	r2, r3
 8005774:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005776:	b29b      	uxth	r3, r3
 8005778:	029b      	lsls	r3, r3, #10
 800577a:	b29b      	uxth	r3, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	b29b      	uxth	r3, r3
 8005780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005788:	b29a      	uxth	r2, r3
 800578a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e018      	b.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d114      	bne.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a6:	4413      	add	r3, r2
 80057a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6959      	ldr	r1, [r3, #20]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	895a      	ldrh	r2, [r3, #10]
 80057ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f003 fe8b 	bl	80094ec <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f0:	82fb      	strh	r3, [r7, #22]
 80057f2:	8afb      	ldrh	r3, [r7, #22]
 80057f4:	f083 0310 	eor.w	r3, r3, #16
 80057f8:	82fb      	strh	r3, [r7, #22]
 80057fa:	8afb      	ldrh	r3, [r7, #22]
 80057fc:	f083 0320 	eor.w	r3, r3, #32
 8005800:	82fb      	strh	r3, [r7, #22]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	441a      	add	r2, r3
 8005810:	8afb      	ldrh	r3, [r7, #22]
 8005812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3798      	adds	r7, #152	@ 0x98
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	817b      	strh	r3, [r7, #10]
 800583e:	4613      	mov	r3, r2
 8005840:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800584e:	897b      	ldrh	r3, [r7, #10]
 8005850:	f003 0207 	and.w	r2, r3, #7
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3310      	adds	r3, #16
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e009      	b.n	800587a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005866:	897a      	ldrh	r2, [r7, #10]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800587a:	893b      	ldrh	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d107      	bne.n	8005890 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	b29a      	uxth	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	80da      	strh	r2, [r3, #6]
 800588e:	e00b      	b.n	80058a8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2201      	movs	r2, #1
 8005894:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	b29a      	uxth	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005910:	4b04      	ldr	r3, [pc, #16]	@ (8005924 <HAL_PWREx_GetVoltageRange+0x18>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005918:	4618      	mov	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40007000 	.word	0x40007000

08005928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005936:	d130      	bne.n	800599a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005938:	4b23      	ldr	r3, [pc, #140]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005944:	d038      	beq.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005946:	4b20      	ldr	r3, [pc, #128]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800594e:	4a1e      	ldr	r2, [pc, #120]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005950:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005956:	4b1d      	ldr	r3, [pc, #116]	@ (80059cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2232      	movs	r2, #50	@ 0x32
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	4a1b      	ldr	r2, [pc, #108]	@ (80059d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0c9b      	lsrs	r3, r3, #18
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800596c:	e002      	b.n	8005974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3b01      	subs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005974:	4b14      	ldr	r3, [pc, #80]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005980:	d102      	bne.n	8005988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f2      	bne.n	800596e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005988:	4b0f      	ldr	r3, [pc, #60]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005994:	d110      	bne.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e00f      	b.n	80059ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800599a:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a6:	d007      	beq.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059a8:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059b0:	4a05      	ldr	r2, [pc, #20]	@ (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40007000 	.word	0x40007000
 80059cc:	20000984 	.word	0x20000984
 80059d0:	431bde83 	.word	0x431bde83

080059d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80059de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059e2:	6053      	str	r3, [r2, #4]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40007000 	.word	0x40007000

080059f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f000 bc02 	b.w	800620c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a08:	4b96      	ldr	r3, [pc, #600]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
 8005a10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a12:	4b94      	ldr	r3, [pc, #592]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80e4 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_RCC_OscConfig+0x4c>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	f040 808b 	bne.w	8005b4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	f040 8087 	bne.w	8005b4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a40:	4b88      	ldr	r3, [pc, #544]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCC_OscConfig+0x64>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e3d9      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	4b81      	ldr	r3, [pc, #516]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <HAL_RCC_OscConfig+0x7e>
 8005a68:	4b7e      	ldr	r3, [pc, #504]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a70:	e005      	b.n	8005a7e <HAL_RCC_OscConfig+0x8a>
 8005a72:	4b7c      	ldr	r3, [pc, #496]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d223      	bcs.n	8005aca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fd54 	bl	8006534 <RCC_SetFlashLatencyFromMSIRange>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e3ba      	b.n	800620c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a96:	4b73      	ldr	r3, [pc, #460]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a72      	ldr	r2, [pc, #456]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b70      	ldr	r3, [pc, #448]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	496d      	ldr	r1, [pc, #436]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4968      	ldr	r1, [pc, #416]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	e025      	b.n	8005b16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aca:	4b66      	ldr	r3, [pc, #408]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a65      	ldr	r2, [pc, #404]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	4b63      	ldr	r3, [pc, #396]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4960      	ldr	r1, [pc, #384]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	495b      	ldr	r1, [pc, #364]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fd14 	bl	8006534 <RCC_SetFlashLatencyFromMSIRange>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e37a      	b.n	800620c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b16:	f000 fc81 	bl	800641c <HAL_RCC_GetSysClockFreq>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b51      	ldr	r3, [pc, #324]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	4950      	ldr	r1, [pc, #320]	@ (8005c68 <HAL_RCC_OscConfig+0x274>)
 8005b28:	5ccb      	ldrb	r3, [r1, r3]
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b32:	4a4e      	ldr	r2, [pc, #312]	@ (8005c6c <HAL_RCC_OscConfig+0x278>)
 8005b34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b36:	4b4e      	ldr	r3, [pc, #312]	@ (8005c70 <HAL_RCC_OscConfig+0x27c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd f892 	bl	8002c64 <HAL_InitTick>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d052      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	e35e      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d032      	beq.n	8005bbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b56:	4b43      	ldr	r3, [pc, #268]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a42      	ldr	r2, [pc, #264]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b62:	f7fd f8cf 	bl	8002d04 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b6a:	f7fd f8cb 	bl	8002d04 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e347      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b7c:	4b39      	ldr	r3, [pc, #228]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b88:	4b36      	ldr	r3, [pc, #216]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a35      	ldr	r2, [pc, #212]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b8e:	f043 0308 	orr.w	r3, r3, #8
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4b33      	ldr	r3, [pc, #204]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	4930      	ldr	r1, [pc, #192]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	492b      	ldr	r1, [pc, #172]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
 8005bba:	e01a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005bbc:	4b29      	ldr	r3, [pc, #164]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a28      	ldr	r2, [pc, #160]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bc8:	f7fd f89c 	bl	8002d04 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bd0:	f7fd f898 	bl	8002d04 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e314      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005be2:	4b20      	ldr	r3, [pc, #128]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x1dc>
 8005bee:	e000      	b.n	8005bf2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d073      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_OscConfig+0x21c>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d10e      	bne.n	8005c28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d10b      	bne.n	8005c28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	4b14      	ldr	r3, [pc, #80]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d063      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x2f0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d15f      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e2f1      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c30:	d106      	bne.n	8005c40 <HAL_RCC_OscConfig+0x24c>
 8005c32:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a0b      	ldr	r2, [pc, #44]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	e025      	b.n	8005c8c <HAL_RCC_OscConfig+0x298>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c48:	d114      	bne.n	8005c74 <HAL_RCC_OscConfig+0x280>
 8005c4a:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a05      	ldr	r2, [pc, #20]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	4b03      	ldr	r3, [pc, #12]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a02      	ldr	r2, [pc, #8]	@ (8005c64 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e013      	b.n	8005c8c <HAL_RCC_OscConfig+0x298>
 8005c64:	40021000 	.word	0x40021000
 8005c68:	0800dca0 	.word	0x0800dca0
 8005c6c:	20000984 	.word	0x20000984
 8005c70:	20000988 	.word	0x20000988
 8005c74:	4ba0      	ldr	r3, [pc, #640]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a9f      	ldr	r2, [pc, #636]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b9d      	ldr	r3, [pc, #628]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a9c      	ldr	r2, [pc, #624]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fd f836 	bl	8002d04 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c9c:	f7fd f832 	bl	8002d04 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b64      	cmp	r3, #100	@ 0x64
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e2ae      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cae:	4b92      	ldr	r3, [pc, #584]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x2a8>
 8005cba:	e014      	b.n	8005ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fd f822 	bl	8002d04 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc4:	f7fd f81e 	bl	8002d04 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	@ 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e29a      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cd6:	4b88      	ldr	r3, [pc, #544]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x2d0>
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d060      	beq.n	8005db4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_OscConfig+0x310>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b0c      	cmp	r3, #12
 8005cfc:	d119      	bne.n	8005d32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d116      	bne.n	8005d32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d04:	4b7c      	ldr	r3, [pc, #496]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_OscConfig+0x328>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e277      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d1c:	4b76      	ldr	r3, [pc, #472]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	061b      	lsls	r3, r3, #24
 8005d2a:	4973      	ldr	r1, [pc, #460]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d30:	e040      	b.n	8005db4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d023      	beq.n	8005d82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d46:	f7fc ffdd 	bl	8002d04 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d4e:	f7fc ffd9 	bl	8002d04 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e255      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d60:	4b65      	ldr	r3, [pc, #404]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6c:	4b62      	ldr	r3, [pc, #392]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	495f      	ldr	r1, [pc, #380]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
 8005d80:	e018      	b.n	8005db4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d82:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a5c      	ldr	r2, [pc, #368]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fc ffb9 	bl	8002d04 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d96:	f7fc ffb5 	bl	8002d04 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e231      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005da8:	4b53      	ldr	r3, [pc, #332]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d03c      	beq.n	8005e3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01c      	beq.n	8005e02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dce:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd8:	f7fc ff94 	bl	8002d04 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de0:	f7fc ff90 	bl	8002d04 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e20c      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005df2:	4b41      	ldr	r3, [pc, #260]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0ef      	beq.n	8005de0 <HAL_RCC_OscConfig+0x3ec>
 8005e00:	e01b      	b.n	8005e3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e02:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e08:	4a3b      	ldr	r2, [pc, #236]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e0a:	f023 0301 	bic.w	r3, r3, #1
 8005e0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e12:	f7fc ff77 	bl	8002d04 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e1a:	f7fc ff73 	bl	8002d04 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e1ef      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e2c:	4b32      	ldr	r3, [pc, #200]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ef      	bne.n	8005e1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80a6 	beq.w	8005f94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e58:	4b27      	ldr	r3, [pc, #156]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e64:	4b24      	ldr	r3, [pc, #144]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e70:	2301      	movs	r3, #1
 8005e72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e74:	4b21      	ldr	r3, [pc, #132]	@ (8005efc <HAL_RCC_OscConfig+0x508>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d118      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e80:	4b1e      	ldr	r3, [pc, #120]	@ (8005efc <HAL_RCC_OscConfig+0x508>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1d      	ldr	r2, [pc, #116]	@ (8005efc <HAL_RCC_OscConfig+0x508>)
 8005e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8c:	f7fc ff3a 	bl	8002d04 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e94:	f7fc ff36 	bl	8002d04 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1b2      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ea6:	4b15      	ldr	r3, [pc, #84]	@ (8005efc <HAL_RCC_OscConfig+0x508>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d108      	bne.n	8005ecc <HAL_RCC_OscConfig+0x4d8>
 8005eba:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005eca:	e029      	b.n	8005f20 <HAL_RCC_OscConfig+0x52c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	d115      	bne.n	8005f00 <HAL_RCC_OscConfig+0x50c>
 8005ed4:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eda:	4a07      	ldr	r2, [pc, #28]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005edc:	f043 0304 	orr.w	r3, r3, #4
 8005ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ee4:	4b04      	ldr	r3, [pc, #16]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eea:	4a03      	ldr	r2, [pc, #12]	@ (8005ef8 <HAL_RCC_OscConfig+0x504>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ef4:	e014      	b.n	8005f20 <HAL_RCC_OscConfig+0x52c>
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
 8005f00:	4b9a      	ldr	r3, [pc, #616]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f06:	4a99      	ldr	r2, [pc, #612]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f10:	4b96      	ldr	r3, [pc, #600]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f16:	4a95      	ldr	r2, [pc, #596]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f18:	f023 0304 	bic.w	r3, r3, #4
 8005f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fc feec 	bl	8002d04 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f30:	f7fc fee8 	bl	8002d04 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e162      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f46:	4b89      	ldr	r3, [pc, #548]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0ed      	beq.n	8005f30 <HAL_RCC_OscConfig+0x53c>
 8005f54:	e015      	b.n	8005f82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fc fed5 	bl	8002d04 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fc fed1 	bl	8002d04 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e14b      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f74:	4b7d      	ldr	r3, [pc, #500]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1ed      	bne.n	8005f5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f82:	7ffb      	ldrb	r3, [r7, #31]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b78      	ldr	r3, [pc, #480]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8c:	4a77      	ldr	r2, [pc, #476]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d03c      	beq.n	800601a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01c      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fa8:	4b70      	ldr	r3, [pc, #448]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fae:	4a6f      	ldr	r2, [pc, #444]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fc fea4 	bl	8002d04 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fc0:	f7fc fea0 	bl	8002d04 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e11c      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fd2:	4b66      	ldr	r3, [pc, #408]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0ef      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x5cc>
 8005fe0:	e01b      	b.n	800601a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fe2:	4b62      	ldr	r3, [pc, #392]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fe8:	4a60      	ldr	r2, [pc, #384]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fc fe87 	bl	8002d04 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ffa:	f7fc fe83 	bl	8002d04 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e0ff      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800600c:	4b57      	ldr	r3, [pc, #348]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 800600e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ef      	bne.n	8005ffa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80f3 	beq.w	800620a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	2b02      	cmp	r3, #2
 800602a:	f040 80c9 	bne.w	80061c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800602e:	4b4f      	ldr	r3, [pc, #316]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 0203 	and.w	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	429a      	cmp	r2, r3
 8006040:	d12c      	bne.n	800609c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604c:	3b01      	subs	r3, #1
 800604e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d123      	bne.n	800609c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d11b      	bne.n	800609c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d113      	bne.n	800609c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d109      	bne.n	800609c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	3b01      	subs	r3, #1
 8006096:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d06b      	beq.n	8006174 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b0c      	cmp	r3, #12
 80060a0:	d062      	beq.n	8006168 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80060a2:	4b32      	ldr	r3, [pc, #200]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e0ac      	b.n	800620c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80060b2:	4b2e      	ldr	r3, [pc, #184]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 80060b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060be:	f7fc fe21 	bl	8002d04 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c6:	f7fc fe1d 	bl	8002d04 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e099      	b.n	800620c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d8:	4b24      	ldr	r3, [pc, #144]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f0      	bne.n	80060c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060e4:	4b21      	ldr	r3, [pc, #132]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	4b21      	ldr	r3, [pc, #132]	@ (8006170 <HAL_RCC_OscConfig+0x77c>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060f4:	3a01      	subs	r2, #1
 80060f6:	0112      	lsls	r2, r2, #4
 80060f8:	4311      	orrs	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060fe:	0212      	lsls	r2, r2, #8
 8006100:	4311      	orrs	r1, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006106:	0852      	lsrs	r2, r2, #1
 8006108:	3a01      	subs	r2, #1
 800610a:	0552      	lsls	r2, r2, #21
 800610c:	4311      	orrs	r1, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006112:	0852      	lsrs	r2, r2, #1
 8006114:	3a01      	subs	r2, #1
 8006116:	0652      	lsls	r2, r2, #25
 8006118:	4311      	orrs	r1, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800611e:	06d2      	lsls	r2, r2, #27
 8006120:	430a      	orrs	r2, r1
 8006122:	4912      	ldr	r1, [pc, #72]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8006124:	4313      	orrs	r3, r2
 8006126:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006128:	4b10      	ldr	r3, [pc, #64]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0f      	ldr	r2, [pc, #60]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 800612e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006132:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006134:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a0c      	ldr	r2, [pc, #48]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 800613a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800613e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006140:	f7fc fde0 	bl	8002d04 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006148:	f7fc fddc 	bl	8002d04 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e058      	b.n	800620c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800615a:	4b04      	ldr	r3, [pc, #16]	@ (800616c <HAL_RCC_OscConfig+0x778>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006166:	e050      	b.n	800620a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e04f      	b.n	800620c <HAL_RCC_OscConfig+0x818>
 800616c:	40021000 	.word	0x40021000
 8006170:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006174:	4b27      	ldr	r3, [pc, #156]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d144      	bne.n	800620a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006180:	4b24      	ldr	r3, [pc, #144]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a23      	ldr	r2, [pc, #140]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 8006186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800618a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800618c:	4b21      	ldr	r3, [pc, #132]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a20      	ldr	r2, [pc, #128]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 8006192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006196:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006198:	f7fc fdb4 	bl	8002d04 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fc fdb0 	bl	8002d04 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e02c      	b.n	800620c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061b2:	4b18      	ldr	r3, [pc, #96]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x7ac>
 80061be:	e024      	b.n	800620a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d01f      	beq.n	8006206 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a12      	ldr	r2, [pc, #72]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 80061cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fc fd97 	bl	8002d04 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061da:	f7fc fd93 	bl	8002d04 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e00f      	b.n	800620c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	4905      	ldr	r1, [pc, #20]	@ (8006214 <HAL_RCC_OscConfig+0x820>)
 80061fe:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <HAL_RCC_OscConfig+0x824>)
 8006200:	4013      	ands	r3, r2
 8006202:	60cb      	str	r3, [r1, #12]
 8006204:	e001      	b.n	800620a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40021000 	.word	0x40021000
 8006218:	feeefffc 	.word	0xfeeefffc

0800621c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0e7      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006230:	4b75      	ldr	r3, [pc, #468]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d910      	bls.n	8006260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b72      	ldr	r3, [pc, #456]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 0207 	bic.w	r2, r3, #7
 8006246:	4970      	ldr	r1, [pc, #448]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b6e      	ldr	r3, [pc, #440]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0cf      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	4b66      	ldr	r3, [pc, #408]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006278:	429a      	cmp	r2, r3
 800627a:	d908      	bls.n	800628e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800627c:	4b63      	ldr	r3, [pc, #396]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4960      	ldr	r1, [pc, #384]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04c      	beq.n	8006334 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d107      	bne.n	80062b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062a2:	4b5a      	ldr	r3, [pc, #360]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d121      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e0a6      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d107      	bne.n	80062ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ba:	4b54      	ldr	r3, [pc, #336]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d115      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e09a      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062d2:	4b4e      	ldr	r3, [pc, #312]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e08e      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062e2:	4b4a      	ldr	r3, [pc, #296]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e086      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062f2:	4b46      	ldr	r3, [pc, #280]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f023 0203 	bic.w	r2, r3, #3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4943      	ldr	r1, [pc, #268]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 8006300:	4313      	orrs	r3, r2
 8006302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006304:	f7fc fcfe 	bl	8002d04 <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630a:	e00a      	b.n	8006322 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800630c:	f7fc fcfa 	bl	8002d04 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e06e      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006322:	4b3a      	ldr	r3, [pc, #232]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 020c 	and.w	r2, r3, #12
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	429a      	cmp	r2, r3
 8006332:	d1eb      	bne.n	800630c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	4b31      	ldr	r3, [pc, #196]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800634c:	429a      	cmp	r2, r3
 800634e:	d208      	bcs.n	8006362 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b2e      	ldr	r3, [pc, #184]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	492b      	ldr	r1, [pc, #172]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006362:	4b29      	ldr	r3, [pc, #164]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d210      	bcs.n	8006392 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006370:	4b25      	ldr	r3, [pc, #148]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 0207 	bic.w	r2, r3, #7
 8006378:	4923      	ldr	r1, [pc, #140]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006380:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <HAL_RCC_ClockConfig+0x1ec>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d001      	beq.n	8006392 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e036      	b.n	8006400 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800639e:	4b1b      	ldr	r3, [pc, #108]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4918      	ldr	r1, [pc, #96]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063bc:	4b13      	ldr	r3, [pc, #76]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4910      	ldr	r1, [pc, #64]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063d0:	f000 f824 	bl	800641c <HAL_RCC_GetSysClockFreq>
 80063d4:	4602      	mov	r2, r0
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <HAL_RCC_ClockConfig+0x1f0>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	490b      	ldr	r1, [pc, #44]	@ (8006410 <HAL_RCC_ClockConfig+0x1f4>)
 80063e2:	5ccb      	ldrb	r3, [r1, r3]
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	4a09      	ldr	r2, [pc, #36]	@ (8006414 <HAL_RCC_ClockConfig+0x1f8>)
 80063ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <HAL_RCC_ClockConfig+0x1fc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fc fc35 	bl	8002c64 <HAL_InitTick>
 80063fa:	4603      	mov	r3, r0
 80063fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80063fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40022000 	.word	0x40022000
 800640c:	40021000 	.word	0x40021000
 8006410:	0800dca0 	.word	0x0800dca0
 8006414:	20000984 	.word	0x20000984
 8006418:	20000988 	.word	0x20000988

0800641c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800641c:	b480      	push	{r7}
 800641e:	b089      	sub	sp, #36	@ 0x24
 8006420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642a:	4b3e      	ldr	r3, [pc, #248]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
 8006432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006434:	4b3b      	ldr	r3, [pc, #236]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x34>
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d121      	bne.n	800648e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d11e      	bne.n	800648e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006450:	4b34      	ldr	r3, [pc, #208]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d107      	bne.n	800646c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800645c:	4b31      	ldr	r3, [pc, #196]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 800645e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	e005      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800646c:	4b2d      	ldr	r3, [pc, #180]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006478:	4a2b      	ldr	r2, [pc, #172]	@ (8006528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10d      	bne.n	80064a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800648c:	e00a      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d102      	bne.n	800649a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006494:	4b25      	ldr	r3, [pc, #148]	@ (800652c <HAL_RCC_GetSysClockFreq+0x110>)
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e004      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b08      	cmp	r3, #8
 800649e:	d101      	bne.n	80064a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064a0:	4b23      	ldr	r3, [pc, #140]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x114>)
 80064a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b0c      	cmp	r3, #12
 80064a8:	d134      	bne.n	8006514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d003      	beq.n	80064c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d003      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0xac>
 80064c0:	e005      	b.n	80064ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064c2:	4b1a      	ldr	r3, [pc, #104]	@ (800652c <HAL_RCC_GetSysClockFreq+0x110>)
 80064c4:	617b      	str	r3, [r7, #20]
      break;
 80064c6:	e005      	b.n	80064d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064c8:	4b19      	ldr	r3, [pc, #100]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x114>)
 80064ca:	617b      	str	r3, [r7, #20]
      break;
 80064cc:	e002      	b.n	80064d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	617b      	str	r3, [r7, #20]
      break;
 80064d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064d4:	4b13      	ldr	r3, [pc, #76]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	3301      	adds	r3, #1
 80064e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064e2:	4b10      	ldr	r3, [pc, #64]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	fb03 f202 	mul.w	r2, r3, r2
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <HAL_RCC_GetSysClockFreq+0x108>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	0e5b      	lsrs	r3, r3, #25
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	3301      	adds	r3, #1
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006514:	69bb      	ldr	r3, [r7, #24]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3724      	adds	r7, #36	@ 0x24
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000
 8006528:	0800dcb0 	.word	0x0800dcb0
 800652c:	00f42400 	.word	0x00f42400
 8006530:	007a1200 	.word	0x007a1200

08006534 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006540:	4b2a      	ldr	r3, [pc, #168]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800654c:	f7ff f9de 	bl	800590c <HAL_PWREx_GetVoltageRange>
 8006550:	6178      	str	r0, [r7, #20]
 8006552:	e014      	b.n	800657e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006554:	4b25      	ldr	r3, [pc, #148]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006558:	4a24      	ldr	r2, [pc, #144]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006560:	4b22      	ldr	r3, [pc, #136]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800656c:	f7ff f9ce 	bl	800590c <HAL_PWREx_GetVoltageRange>
 8006570:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006572:	4b1e      	ldr	r3, [pc, #120]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800657c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d10b      	bne.n	800659e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b80      	cmp	r3, #128	@ 0x80
 800658a:	d919      	bls.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006590:	d902      	bls.n	8006598 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006592:	2302      	movs	r3, #2
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	e013      	b.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006598:	2301      	movs	r3, #1
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	e010      	b.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b80      	cmp	r3, #128	@ 0x80
 80065a2:	d902      	bls.n	80065aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065a4:	2303      	movs	r3, #3
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	e00a      	b.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b80      	cmp	r3, #128	@ 0x80
 80065ae:	d102      	bne.n	80065b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065b0:	2302      	movs	r3, #2
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	e004      	b.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b70      	cmp	r3, #112	@ 0x70
 80065ba:	d101      	bne.n	80065c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065bc:	2301      	movs	r3, #1
 80065be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065c0:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f023 0207 	bic.w	r2, r3, #7
 80065c8:	4909      	ldr	r1, [pc, #36]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065d0:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d001      	beq.n	80065e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40022000 	.word	0x40022000

080065f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065fc:	2300      	movs	r3, #0
 80065fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006600:	2300      	movs	r3, #0
 8006602:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800660c:	2b00      	cmp	r3, #0
 800660e:	d031      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006614:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006618:	d01a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800661a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800661e:	d814      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006624:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006628:	d10f      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800662a:	4b5d      	ldr	r3, [pc, #372]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	4a5c      	ldr	r2, [pc, #368]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006634:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006636:	e00c      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f9ce 	bl	80069e0 <RCCEx_PLLSAI1_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	74fb      	strb	r3, [r7, #19]
      break;
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006652:	7cfb      	ldrb	r3, [r7, #19]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006658:	4b51      	ldr	r3, [pc, #324]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006666:	494e      	ldr	r1, [pc, #312]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800666e:	e001      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 809e 	beq.w	80067be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006682:	2300      	movs	r3, #0
 8006684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006686:	4b46      	ldr	r3, [pc, #280]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800669c:	4b40      	ldr	r3, [pc, #256]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800669e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a0:	4a3f      	ldr	r2, [pc, #252]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a8:	4b3d      	ldr	r3, [pc, #244]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b4:	2301      	movs	r3, #1
 80066b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066b8:	4b3a      	ldr	r3, [pc, #232]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a39      	ldr	r2, [pc, #228]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80066be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066c4:	f7fc fb1e 	bl	8002d04 <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066ca:	e009      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066cc:	f7fc fb1a 	bl	8002d04 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	74fb      	strb	r3, [r7, #19]
        break;
 80066de:	e005      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066e0:	4b30      	ldr	r3, [pc, #192]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0ef      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80066ec:	7cfb      	ldrb	r3, [r7, #19]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d15a      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066f2:	4b2b      	ldr	r3, [pc, #172]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01e      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	429a      	cmp	r2, r3
 800670c:	d019      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800670e:	4b24      	ldr	r3, [pc, #144]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006718:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800671a:	4b21      	ldr	r3, [pc, #132]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006720:	4a1f      	ldr	r2, [pc, #124]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800672a:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006730:	4a1b      	ldr	r2, [pc, #108]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800673a:	4a19      	ldr	r2, [pc, #100]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d016      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fc fada 	bl	8002d04 <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006752:	e00b      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006754:	f7fc fad6 	bl	8002d04 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006762:	4293      	cmp	r3, r2
 8006764:	d902      	bls.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	74fb      	strb	r3, [r7, #19]
            break;
 800676a:	e006      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800676c:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0ec      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800677a:	7cfb      	ldrb	r3, [r7, #19]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006780:	4b07      	ldr	r3, [pc, #28]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006786:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678e:	4904      	ldr	r1, [pc, #16]	@ (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006796:	e009      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006798:	7cfb      	ldrb	r3, [r7, #19]
 800679a:	74bb      	strb	r3, [r7, #18]
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000
 80067a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	7cfb      	ldrb	r3, [r7, #19]
 80067aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ac:	7c7b      	ldrb	r3, [r7, #17]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d105      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b2:	4b8a      	ldr	r3, [pc, #552]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b6:	4a89      	ldr	r2, [pc, #548]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067ca:	4b84      	ldr	r3, [pc, #528]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d0:	f023 0203 	bic.w	r2, r3, #3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	4980      	ldr	r1, [pc, #512]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ec:	4b7b      	ldr	r3, [pc, #492]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f2:	f023 020c 	bic.w	r2, r3, #12
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fa:	4978      	ldr	r1, [pc, #480]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800680e:	4b73      	ldr	r3, [pc, #460]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006814:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681c:	496f      	ldr	r1, [pc, #444]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006830:	4b6a      	ldr	r3, [pc, #424]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006836:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683e:	4967      	ldr	r1, [pc, #412]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006852:	4b62      	ldr	r3, [pc, #392]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006858:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	495e      	ldr	r1, [pc, #376]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006874:	4b59      	ldr	r3, [pc, #356]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006882:	4956      	ldr	r1, [pc, #344]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006896:	4b51      	ldr	r3, [pc, #324]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a4:	494d      	ldr	r1, [pc, #308]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d028      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068b8:	4b48      	ldr	r3, [pc, #288]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	4945      	ldr	r1, [pc, #276]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d6:	d106      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068d8:	4b40      	ldr	r3, [pc, #256]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4a3f      	ldr	r2, [pc, #252]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068e2:	60d3      	str	r3, [r2, #12]
 80068e4:	e011      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068ee:	d10c      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	2101      	movs	r1, #1
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 f872 	bl	80069e0 <RCCEx_PLLSAI1_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006900:	7cfb      	ldrb	r3, [r7, #19]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d028      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006916:	4b31      	ldr	r3, [pc, #196]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006924:	492d      	ldr	r1, [pc, #180]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006934:	d106      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006936:	4b29      	ldr	r3, [pc, #164]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4a28      	ldr	r2, [pc, #160]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800693c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006940:	60d3      	str	r3, [r2, #12]
 8006942:	e011      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800694c:	d10c      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3304      	adds	r3, #4
 8006952:	2101      	movs	r1, #1
 8006954:	4618      	mov	r0, r3
 8006956:	f000 f843 	bl	80069e0 <RCCEx_PLLSAI1_Config>
 800695a:	4603      	mov	r3, r0
 800695c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800695e:	7cfb      	ldrb	r3, [r7, #19]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006964:	7cfb      	ldrb	r3, [r7, #19]
 8006966:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01c      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006974:	4b19      	ldr	r3, [pc, #100]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006982:	4916      	ldr	r1, [pc, #88]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800698e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006992:	d10c      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	2102      	movs	r1, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f820 	bl	80069e0 <RCCEx_PLLSAI1_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80069aa:	7cfb      	ldrb	r3, [r7, #19]
 80069ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069ba:	4b08      	ldr	r3, [pc, #32]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c8:	4904      	ldr	r1, [pc, #16]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000

080069e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ee:	4b74      	ldr	r3, [pc, #464]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d018      	beq.n	8006a2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069fa:	4b71      	ldr	r3, [pc, #452]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f003 0203 	and.w	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d10d      	bne.n	8006a26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a12:	4b6b      	ldr	r3, [pc, #428]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	091b      	lsrs	r3, r3, #4
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
       ||
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d047      	beq.n	8006ab6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e044      	b.n	8006ab6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d018      	beq.n	8006a66 <RCCEx_PLLSAI1_Config+0x86>
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d825      	bhi.n	8006a84 <RCCEx_PLLSAI1_Config+0xa4>
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d002      	beq.n	8006a42 <RCCEx_PLLSAI1_Config+0x62>
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d009      	beq.n	8006a54 <RCCEx_PLLSAI1_Config+0x74>
 8006a40:	e020      	b.n	8006a84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a42:	4b5f      	ldr	r3, [pc, #380]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d11d      	bne.n	8006a8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a52:	e01a      	b.n	8006a8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a54:	4b5a      	ldr	r3, [pc, #360]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d116      	bne.n	8006a8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a64:	e013      	b.n	8006a8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a66:	4b56      	ldr	r3, [pc, #344]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10f      	bne.n	8006a92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a72:	4b53      	ldr	r3, [pc, #332]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a82:	e006      	b.n	8006a92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
      break;
 8006a88:	e004      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e002      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a8e:	bf00      	nop
 8006a90:	e000      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a9a:	4b49      	ldr	r3, [pc, #292]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6819      	ldr	r1, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	4943      	ldr	r1, [pc, #268]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d17c      	bne.n	8006bb6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006abc:	4b40      	ldr	r3, [pc, #256]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac8:	f7fc f91c 	bl	8002d04 <HAL_GetTick>
 8006acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ace:	e009      	b.n	8006ae4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ad0:	f7fc f918 	bl	8002d04 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d902      	bls.n	8006ae4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ae2:	e005      	b.n	8006af0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ae4:	4b36      	ldr	r3, [pc, #216]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ef      	bne.n	8006ad0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d15f      	bne.n	8006bb6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d110      	bne.n	8006b1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006afc:	4b30      	ldr	r3, [pc, #192]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006b04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6892      	ldr	r2, [r2, #8]
 8006b0c:	0211      	lsls	r1, r2, #8
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68d2      	ldr	r2, [r2, #12]
 8006b12:	06d2      	lsls	r2, r2, #27
 8006b14:	430a      	orrs	r2, r1
 8006b16:	492a      	ldr	r1, [pc, #168]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	610b      	str	r3, [r1, #16]
 8006b1c:	e027      	b.n	8006b6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d112      	bne.n	8006b4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b24:	4b26      	ldr	r3, [pc, #152]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006b2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6892      	ldr	r2, [r2, #8]
 8006b34:	0211      	lsls	r1, r2, #8
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6912      	ldr	r2, [r2, #16]
 8006b3a:	0852      	lsrs	r2, r2, #1
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	0552      	lsls	r2, r2, #21
 8006b40:	430a      	orrs	r2, r1
 8006b42:	491f      	ldr	r1, [pc, #124]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	610b      	str	r3, [r1, #16]
 8006b48:	e011      	b.n	8006b6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006b52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6892      	ldr	r2, [r2, #8]
 8006b5a:	0211      	lsls	r1, r2, #8
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6952      	ldr	r2, [r2, #20]
 8006b60:	0852      	lsrs	r2, r2, #1
 8006b62:	3a01      	subs	r2, #1
 8006b64:	0652      	lsls	r2, r2, #25
 8006b66:	430a      	orrs	r2, r1
 8006b68:	4915      	ldr	r1, [pc, #84]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b6e:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a13      	ldr	r2, [pc, #76]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7a:	f7fc f8c3 	bl	8002d04 <HAL_GetTick>
 8006b7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b80:	e009      	b.n	8006b96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b82:	f7fc f8bf 	bl	8002d04 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d902      	bls.n	8006b96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	73fb      	strb	r3, [r7, #15]
          break;
 8006b94:	e005      	b.n	8006ba2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b96:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0ef      	beq.n	8006b82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ba8:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	4903      	ldr	r1, [pc, #12]	@ (8006bc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40021000 	.word	0x40021000

08006bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e095      	b.n	8006d02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006be6:	d009      	beq.n	8006bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	61da      	str	r2, [r3, #28]
 8006bee:	e005      	b.n	8006bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fb ff24 	bl	8002a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c3c:	d902      	bls.n	8006c44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e002      	b.n	8006c4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c52:	d007      	beq.n	8006c64 <HAL_SPI_Init+0xa0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca6:	ea42 0103 	orr.w	r1, r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	f003 0204 	and.w	r2, r3, #4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ce0:	ea42 0103 	orr.w	r1, r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b088      	sub	sp, #32
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d1a:	f7fb fff3 	bl	8002d04 <HAL_GetTick>
 8006d1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d001      	beq.n	8006d34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e15c      	b.n	8006fee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_Transmit+0x36>
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e154      	b.n	8006fee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_SPI_Transmit+0x48>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e14d      	b.n	8006fee <HAL_SPI_Transmit+0x2e4>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da4:	d10f      	bne.n	8006dc6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006db4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd0:	2b40      	cmp	r3, #64	@ 0x40
 8006dd2:	d007      	beq.n	8006de4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006de2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006dec:	d952      	bls.n	8006e94 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Transmit+0xf2>
 8006df6:	8b7b      	ldrh	r3, [r7, #26]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d145      	bne.n	8006e88 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	881a      	ldrh	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	1c9a      	adds	r2, r3, #2
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e20:	e032      	b.n	8006e88 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d112      	bne.n	8006e56 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e54:	e018      	b.n	8006e88 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e56:	f7fb ff55 	bl	8002d04 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d803      	bhi.n	8006e6e <HAL_SPI_Transmit+0x164>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d102      	bne.n	8006e74 <HAL_SPI_Transmit+0x16a>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e0b2      	b.n	8006fee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1c7      	bne.n	8006e22 <HAL_SPI_Transmit+0x118>
 8006e92:	e083      	b.n	8006f9c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_Transmit+0x198>
 8006e9c:	8b7b      	ldrh	r3, [r7, #26]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d177      	bne.n	8006f92 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d912      	bls.n	8006ed2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	881a      	ldrh	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebc:	1c9a      	adds	r2, r3, #2
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b02      	subs	r3, #2
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ed0:	e05f      	b.n	8006f92 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ef8:	e04b      	b.n	8006f92 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d12b      	bne.n	8006f60 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d912      	bls.n	8006f38 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f16:	881a      	ldrh	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b02      	subs	r3, #2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f36:	e02c      	b.n	8006f92 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f5e:	e018      	b.n	8006f92 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f60:	f7fb fed0 	bl	8002d04 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d803      	bhi.n	8006f78 <HAL_SPI_Transmit+0x26e>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	d102      	bne.n	8006f7e <HAL_SPI_Transmit+0x274>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e02d      	b.n	8006fee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ae      	bne.n	8006efa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f947 	bl	8007234 <SPI_EndRxTxTransaction>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10a      	bne.n	8006fd0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	4613      	mov	r3, r2
 8007006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007008:	f7fb fe7c 	bl	8002d04 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4413      	add	r3, r2
 8007016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007018:	f7fb fe74 	bl	8002d04 <HAL_GetTick>
 800701c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800701e:	4b39      	ldr	r3, [pc, #228]	@ (8007104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	015b      	lsls	r3, r3, #5
 8007024:	0d1b      	lsrs	r3, r3, #20
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800702e:	e054      	b.n	80070da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d050      	beq.n	80070da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007038:	f7fb fe64 	bl	8002d04 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	429a      	cmp	r2, r3
 8007046:	d902      	bls.n	800704e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d13d      	bne.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800705c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007066:	d111      	bne.n	800708c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007070:	d004      	beq.n	800707c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707a:	d107      	bne.n	800708c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800708a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007094:	d10f      	bne.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e017      	b.n	80070fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	bf0c      	ite	eq
 80070ea:	2301      	moveq	r3, #1
 80070ec:	2300      	movne	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d19b      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000984 	.word	0x20000984

08007108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	@ 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800711a:	f7fb fdf3 	bl	8002d04 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	4413      	add	r3, r2
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800712a:	f7fb fdeb 	bl	8002d04 <HAL_GetTick>
 800712e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007138:	4b3d      	ldr	r3, [pc, #244]	@ (8007230 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	00da      	lsls	r2, r3, #3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	0d1b      	lsrs	r3, r3, #20
 8007148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007150:	e060      	b.n	8007214 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007158:	d107      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0x62>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007168:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d050      	beq.n	8007214 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007172:	f7fb fdc7 	bl	8002d04 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717e:	429a      	cmp	r2, r3
 8007180:	d902      	bls.n	8007188 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	d13d      	bne.n	8007204 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007196:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071a0:	d111      	bne.n	80071c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071aa:	d004      	beq.n	80071b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b4:	d107      	bne.n	80071c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ce:	d10f      	bne.n	80071f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e010      	b.n	8007226 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	3b01      	subs	r3, #1
 8007212:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4013      	ands	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d196      	bne.n	8007152 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3728      	adds	r7, #40	@ 0x28
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000984 	.word	0x20000984

08007234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ff5b 	bl	8007108 <SPI_WaitFifoStateUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725c:	f043 0220 	orr.w	r2, r3, #32
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e027      	b.n	80072b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	2180      	movs	r1, #128	@ 0x80
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fec0 	bl	8006ff8 <SPI_WaitFlagStateUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007282:	f043 0220 	orr.w	r2, r3, #32
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e014      	b.n	80072b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2200      	movs	r2, #0
 8007296:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff ff34 	bl	8007108 <SPI_WaitFifoStateUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072aa:	f043 0220 	orr.w	r2, r3, #32
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e000      	b.n	80072b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e049      	b.n	8007366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fb fbfe 	bl	8002ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f000 f9ba 	bl	8007678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	d001      	beq.n	8007388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e03b      	b.n	8007400 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a19      	ldr	r2, [pc, #100]	@ (800740c <HAL_TIM_Base_Start_IT+0x9c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d009      	beq.n	80073be <HAL_TIM_Base_Start_IT+0x4e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b2:	d004      	beq.n	80073be <HAL_TIM_Base_Start_IT+0x4e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <HAL_TIM_Base_Start_IT+0xa0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d115      	bne.n	80073ea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	4b13      	ldr	r3, [pc, #76]	@ (8007414 <HAL_TIM_Base_Start_IT+0xa4>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b06      	cmp	r3, #6
 80073ce:	d015      	beq.n	80073fc <HAL_TIM_Base_Start_IT+0x8c>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d6:	d011      	beq.n	80073fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e8:	e008      	b.n	80073fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e000      	b.n	80073fe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40014000 	.word	0x40014000
 8007414:	00010007 	.word	0x00010007

08007418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d020      	beq.n	800747c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01b      	beq.n	800747c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0202 	mvn.w	r2, #2
 800744c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8e9 	bl	800763a <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8db 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f8ec 	bl	800764e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d020      	beq.n	80074c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01b      	beq.n	80074c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0204 	mvn.w	r2, #4
 8007498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8c3 	bl	800763a <HAL_TIM_IC_CaptureCallback>
 80074b4:	e005      	b.n	80074c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8b5 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8c6 	bl	800764e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d020      	beq.n	8007514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01b      	beq.n	8007514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0208 	mvn.w	r2, #8
 80074e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2204      	movs	r2, #4
 80074ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f89d 	bl	800763a <HAL_TIM_IC_CaptureCallback>
 8007500:	e005      	b.n	800750e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f88f 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f8a0 	bl	800764e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	d020      	beq.n	8007560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0210 	mvn.w	r2, #16
 8007530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2208      	movs	r2, #8
 8007536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f877 	bl	800763a <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f869 	bl	8007626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f87a 	bl	800764e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0201 	mvn.w	r2, #1
 800757c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb f97a 	bl	8002878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80075aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f943 	bl	8007838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00c      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f93b 	bl	800784c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f834 	bl	8007662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f06f 0220 	mvn.w	r2, #32
 8007616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f903 	bl	8007824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a30      	ldr	r2, [pc, #192]	@ (800774c <TIM_Base_SetConfig+0xd4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_Base_SetConfig+0x20>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007696:	d108      	bne.n	80076aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a27      	ldr	r2, [pc, #156]	@ (800774c <TIM_Base_SetConfig+0xd4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00b      	beq.n	80076ca <TIM_Base_SetConfig+0x52>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b8:	d007      	beq.n	80076ca <TIM_Base_SetConfig+0x52>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a24      	ldr	r2, [pc, #144]	@ (8007750 <TIM_Base_SetConfig+0xd8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d003      	beq.n	80076ca <TIM_Base_SetConfig+0x52>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a23      	ldr	r2, [pc, #140]	@ (8007754 <TIM_Base_SetConfig+0xdc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d108      	bne.n	80076dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a12      	ldr	r2, [pc, #72]	@ (800774c <TIM_Base_SetConfig+0xd4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_Base_SetConfig+0xa0>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a11      	ldr	r2, [pc, #68]	@ (8007750 <TIM_Base_SetConfig+0xd8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_Base_SetConfig+0xa0>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a10      	ldr	r2, [pc, #64]	@ (8007754 <TIM_Base_SetConfig+0xdc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d103      	bne.n	8007720 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d105      	bne.n	800773e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f023 0201 	bic.w	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	611a      	str	r2, [r3, #16]
  }
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400

08007758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800776c:	2302      	movs	r3, #2
 800776e:	e04f      	b.n	8007810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a21      	ldr	r2, [pc, #132]	@ (800781c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d108      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a14      	ldr	r2, [pc, #80]	@ (800781c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d8:	d004      	beq.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a10      	ldr	r2, [pc, #64]	@ (8007820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d10c      	bne.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40014000 	.word	0x40014000

08007824 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	4638      	mov	r0, r7
 800786a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800788c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007890:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80078b2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80078b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	43db      	mvns	r3, r3
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4013      	ands	r3, r2
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	4638      	mov	r0, r7
 8007904:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007938:	b480      	push	{r7}
 800793a:	b0a7      	sub	sp, #156	@ 0x9c
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	78db      	ldrb	r3, [r3, #3]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d81f      	bhi.n	80079aa <USB_ActivateEndpoint+0x72>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <USB_ActivateEndpoint+0x38>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007981 	.word	0x08007981
 8007974:	0800799d 	.word	0x0800799d
 8007978:	080079b3 	.word	0x080079b3
 800797c:	0800798f 	.word	0x0800798f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007980:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007984:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007988:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800798c:	e012      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800798e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007992:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007996:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800799a:	e00b      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800799c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80079a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80079a8:	e004      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80079b0:	e000      	b.n	80079b4 <USB_ActivateEndpoint+0x7c>
      break;
 80079b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	b21b      	sxth	r3, r3
 80079e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ee:	b21a      	sxth	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	b21b      	sxth	r3, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b21b      	sxth	r3, r3
 80079fa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	441a      	add	r2, r3
 8007a08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	7b1b      	ldrb	r3, [r3, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 8180 	bne.w	8007d2a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8084 	beq.w	8007b3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	4413      	add	r3, r2
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	00da      	lsls	r2, r3, #3
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	827b      	strh	r3, [r7, #18]
 8007a76:	8a7b      	ldrh	r3, [r7, #18]
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01b      	beq.n	8007ab8 <USB_ActivateEndpoint+0x180>
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a96:	823b      	strh	r3, [r7, #16]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	441a      	add	r2, r3
 8007aa2:	8a3b      	ldrh	r3, [r7, #16]
 8007aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	78db      	ldrb	r3, [r3, #3]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d020      	beq.n	8007b02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ad6:	81bb      	strh	r3, [r7, #12]
 8007ad8:	89bb      	ldrh	r3, [r7, #12]
 8007ada:	f083 0320 	eor.w	r3, r3, #32
 8007ade:	81bb      	strh	r3, [r7, #12]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	441a      	add	r2, r3
 8007aea:	89bb      	ldrh	r3, [r7, #12]
 8007aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8013      	strh	r3, [r2, #0]
 8007b00:	e3f9      	b.n	80082f6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b18:	81fb      	strh	r3, [r7, #14]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	441a      	add	r2, r3
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	8013      	strh	r3, [r2, #0]
 8007b3a:	e3dc      	b.n	80082f6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	4413      	add	r3, r2
 8007b4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	00da      	lsls	r2, r3, #3
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	4413      	add	r3, r2
 8007b5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	88db      	ldrh	r3, [r3, #6]
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	4413      	add	r3, r2
 8007b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	00da      	lsls	r2, r3, #3
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <USB_ActivateEndpoint+0x28a>
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	e041      	b.n	8007c46 <USB_ActivateEndpoint+0x30e>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bc8:	d81c      	bhi.n	8007c04 <USB_ActivateEndpoint+0x2cc>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <USB_ActivateEndpoint+0x2b2>
 8007be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007be4:	3301      	adds	r3, #1
 8007be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	029b      	lsls	r3, r3, #10
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e020      	b.n	8007c46 <USB_ActivateEndpoint+0x30e>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <USB_ActivateEndpoint+0x2ec>
 8007c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	029b      	lsls	r3, r3, #10
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	4313      	orrs	r3, r2
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007c54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01b      	beq.n	8007c96 <USB_ActivateEndpoint+0x35e>
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c74:	843b      	strh	r3, [r7, #32]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8c3b      	ldrh	r3, [r7, #32]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d124      	bne.n	8007ce8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb4:	83bb      	strh	r3, [r7, #28]
 8007cb6:	8bbb      	ldrh	r3, [r7, #28]
 8007cb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007cbc:	83bb      	strh	r3, [r7, #28]
 8007cbe:	8bbb      	ldrh	r3, [r7, #28]
 8007cc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cc4:	83bb      	strh	r3, [r7, #28]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	441a      	add	r2, r3
 8007cd0:	8bbb      	ldrh	r3, [r7, #28]
 8007cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	8013      	strh	r3, [r2, #0]
 8007ce6:	e306      	b.n	80082f6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cfe:	83fb      	strh	r3, [r7, #30]
 8007d00:	8bfb      	ldrh	r3, [r7, #30]
 8007d02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d06:	83fb      	strh	r3, [r7, #30]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	441a      	add	r2, r3
 8007d12:	8bfb      	ldrh	r3, [r7, #30]
 8007d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	8013      	strh	r3, [r2, #0]
 8007d28:	e2e5      	b.n	80082f6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d11e      	bne.n	8007d70 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d48:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d62:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8013      	strh	r3, [r2, #0]
 8007d6e:	e01d      	b.n	8007dac <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d86:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007dbc:	4413      	add	r3, r2
 8007dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	00da      	lsls	r2, r3, #3
 8007dc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dce:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	891b      	ldrh	r3, [r3, #8]
 8007dd4:	085b      	lsrs	r3, r3, #1
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007df0:	4413      	add	r3, r2
 8007df2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	00da      	lsls	r2, r3, #3
 8007dfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e02:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	895b      	ldrh	r3, [r3, #10]
 8007e08:	085b      	lsrs	r3, r3, #1
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f040 81af 	bne.w	800817c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007e2e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01d      	beq.n	8007e76 <USB_ActivateEndpoint+0x53e>
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e50:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	441a      	add	r2, r3
 8007e5e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007e86:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01d      	beq.n	8007ece <USB_ActivateEndpoint+0x596>
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d16b      	bne.n	8007fae <USB_ActivateEndpoint+0x676>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ee6:	4413      	add	r3, r2
 8007ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	00da      	lsls	r2, r3, #3
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <USB_ActivateEndpoint+0x5f0>
 8007f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	e05d      	b.n	8007fe4 <USB_ActivateEndpoint+0x6ac>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f2e:	d81c      	bhi.n	8007f6a <USB_ActivateEndpoint+0x632>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <USB_ActivateEndpoint+0x618>
 8007f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	029b      	lsls	r3, r3, #10
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f66:	801a      	strh	r2, [r3, #0]
 8007f68:	e03c      	b.n	8007fe4 <USB_ActivateEndpoint+0x6ac>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <USB_ActivateEndpoint+0x652>
 8007f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f84:	3b01      	subs	r3, #1
 8007f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	029b      	lsls	r3, r3, #10
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	e01a      	b.n	8007fe4 <USB_ActivateEndpoint+0x6ac>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d116      	bne.n	8007fe4 <USB_ActivateEndpoint+0x6ac>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc6:	4413      	add	r3, r2
 8007fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	00da      	lsls	r2, r3, #3
 8007fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe2:	801a      	strh	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d16b      	bne.n	80080c8 <USB_ActivateEndpoint+0x790>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008000:	4413      	add	r3, r2
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	00da      	lsls	r2, r3, #3
 800800a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800c:	4413      	add	r3, r2
 800800e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800801e:	b29a      	uxth	r2, r3
 8008020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <USB_ActivateEndpoint+0x70a>
 800802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803a:	b29a      	uxth	r2, r3
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e05b      	b.n	80080fa <USB_ActivateEndpoint+0x7c2>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b3e      	cmp	r3, #62	@ 0x3e
 8008048:	d81c      	bhi.n	8008084 <USB_ActivateEndpoint+0x74c>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <USB_ActivateEndpoint+0x732>
 8008060:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008064:	3301      	adds	r3, #1
 8008066:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29b      	uxth	r3, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e03a      	b.n	80080fa <USB_ActivateEndpoint+0x7c2>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <USB_ActivateEndpoint+0x76c>
 800809a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800809e:	3b01      	subs	r3, #1
 80080a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	e018      	b.n	80080fa <USB_ActivateEndpoint+0x7c2>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d114      	bne.n	80080fa <USB_ActivateEndpoint+0x7c2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080dc:	4413      	add	r3, r2
 80080de:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	00da      	lsls	r2, r3, #3
 80080e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e8:	4413      	add	r3, r2
 80080ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800810c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008110:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008112:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008114:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008118:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800811a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800811c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008120:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	441a      	add	r2, r3
 800812c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008158:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800816a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800816e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008176:	b29b      	uxth	r3, r3
 8008178:	8013      	strh	r3, [r2, #0]
 800817a:	e0bc      	b.n	80082f6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800818c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01d      	beq.n	80081d4 <USB_ActivateEndpoint+0x89c>
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	441a      	add	r2, r3
 80081bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80081c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80081e4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01d      	beq.n	800822c <USB_ActivateEndpoint+0x8f4>
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008206:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	441a      	add	r2, r3
 8008214:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800821c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008224:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008228:	b29b      	uxth	r3, r3
 800822a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	78db      	ldrb	r3, [r3, #3]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d024      	beq.n	800827e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800824a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800824e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008252:	f083 0320 	eor.w	r3, r3, #32
 8008256:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	441a      	add	r2, r3
 8008264:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800826c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008278:	b29b      	uxth	r3, r3
 800827a:	8013      	strh	r3, [r2, #0]
 800827c:	e01d      	b.n	80082ba <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008294:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80082a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	441a      	add	r2, r3
 80082de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80082f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	379c      	adds	r7, #156	@ 0x9c
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008308:	b480      	push	{r7}
 800830a:	b08d      	sub	sp, #52	@ 0x34
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	7b1b      	ldrb	r3, [r3, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 808e 	bne.w	8008438 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d044      	beq.n	80083ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	81bb      	strh	r3, [r7, #12]
 8008332:	89bb      	ldrh	r3, [r7, #12]
 8008334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01b      	beq.n	8008374 <USB_DeactivateEndpoint+0x6c>
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	817b      	strh	r3, [r7, #10]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	897b      	ldrh	r3, [r7, #10]
 8008360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800836c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008370:	b29b      	uxth	r3, r3
 8008372:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800838a:	813b      	strh	r3, [r7, #8]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	441a      	add	r2, r3
 8008396:	893b      	ldrh	r3, [r7, #8]
 8008398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800839c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	8013      	strh	r3, [r2, #0]
 80083ac:	e192      	b.n	80086d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	827b      	strh	r3, [r7, #18]
 80083bc:	8a7b      	ldrh	r3, [r7, #18]
 80083be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d01b      	beq.n	80083fe <USB_DeactivateEndpoint+0xf6>
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083dc:	823b      	strh	r3, [r7, #16]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	441a      	add	r2, r3
 80083e8:	8a3b      	ldrh	r3, [r7, #16]
 80083ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008414:	81fb      	strh	r3, [r7, #14]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800842a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800842e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008432:	b29b      	uxth	r3, r3
 8008434:	8013      	strh	r3, [r2, #0]
 8008436:	e14d      	b.n	80086d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 80a5 	bne.w	800858c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	843b      	strh	r3, [r7, #32]
 8008450:	8c3b      	ldrh	r3, [r7, #32]
 8008452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01b      	beq.n	8008492 <USB_DeactivateEndpoint+0x18a>
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800846c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008470:	83fb      	strh	r3, [r7, #30]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	441a      	add	r2, r3
 800847c:	8bfb      	ldrh	r3, [r7, #30]
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008486:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800848a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	83bb      	strh	r3, [r7, #28]
 80084a0:	8bbb      	ldrh	r3, [r7, #28]
 80084a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01b      	beq.n	80084e2 <USB_DeactivateEndpoint+0x1da>
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c0:	837b      	strh	r3, [r7, #26]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	441a      	add	r2, r3
 80084cc:	8b7b      	ldrh	r3, [r7, #26]
 80084ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084de:	b29b      	uxth	r3, r3
 80084e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f8:	833b      	strh	r3, [r7, #24]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	441a      	add	r2, r3
 8008504:	8b3b      	ldrh	r3, [r7, #24]
 8008506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800850e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008512:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008516:	b29b      	uxth	r3, r3
 8008518:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800852c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008530:	82fb      	strh	r3, [r7, #22]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	8afb      	ldrh	r3, [r7, #22]
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800854a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008568:	82bb      	strh	r3, [r7, #20]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	8abb      	ldrh	r3, [r7, #20]
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]
 800858a:	e0a3      	b.n	80086d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800859a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800859c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01b      	beq.n	80085dc <USB_DeactivateEndpoint+0x2d4>
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80085ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80085ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01b      	beq.n	800862c <USB_DeactivateEndpoint+0x324>
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	441a      	add	r2, r3
 8008616:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800861c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008624:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008628:	b29b      	uxth	r3, r3
 800862a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800863e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008642:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800865c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008660:	b29b      	uxth	r3, r3
 8008662:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800867a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	441a      	add	r2, r3
 8008686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800868c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008698:	b29b      	uxth	r3, r3
 800869a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3734      	adds	r7, #52	@ 0x34
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b0ac      	sub	sp, #176	@ 0xb0
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	f040 84ca 	bne.w	800908a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d904      	bls.n	800870c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800870a:	e003      	b.n	8008714 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	7b1b      	ldrb	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d122      	bne.n	8008762 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6959      	ldr	r1, [r3, #20]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	88da      	ldrh	r2, [r3, #6]
 8008724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008728:	b29b      	uxth	r3, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fede 	bl	80094ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800873a:	b29b      	uxth	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	4413      	add	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	00da      	lsls	r2, r3, #3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4413      	add	r3, r2
 800874e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	f000 bc6f 	b.w	8009040 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	78db      	ldrb	r3, [r3, #3]
 8008766:	2b02      	cmp	r3, #2
 8008768:	f040 831e 	bne.w	8008da8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	6a1a      	ldr	r2, [r3, #32]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	429a      	cmp	r2, r3
 8008776:	f240 82cf 	bls.w	8008d18 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800878c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008790:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80087a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80087ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 814f 	beq.w	8008a7a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	633b      	str	r3, [r7, #48]	@ 0x30
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d16b      	bne.n	80088c0 <USB_EPStartXfer+0x1de>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	4413      	add	r3, r2
 80087fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	00da      	lsls	r2, r3, #3
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	4413      	add	r3, r2
 8008806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800880a:	627b      	str	r3, [r7, #36]	@ 0x24
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008816:	b29a      	uxth	r2, r3
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	801a      	strh	r2, [r3, #0]
 800881c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <USB_EPStartXfer+0x158>
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008832:	b29a      	uxth	r2, r3
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	e05b      	b.n	80088f2 <USB_EPStartXfer+0x210>
 800883a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800883e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008840:	d81c      	bhi.n	800887c <USB_EPStartXfer+0x19a>
 8008842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008846:	085b      	lsrs	r3, r3, #1
 8008848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800884c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <USB_EPStartXfer+0x180>
 8008858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800885c:	3301      	adds	r3, #1
 800885e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29a      	uxth	r2, r3
 8008868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800886c:	b29b      	uxth	r3, r3
 800886e:	029b      	lsls	r3, r3, #10
 8008870:	b29b      	uxth	r3, r3
 8008872:	4313      	orrs	r3, r2
 8008874:	b29a      	uxth	r2, r3
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	801a      	strh	r2, [r3, #0]
 800887a:	e03a      	b.n	80088f2 <USB_EPStartXfer+0x210>
 800887c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <USB_EPStartXfer+0x1ba>
 8008892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008896:	3b01      	subs	r3, #1
 8008898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	029b      	lsls	r3, r3, #10
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4313      	orrs	r3, r2
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	801a      	strh	r2, [r3, #0]
 80088be:	e018      	b.n	80088f2 <USB_EPStartXfer+0x210>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d114      	bne.n	80088f2 <USB_EPStartXfer+0x210>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	4413      	add	r3, r2
 80088d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	00da      	lsls	r2, r3, #3
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	4413      	add	r3, r2
 80088e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	895b      	ldrh	r3, [r3, #10]
 80088f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	6959      	ldr	r1, [r3, #20]
 80088fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008902:	b29b      	uxth	r3, r3
 8008904:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fdef 	bl	80094ec <USB_WritePMA>
            ep->xfer_buff += len;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	695a      	ldr	r2, [r3, #20]
 8008912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008916:	441a      	add	r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	6a1a      	ldr	r2, [r3, #32]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	429a      	cmp	r2, r3
 8008926:	d907      	bls.n	8008938 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	6a1a      	ldr	r2, [r3, #32]
 800892c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	621a      	str	r2, [r3, #32]
 8008936:	e006      	b.n	8008946 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d16b      	bne.n	8008a26 <USB_EPStartXfer+0x344>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008958:	b29b      	uxth	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	4413      	add	r3, r2
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	00da      	lsls	r2, r3, #3
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	4413      	add	r3, r2
 800896c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800897c:	b29a      	uxth	r2, r3
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <USB_EPStartXfer+0x2be>
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008998:	b29a      	uxth	r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	e05d      	b.n	8008a5c <USB_EPStartXfer+0x37a>
 80089a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80089a6:	d81c      	bhi.n	80089e2 <USB_EPStartXfer+0x300>
 80089a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <USB_EPStartXfer+0x2e6>
 80089be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089c2:	3301      	adds	r3, #1
 80089c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4313      	orrs	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	801a      	strh	r2, [r3, #0]
 80089e0:	e03c      	b.n	8008a5c <USB_EPStartXfer+0x37a>
 80089e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089f0:	f003 031f 	and.w	r3, r3, #31
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d104      	bne.n	8008a02 <USB_EPStartXfer+0x320>
 80089f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089fc:	3b01      	subs	r3, #1
 80089fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	029b      	lsls	r3, r3, #10
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	4313      	orrs	r3, r2
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	e01a      	b.n	8008a5c <USB_EPStartXfer+0x37a>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d116      	bne.n	8008a5c <USB_EPStartXfer+0x37a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	623b      	str	r3, [r7, #32]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	4413      	add	r3, r2
 8008a40:	623b      	str	r3, [r7, #32]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	00da      	lsls	r2, r3, #3
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a50:	61fb      	str	r3, [r7, #28]
 8008a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	891b      	ldrh	r3, [r3, #8]
 8008a60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	6959      	ldr	r1, [r3, #20]
 8008a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fd3a 	bl	80094ec <USB_WritePMA>
 8008a78:	e2e2      	b.n	8009040 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d16b      	bne.n	8008b5a <USB_EPStartXfer+0x478>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a92:	4413      	add	r3, r2
 8008a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	00da      	lsls	r2, r3, #3
 8008a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <USB_EPStartXfer+0x3f2>
 8008abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e05d      	b.n	8008b90 <USB_EPStartXfer+0x4ae>
 8008ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ad8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ada:	d81c      	bhi.n	8008b16 <USB_EPStartXfer+0x434>
 8008adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <USB_EPStartXfer+0x41a>
 8008af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008af6:	3301      	adds	r3, #1
 8008af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	029b      	lsls	r3, r3, #10
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	e03c      	b.n	8008b90 <USB_EPStartXfer+0x4ae>
 8008b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <USB_EPStartXfer+0x454>
 8008b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b30:	3b01      	subs	r3, #1
 8008b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	e01a      	b.n	8008b90 <USB_EPStartXfer+0x4ae>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d116      	bne.n	8008b90 <USB_EPStartXfer+0x4ae>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b72:	4413      	add	r3, r2
 8008b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	00da      	lsls	r2, r3, #3
 8008b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b7e:	4413      	add	r3, r2
 8008b80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	891b      	ldrh	r3, [r3, #8]
 8008b94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	6959      	ldr	r1, [r3, #20]
 8008b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fca0 	bl	80094ec <USB_WritePMA>
            ep->xfer_buff += len;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	695a      	ldr	r2, [r3, #20]
 8008bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bb4:	441a      	add	r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d907      	bls.n	8008bd6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6a1a      	ldr	r2, [r3, #32]
 8008bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	621a      	str	r2, [r3, #32]
 8008bd4:	e006      	b.n	8008be4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2200      	movs	r2, #0
 8008be2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d16b      	bne.n	8008cc8 <USB_EPStartXfer+0x5e6>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	4413      	add	r3, r2
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	00da      	lsls	r2, r3, #3
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <USB_EPStartXfer+0x560>
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3e:	801a      	strh	r2, [r3, #0]
 8008c40:	e05b      	b.n	8008cfa <USB_EPStartXfer+0x618>
 8008c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c48:	d81c      	bhi.n	8008c84 <USB_EPStartXfer+0x5a2>
 8008c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <USB_EPStartXfer+0x588>
 8008c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c64:	3301      	adds	r3, #1
 8008c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	029b      	lsls	r3, r3, #10
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	e03a      	b.n	8008cfa <USB_EPStartXfer+0x618>
 8008c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c88:	095b      	lsrs	r3, r3, #5
 8008c8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c92:	f003 031f 	and.w	r3, r3, #31
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <USB_EPStartXfer+0x5c2>
 8008c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	029b      	lsls	r3, r3, #10
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	e018      	b.n	8008cfa <USB_EPStartXfer+0x618>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d114      	bne.n	8008cfa <USB_EPStartXfer+0x618>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cdc:	4413      	add	r3, r2
 8008cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	00da      	lsls	r2, r3, #3
 8008ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ce8:	4413      	add	r3, r2
 8008cea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	6959      	ldr	r1, [r3, #20]
 8008d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fbeb 	bl	80094ec <USB_WritePMA>
 8008d16:	e193      	b.n	8009040 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d36:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	441a      	add	r2, r3
 8008d44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d6c:	4413      	add	r3, r2
 8008d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	00da      	lsls	r2, r3, #3
 8008d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d78:	4413      	add	r3, r2
 8008d7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	891b      	ldrh	r3, [r3, #8]
 8008d8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6959      	ldr	r1, [r3, #20]
 8008d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fba3 	bl	80094ec <USB_WritePMA>
 8008da6:	e14b      	b.n	8009040 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008db0:	1ad2      	subs	r2, r2, r3
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 809a 	beq.w	8008f02 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d16b      	bne.n	8008eb2 <USB_EPStartXfer+0x7d0>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	461a      	mov	r2, r3
 8008de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dea:	4413      	add	r3, r2
 8008dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	00da      	lsls	r2, r3, #3
 8008df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df6:	4413      	add	r3, r2
 8008df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <USB_EPStartXfer+0x74a>
 8008e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e28:	801a      	strh	r2, [r3, #0]
 8008e2a:	e05b      	b.n	8008ee4 <USB_EPStartXfer+0x802>
 8008e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e32:	d81c      	bhi.n	8008e6e <USB_EPStartXfer+0x78c>
 8008e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e38:	085b      	lsrs	r3, r3, #1
 8008e3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <USB_EPStartXfer+0x772>
 8008e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e4e:	3301      	adds	r3, #1
 8008e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	029b      	lsls	r3, r3, #10
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4313      	orrs	r3, r2
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e6a:	801a      	strh	r2, [r3, #0]
 8008e6c:	e03a      	b.n	8008ee4 <USB_EPStartXfer+0x802>
 8008e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <USB_EPStartXfer+0x7ac>
 8008e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	029b      	lsls	r3, r3, #10
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	e018      	b.n	8008ee4 <USB_EPStartXfer+0x802>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d114      	bne.n	8008ee4 <USB_EPStartXfer+0x802>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ec6:	4413      	add	r3, r2
 8008ec8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	00da      	lsls	r2, r3, #3
 8008ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ed8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ee2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	895b      	ldrh	r3, [r3, #10]
 8008ee8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	6959      	ldr	r1, [r3, #20]
 8008ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 faf6 	bl	80094ec <USB_WritePMA>
 8008f00:	e09e      	b.n	8009040 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d16b      	bne.n	8008fe2 <USB_EPStartXfer+0x900>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	461a      	mov	r2, r3
 8008f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f1a:	4413      	add	r3, r2
 8008f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	00da      	lsls	r2, r3, #3
 8008f24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f26:	4413      	add	r3, r2
 8008f28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f3c:	801a      	strh	r2, [r3, #0]
 8008f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <USB_EPStartXfer+0x87a>
 8008f46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	e063      	b.n	8009024 <USB_EPStartXfer+0x942>
 8008f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f60:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f62:	d81c      	bhi.n	8008f9e <USB_EPStartXfer+0x8bc>
 8008f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f68:	085b      	lsrs	r3, r3, #1
 8008f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d004      	beq.n	8008f84 <USB_EPStartXfer+0x8a2>
 8008f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f7e:	3301      	adds	r3, #1
 8008f80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	029b      	lsls	r3, r3, #10
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4313      	orrs	r3, r2
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	e042      	b.n	8009024 <USB_EPStartXfer+0x942>
 8008f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d104      	bne.n	8008fbe <USB_EPStartXfer+0x8dc>
 8008fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	029b      	lsls	r3, r3, #10
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	e020      	b.n	8009024 <USB_EPStartXfer+0x942>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d11c      	bne.n	8009024 <USB_EPStartXfer+0x942>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ffe:	4413      	add	r3, r2
 8009000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	00da      	lsls	r2, r3, #3
 800900a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800900e:	4413      	add	r3, r2
 8009010:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901c:	b29a      	uxth	r2, r3
 800901e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009022:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	891b      	ldrh	r3, [r3, #8]
 8009028:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	6959      	ldr	r1, [r3, #20]
 8009030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009034:	b29b      	uxth	r3, r3
 8009036:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa56 	bl	80094ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	b29b      	uxth	r3, r3
 800904e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009056:	817b      	strh	r3, [r7, #10]
 8009058:	897b      	ldrh	r3, [r7, #10]
 800905a:	f083 0310 	eor.w	r3, r3, #16
 800905e:	817b      	strh	r3, [r7, #10]
 8009060:	897b      	ldrh	r3, [r7, #10]
 8009062:	f083 0320 	eor.w	r3, r3, #32
 8009066:	817b      	strh	r3, [r7, #10]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	441a      	add	r2, r3
 8009072:	897b      	ldrh	r3, [r7, #10]
 8009074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800907c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009084:	b29b      	uxth	r3, r3
 8009086:	8013      	strh	r3, [r2, #0]
 8009088:	e0d5      	b.n	8009236 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	7b1b      	ldrb	r3, [r3, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d156      	bne.n	8009140 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d122      	bne.n	80090e0 <USB_EPStartXfer+0x9fe>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	78db      	ldrb	r3, [r3, #3]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d11e      	bne.n	80090e0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	441a      	add	r2, r3
 80090c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80090ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80090d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090da:	b29b      	uxth	r3, r3
 80090dc:	8013      	strh	r3, [r2, #0]
 80090de:	e01d      	b.n	800911c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80090f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	441a      	add	r2, r3
 8009104:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800910c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009118:	b29b      	uxth	r3, r3
 800911a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	699a      	ldr	r2, [r3, #24]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	429a      	cmp	r2, r3
 8009126:	d907      	bls.n	8009138 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	699a      	ldr	r2, [r3, #24]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	619a      	str	r2, [r3, #24]
 8009136:	e054      	b.n	80091e2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2200      	movs	r2, #0
 800913c:	619a      	str	r2, [r3, #24]
 800913e:	e050      	b.n	80091e2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	78db      	ldrb	r3, [r3, #3]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d142      	bne.n	80091ce <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d048      	beq.n	80091e2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009160:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <USB_EPStartXfer+0xa96>
 800916c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009178:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800917c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009180:	2b00      	cmp	r3, #0
 8009182:	d12e      	bne.n	80091e2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009184:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d128      	bne.n	80091e2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	441a      	add	r2, r3
 80091b4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80091b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	8013      	strh	r3, [r2, #0]
 80091cc:	e009      	b.n	80091e2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	78db      	ldrb	r3, [r3, #3]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d103      	bne.n	80091de <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	619a      	str	r2, [r3, #24]
 80091dc:	e001      	b.n	80091e2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e02a      	b.n	8009238 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80091fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009200:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009204:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009208:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800920c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009210:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	441a      	add	r2, r3
 800921e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800922a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800922e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009232:	b29b      	uxth	r3, r3
 8009234:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	37b0      	adds	r7, #176	@ 0xb0
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d020      	beq.n	8009294 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009268:	81bb      	strh	r3, [r7, #12]
 800926a:	89bb      	ldrh	r3, [r7, #12]
 800926c:	f083 0310 	eor.w	r3, r3, #16
 8009270:	81bb      	strh	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	441a      	add	r2, r3
 800927c:	89bb      	ldrh	r3, [r7, #12]
 800927e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009282:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800928a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800928e:	b29b      	uxth	r3, r3
 8009290:	8013      	strh	r3, [r2, #0]
 8009292:	e01f      	b.n	80092d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092aa:	81fb      	strh	r3, [r7, #14]
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80092b2:	81fb      	strh	r3, [r7, #14]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	89fb      	ldrh	r3, [r7, #14]
 80092c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b087      	sub	sp, #28
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d04c      	beq.n	800938e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	823b      	strh	r3, [r7, #16]
 8009302:	8a3b      	ldrh	r3, [r7, #16]
 8009304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01b      	beq.n	8009344 <USB_EPClearStall+0x62>
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800931e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009322:	81fb      	strh	r3, [r7, #14]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	441a      	add	r2, r3
 800932e:	89fb      	ldrh	r3, [r7, #14]
 8009330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800933c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009340:	b29b      	uxth	r3, r3
 8009342:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	78db      	ldrb	r3, [r3, #3]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d06c      	beq.n	8009426 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29b      	uxth	r3, r3
 800935a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800935e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009362:	81bb      	strh	r3, [r7, #12]
 8009364:	89bb      	ldrh	r3, [r7, #12]
 8009366:	f083 0320 	eor.w	r3, r3, #32
 800936a:	81bb      	strh	r3, [r7, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	89bb      	ldrh	r3, [r7, #12]
 8009378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800937c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009388:	b29b      	uxth	r3, r3
 800938a:	8013      	strh	r3, [r2, #0]
 800938c:	e04b      	b.n	8009426 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	82fb      	strh	r3, [r7, #22]
 800939c:	8afb      	ldrh	r3, [r7, #22]
 800939e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01b      	beq.n	80093de <USB_EPClearStall+0xfc>
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093bc:	82bb      	strh	r3, [r7, #20]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	441a      	add	r2, r3
 80093c8:	8abb      	ldrh	r3, [r7, #20]
 80093ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093da:	b29b      	uxth	r3, r3
 80093dc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f4:	827b      	strh	r3, [r7, #18]
 80093f6:	8a7b      	ldrh	r3, [r7, #18]
 80093f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80093fc:	827b      	strh	r3, [r7, #18]
 80093fe:	8a7b      	ldrh	r3, [r7, #18]
 8009400:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009404:	827b      	strh	r3, [r7, #18]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	441a      	add	r2, r3
 8009410:	8a7b      	ldrh	r3, [r7, #18]
 8009412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800941a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800941e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009422:	b29b      	uxth	r3, r3
 8009424:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d103      	bne.n	800944e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2280      	movs	r2, #128	@ 0x80
 800944a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800946a:	b29b      	uxth	r3, r3
 800946c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009474:	b29a      	uxth	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009498:	b29b      	uxth	r3, r3
 800949a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80094c6:	68fb      	ldr	r3, [r7, #12]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b08b      	sub	sp, #44	@ 0x2c
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4611      	mov	r1, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	460b      	mov	r3, r1
 80094fc:	80fb      	strh	r3, [r7, #6]
 80094fe:	4613      	mov	r3, r2
 8009500:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009502:	88bb      	ldrh	r3, [r7, #4]
 8009504:	3301      	adds	r3, #1
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009512:	88fa      	ldrh	r2, [r7, #6]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800951c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
 8009522:	e01b      	b.n	800955c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	3301      	adds	r3, #1
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	b21a      	sxth	r2, r3
 8009534:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009538:	4313      	orrs	r3, r2
 800953a:	b21b      	sxth	r3, r3
 800953c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	8a7a      	ldrh	r2, [r7, #18]
 8009542:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	3302      	adds	r3, #2
 8009548:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	3301      	adds	r3, #1
 800954e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009558:	3b01      	subs	r3, #1
 800955a:	627b      	str	r3, [r7, #36]	@ 0x24
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e0      	bne.n	8009524 <USB_WritePMA+0x38>
  }
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	372c      	adds	r7, #44	@ 0x2c
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009570:	b480      	push	{r7}
 8009572:	b08b      	sub	sp, #44	@ 0x2c
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4611      	mov	r1, r2
 800957c:	461a      	mov	r2, r3
 800957e:	460b      	mov	r3, r1
 8009580:	80fb      	strh	r3, [r7, #6]
 8009582:	4613      	mov	r3, r2
 8009584:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009586:	88bb      	ldrh	r3, [r7, #4]
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	b29b      	uxth	r3, r3
 800958c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a6:	e018      	b.n	80095da <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	3302      	adds	r3, #2
 80095b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	3301      	adds	r3, #1
 80095c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	3301      	adds	r3, #1
 80095d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d6:	3b01      	subs	r3, #1
 80095d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e3      	bne.n	80095a8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80095e0:	88bb      	ldrh	r3, [r7, #4]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	701a      	strb	r2, [r3, #0]
  }
}
 80095fc:	bf00      	nop
 80095fe:	372c      	adds	r7, #44	@ 0x2c
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009614:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009618:	f002 fd14 	bl	800c044 <USBD_static_malloc>
 800961c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d109      	bne.n	8009638 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	32b0      	adds	r2, #176	@ 0xb0
 800962e:	2100      	movs	r1, #0
 8009630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009634:	2302      	movs	r3, #2
 8009636:	e0d4      	b.n	80097e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009638:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800963c:	2100      	movs	r1, #0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f002 fd1e 	bl	800c080 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32b0      	adds	r2, #176	@ 0xb0
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	32b0      	adds	r2, #176	@ 0xb0
 800965e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	7c1b      	ldrb	r3, [r3, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d138      	bne.n	80096e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009670:	4b5e      	ldr	r3, [pc, #376]	@ (80097ec <USBD_CDC_Init+0x1e4>)
 8009672:	7819      	ldrb	r1, [r3, #0]
 8009674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009678:	2202      	movs	r2, #2
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f002 fae6 	bl	800bc4c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009680:	4b5a      	ldr	r3, [pc, #360]	@ (80097ec <USBD_CDC_Init+0x1e4>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f003 020f 	and.w	r2, r3, #15
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	3324      	adds	r3, #36	@ 0x24
 8009696:	2201      	movs	r2, #1
 8009698:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800969a:	4b55      	ldr	r3, [pc, #340]	@ (80097f0 <USBD_CDC_Init+0x1e8>)
 800969c:	7819      	ldrb	r1, [r3, #0]
 800969e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096a2:	2202      	movs	r2, #2
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 fad1 	bl	800bc4c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096aa:	4b51      	ldr	r3, [pc, #324]	@ (80097f0 <USBD_CDC_Init+0x1e8>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	f003 020f 	and.w	r2, r3, #15
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096c2:	2201      	movs	r2, #1
 80096c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80096c6:	4b4b      	ldr	r3, [pc, #300]	@ (80097f4 <USBD_CDC_Init+0x1ec>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	f003 020f 	and.w	r2, r3, #15
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	3326      	adds	r3, #38	@ 0x26
 80096dc:	2210      	movs	r2, #16
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	e035      	b.n	800974e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096e2:	4b42      	ldr	r3, [pc, #264]	@ (80097ec <USBD_CDC_Init+0x1e4>)
 80096e4:	7819      	ldrb	r1, [r3, #0]
 80096e6:	2340      	movs	r3, #64	@ 0x40
 80096e8:	2202      	movs	r2, #2
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f002 faae 	bl	800bc4c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096f0:	4b3e      	ldr	r3, [pc, #248]	@ (80097ec <USBD_CDC_Init+0x1e4>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 020f 	and.w	r2, r3, #15
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3324      	adds	r3, #36	@ 0x24
 8009706:	2201      	movs	r2, #1
 8009708:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800970a:	4b39      	ldr	r3, [pc, #228]	@ (80097f0 <USBD_CDC_Init+0x1e8>)
 800970c:	7819      	ldrb	r1, [r3, #0]
 800970e:	2340      	movs	r3, #64	@ 0x40
 8009710:	2202      	movs	r2, #2
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f002 fa9a 	bl	800bc4c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009718:	4b35      	ldr	r3, [pc, #212]	@ (80097f0 <USBD_CDC_Init+0x1e8>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f003 020f 	and.w	r2, r3, #15
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	4613      	mov	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	440b      	add	r3, r1
 800972c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009730:	2201      	movs	r2, #1
 8009732:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009734:	4b2f      	ldr	r3, [pc, #188]	@ (80097f4 <USBD_CDC_Init+0x1ec>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f003 020f 	and.w	r2, r3, #15
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	3326      	adds	r3, #38	@ 0x26
 800974a:	2210      	movs	r2, #16
 800974c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800974e:	4b29      	ldr	r3, [pc, #164]	@ (80097f4 <USBD_CDC_Init+0x1ec>)
 8009750:	7819      	ldrb	r1, [r3, #0]
 8009752:	2308      	movs	r3, #8
 8009754:	2203      	movs	r2, #3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f002 fa78 	bl	800bc4c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800975c:	4b25      	ldr	r3, [pc, #148]	@ (80097f4 <USBD_CDC_Init+0x1ec>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 020f 	and.w	r2, r3, #15
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	440b      	add	r3, r1
 8009770:	3324      	adds	r3, #36	@ 0x24
 8009772:	2201      	movs	r2, #1
 8009774:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	33b0      	adds	r3, #176	@ 0xb0
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80097ac:	2302      	movs	r3, #2
 80097ae:	e018      	b.n	80097e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7c1b      	ldrb	r3, [r3, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097b8:	4b0d      	ldr	r3, [pc, #52]	@ (80097f0 <USBD_CDC_Init+0x1e8>)
 80097ba:	7819      	ldrb	r1, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f002 fbba 	bl	800bf40 <USBD_LL_PrepareReceive>
 80097cc:	e008      	b.n	80097e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097ce:	4b08      	ldr	r3, [pc, #32]	@ (80097f0 <USBD_CDC_Init+0x1e8>)
 80097d0:	7819      	ldrb	r1, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097d8:	2340      	movs	r3, #64	@ 0x40
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f002 fbb0 	bl	800bf40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20000a17 	.word	0x20000a17
 80097f0:	20000a18 	.word	0x20000a18
 80097f4:	20000a19 	.word	0x20000a19

080097f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009804:	4b3a      	ldr	r3, [pc, #232]	@ (80098f0 <USBD_CDC_DeInit+0xf8>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f002 fa5c 	bl	800bcc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009810:	4b37      	ldr	r3, [pc, #220]	@ (80098f0 <USBD_CDC_DeInit+0xf8>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3324      	adds	r3, #36	@ 0x24
 8009826:	2200      	movs	r2, #0
 8009828:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800982a:	4b32      	ldr	r3, [pc, #200]	@ (80098f4 <USBD_CDC_DeInit+0xfc>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f002 fa49 	bl	800bcc8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009836:	4b2f      	ldr	r3, [pc, #188]	@ (80098f4 <USBD_CDC_DeInit+0xfc>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	f003 020f 	and.w	r2, r3, #15
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800984e:	2200      	movs	r2, #0
 8009850:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009852:	4b29      	ldr	r3, [pc, #164]	@ (80098f8 <USBD_CDC_DeInit+0x100>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f002 fa35 	bl	800bcc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800985e:	4b26      	ldr	r3, [pc, #152]	@ (80098f8 <USBD_CDC_DeInit+0x100>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	f003 020f 	and.w	r2, r3, #15
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	3324      	adds	r3, #36	@ 0x24
 8009874:	2200      	movs	r2, #0
 8009876:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009878:	4b1f      	ldr	r3, [pc, #124]	@ (80098f8 <USBD_CDC_DeInit+0x100>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	f003 020f 	and.w	r2, r3, #15
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	440b      	add	r3, r1
 800988c:	3326      	adds	r3, #38	@ 0x26
 800988e:	2200      	movs	r2, #0
 8009890:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	32b0      	adds	r2, #176	@ 0xb0
 800989c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01f      	beq.n	80098e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	33b0      	adds	r3, #176	@ 0xb0
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32b0      	adds	r2, #176	@ 0xb0
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f002 fbca 	bl	800c060 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	32b0      	adds	r2, #176	@ 0xb0
 80098d6:	2100      	movs	r1, #0
 80098d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20000a17 	.word	0x20000a17
 80098f4:	20000a18 	.word	0x20000a18
 80098f8:	20000a19 	.word	0x20000a19

080098fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	32b0      	adds	r2, #176	@ 0xb0
 8009910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009914:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009928:	2303      	movs	r3, #3
 800992a:	e0bf      	b.n	8009aac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009934:	2b00      	cmp	r3, #0
 8009936:	d050      	beq.n	80099da <USBD_CDC_Setup+0xde>
 8009938:	2b20      	cmp	r3, #32
 800993a:	f040 80af 	bne.w	8009a9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	88db      	ldrh	r3, [r3, #6]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d03a      	beq.n	80099bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	b25b      	sxtb	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	da1b      	bge.n	8009988 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	33b0      	adds	r3, #176	@ 0xb0
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009966:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	88d2      	ldrh	r2, [r2, #6]
 800996c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	2b07      	cmp	r3, #7
 8009974:	bf28      	it	cs
 8009976:	2307      	movcs	r3, #7
 8009978:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	89fa      	ldrh	r2, [r7, #14]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 fd2b 	bl	800b3dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009986:	e090      	b.n	8009aaa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	785a      	ldrb	r2, [r3, #1]
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	88db      	ldrh	r3, [r3, #6]
 8009996:	2b3f      	cmp	r3, #63	@ 0x3f
 8009998:	d803      	bhi.n	80099a2 <USBD_CDC_Setup+0xa6>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	88db      	ldrh	r3, [r3, #6]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	e000      	b.n	80099a4 <USBD_CDC_Setup+0xa8>
 80099a2:	2240      	movs	r2, #64	@ 0x40
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80099aa:	6939      	ldr	r1, [r7, #16]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80099b2:	461a      	mov	r2, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 fd3d 	bl	800b434 <USBD_CtlPrepareRx>
      break;
 80099ba:	e076      	b.n	8009aaa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	33b0      	adds	r3, #176	@ 0xb0
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	7850      	ldrb	r0, [r2, #1]
 80099d2:	2200      	movs	r2, #0
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	4798      	blx	r3
      break;
 80099d8:	e067      	b.n	8009aaa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b0b      	cmp	r3, #11
 80099e0:	d851      	bhi.n	8009a86 <USBD_CDC_Setup+0x18a>
 80099e2:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <USBD_CDC_Setup+0xec>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a19 	.word	0x08009a19
 80099ec:	08009a95 	.word	0x08009a95
 80099f0:	08009a87 	.word	0x08009a87
 80099f4:	08009a87 	.word	0x08009a87
 80099f8:	08009a87 	.word	0x08009a87
 80099fc:	08009a87 	.word	0x08009a87
 8009a00:	08009a87 	.word	0x08009a87
 8009a04:	08009a87 	.word	0x08009a87
 8009a08:	08009a87 	.word	0x08009a87
 8009a0c:	08009a87 	.word	0x08009a87
 8009a10:	08009a43 	.word	0x08009a43
 8009a14:	08009a6d 	.word	0x08009a6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d107      	bne.n	8009a34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a24:	f107 030a 	add.w	r3, r7, #10
 8009a28:	2202      	movs	r2, #2
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 fcd5 	bl	800b3dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a32:	e032      	b.n	8009a9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fc53 	bl	800b2e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8009a40:	e02b      	b.n	8009a9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d107      	bne.n	8009a5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a4e:	f107 030d 	add.w	r3, r7, #13
 8009a52:	2201      	movs	r2, #1
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 fcc0 	bl	800b3dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a5c:	e01d      	b.n	8009a9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 fc3e 	bl	800b2e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a66:	2303      	movs	r3, #3
 8009a68:	75fb      	strb	r3, [r7, #23]
          break;
 8009a6a:	e016      	b.n	8009a9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d00f      	beq.n	8009a98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 fc31 	bl	800b2e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a84:	e008      	b.n	8009a98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 fc2a 	bl	800b2e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	75fb      	strb	r3, [r7, #23]
          break;
 8009a92:	e002      	b.n	8009a9a <USBD_CDC_Setup+0x19e>
          break;
 8009a94:	bf00      	nop
 8009a96:	e008      	b.n	8009aaa <USBD_CDC_Setup+0x1ae>
          break;
 8009a98:	bf00      	nop
      }
      break;
 8009a9a:	e006      	b.n	8009aaa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 fc1f 	bl	800b2e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	32b0      	adds	r2, #176	@ 0xb0
 8009ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e065      	b.n	8009baa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	32b0      	adds	r2, #176	@ 0xb0
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	f003 020f 	and.w	r2, r3, #15
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	3318      	adds	r3, #24
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d02f      	beq.n	8009b68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	f003 020f 	and.w	r2, r3, #15
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	3318      	adds	r3, #24
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	f003 010f 	and.w	r1, r3, #15
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	460b      	mov	r3, r1
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	440b      	add	r3, r1
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	4403      	add	r3, r0
 8009b30:	3320      	adds	r3, #32
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b38:	fb01 f303 	mul.w	r3, r1, r3
 8009b3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d112      	bne.n	8009b68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	f003 020f 	and.w	r2, r3, #15
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	3318      	adds	r3, #24
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b5a:	78f9      	ldrb	r1, [r7, #3]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	2200      	movs	r2, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f002 f9b5 	bl	800bed0 <USBD_LL_Transmit>
 8009b66:	e01f      	b.n	8009ba8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	33b0      	adds	r3, #176	@ 0xb0
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	33b0      	adds	r3, #176	@ 0xb0
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ba4:	78fa      	ldrb	r2, [r7, #3]
 8009ba6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	32b0      	adds	r2, #176	@ 0xb0
 8009bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	32b0      	adds	r2, #176	@ 0xb0
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e01a      	b.n	8009c1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f002 f9e1 	bl	800bfb0 <USBD_LL_GetRxDataSize>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	33b0      	adds	r3, #176	@ 0xb0
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009c14:	4611      	mov	r1, r2
 8009c16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	32b0      	adds	r2, #176	@ 0xb0
 8009c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e024      	b.n	8009c8e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	33b0      	adds	r3, #176	@ 0xb0
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d019      	beq.n	8009c8c <USBD_CDC_EP0_RxReady+0x6a>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c5e:	2bff      	cmp	r3, #255	@ 0xff
 8009c60:	d014      	beq.n	8009c8c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	33b0      	adds	r3, #176	@ 0xb0
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	22ff      	movs	r2, #255	@ 0xff
 8009c88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ca0:	2182      	movs	r1, #130	@ 0x82
 8009ca2:	4818      	ldr	r0, [pc, #96]	@ (8009d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ca4:	f000 fcbd 	bl	800a622 <USBD_GetEpDesc>
 8009ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009caa:	2101      	movs	r1, #1
 8009cac:	4815      	ldr	r0, [pc, #84]	@ (8009d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cae:	f000 fcb8 	bl	800a622 <USBD_GetEpDesc>
 8009cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cb4:	2181      	movs	r1, #129	@ 0x81
 8009cb6:	4813      	ldr	r0, [pc, #76]	@ (8009d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cb8:	f000 fcb3 	bl	800a622 <USBD_GetEpDesc>
 8009cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2210      	movs	r2, #16
 8009cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d006      	beq.n	8009cde <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cd8:	711a      	strb	r2, [r3, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d006      	beq.n	8009cf2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cec:	711a      	strb	r2, [r3, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2243      	movs	r2, #67	@ 0x43
 8009cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cf8:	4b02      	ldr	r3, [pc, #8]	@ (8009d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200009d4 	.word	0x200009d4

08009d08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d10:	2182      	movs	r1, #130	@ 0x82
 8009d12:	4818      	ldr	r0, [pc, #96]	@ (8009d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d14:	f000 fc85 	bl	800a622 <USBD_GetEpDesc>
 8009d18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	4815      	ldr	r0, [pc, #84]	@ (8009d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d1e:	f000 fc80 	bl	800a622 <USBD_GetEpDesc>
 8009d22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d24:	2181      	movs	r1, #129	@ 0x81
 8009d26:	4813      	ldr	r0, [pc, #76]	@ (8009d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d28:	f000 fc7b 	bl	800a622 <USBD_GetEpDesc>
 8009d2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2210      	movs	r2, #16
 8009d38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d006      	beq.n	8009d4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2200      	movs	r2, #0
 8009d44:	711a      	strb	r2, [r3, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f042 0202 	orr.w	r2, r2, #2
 8009d4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d006      	beq.n	8009d62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	711a      	strb	r2, [r3, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f042 0202 	orr.w	r2, r2, #2
 8009d60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2243      	movs	r2, #67	@ 0x43
 8009d66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d68:	4b02      	ldr	r3, [pc, #8]	@ (8009d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	200009d4 	.word	0x200009d4

08009d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d80:	2182      	movs	r1, #130	@ 0x82
 8009d82:	4818      	ldr	r0, [pc, #96]	@ (8009de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d84:	f000 fc4d 	bl	800a622 <USBD_GetEpDesc>
 8009d88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4815      	ldr	r0, [pc, #84]	@ (8009de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d8e:	f000 fc48 	bl	800a622 <USBD_GetEpDesc>
 8009d92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d94:	2181      	movs	r1, #129	@ 0x81
 8009d96:	4813      	ldr	r0, [pc, #76]	@ (8009de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d98:	f000 fc43 	bl	800a622 <USBD_GetEpDesc>
 8009d9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2210      	movs	r2, #16
 8009da8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009db8:	711a      	strb	r2, [r3, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d006      	beq.n	8009dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dcc:	711a      	strb	r2, [r3, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2243      	movs	r2, #67	@ 0x43
 8009dd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dd8:	4b02      	ldr	r3, [pc, #8]	@ (8009de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200009d4 	.word	0x200009d4

08009de8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	220a      	movs	r2, #10
 8009df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009df6:	4b03      	ldr	r3, [pc, #12]	@ (8009e04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	20000990 	.word	0x20000990

08009e08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e009      	b.n	8009e30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	33b0      	adds	r3, #176	@ 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	32b0      	adds	r2, #176	@ 0xb0
 8009e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e008      	b.n	8009e74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	32b0      	adds	r2, #176	@ 0xb0
 8009e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e004      	b.n	8009eae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	32b0      	adds	r2, #176	@ 0xb0
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e025      	b.n	8009f2e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d11f      	bne.n	8009f2c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009ef4:	4b10      	ldr	r3, [pc, #64]	@ (8009f38 <USBD_CDC_TransmitPacket+0x7c>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 020f 	and.w	r2, r3, #15
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4403      	add	r3, r0
 8009f0e:	3318      	adds	r3, #24
 8009f10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009f12:	4b09      	ldr	r3, [pc, #36]	@ (8009f38 <USBD_CDC_TransmitPacket+0x7c>)
 8009f14:	7819      	ldrb	r1, [r3, #0]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f001 ffd4 	bl	800bed0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000a17 	.word	0x20000a17

08009f3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32b0      	adds	r2, #176	@ 0xb0
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	@ 0xb0
 8009f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e018      	b.n	8009f9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	7c1b      	ldrb	r3, [r3, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f72:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa4 <USBD_CDC_ReceivePacket+0x68>)
 8009f74:	7819      	ldrb	r1, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 ffdd 	bl	800bf40 <USBD_LL_PrepareReceive>
 8009f86:	e008      	b.n	8009f9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f88:	4b06      	ldr	r3, [pc, #24]	@ (8009fa4 <USBD_CDC_ReceivePacket+0x68>)
 8009f8a:	7819      	ldrb	r1, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f92:	2340      	movs	r3, #64	@ 0x40
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 ffd3 	bl	800bf40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20000a18 	.word	0x20000a18

08009fa8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e01f      	b.n	800a000 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	79fa      	ldrb	r2, [r7, #7]
 8009ff2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f001 fd95 	bl	800bb24 <USBD_LL_Init>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e025      	b.n	800a06c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32ae      	adds	r2, #174	@ 0xae
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00f      	beq.n	800a05c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	32ae      	adds	r2, #174	@ 0xae
 800a046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04c:	f107 020e 	add.w	r2, r7, #14
 800a050:	4610      	mov	r0, r2
 800a052:	4798      	blx	r3
 800a054:	4602      	mov	r2, r0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 fdb3 	bl	800bbe8 <USBD_LL_Start>
 800a082:	4603      	mov	r3, r0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a094:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d009      	beq.n	800a0d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	78fa      	ldrb	r2, [r7, #3]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a100:	2303      	movs	r3, #3
 800a102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f001 f8a4 	bl	800b26e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a134:	461a      	mov	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	2b02      	cmp	r3, #2
 800a148:	d01a      	beq.n	800a180 <USBD_LL_SetupStage+0x72>
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d822      	bhi.n	800a194 <USBD_LL_SetupStage+0x86>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <USBD_LL_SetupStage+0x4a>
 800a152:	2b01      	cmp	r3, #1
 800a154:	d00a      	beq.n	800a16c <USBD_LL_SetupStage+0x5e>
 800a156:	e01d      	b.n	800a194 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fad1 	bl	800a708 <USBD_StdDevReq>
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]
      break;
 800a16a:	e020      	b.n	800a1ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fb39 	bl	800a7ec <USBD_StdItfReq>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]
      break;
 800a17e:	e016      	b.n	800a1ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fb9b 	bl	800a8c4 <USBD_StdEPReq>
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]
      break;
 800a192:	e00c      	b.n	800a1ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a19a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 fdc6 	bl	800bd34 <USBD_LL_StallEP>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ac:	bf00      	nop
  }

  return ret;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a1ca:	7afb      	ldrb	r3, [r7, #11]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d16e      	bne.n	800a2ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a1d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	f040 8098 	bne.w	800a314 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d913      	bls.n	800a218 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	1ad2      	subs	r2, r2, r3
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	4293      	cmp	r3, r2
 800a208:	bf28      	it	cs
 800a20a:	4613      	movcs	r3, r2
 800a20c:	461a      	mov	r2, r3
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f001 f92c 	bl	800b46e <USBD_CtlContinueRx>
 800a216:	e07d      	b.n	800a314 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a21e:	f003 031f 	and.w	r3, r3, #31
 800a222:	2b02      	cmp	r3, #2
 800a224:	d014      	beq.n	800a250 <USBD_LL_DataOutStage+0x98>
 800a226:	2b02      	cmp	r3, #2
 800a228:	d81d      	bhi.n	800a266 <USBD_LL_DataOutStage+0xae>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <USBD_LL_DataOutStage+0x7c>
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d003      	beq.n	800a23a <USBD_LL_DataOutStage+0x82>
 800a232:	e018      	b.n	800a266 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	75bb      	strb	r3, [r7, #22]
            break;
 800a238:	e018      	b.n	800a26c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a240:	b2db      	uxtb	r3, r3
 800a242:	4619      	mov	r1, r3
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f9d2 	bl	800a5ee <USBD_CoreFindIF>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75bb      	strb	r3, [r7, #22]
            break;
 800a24e:	e00d      	b.n	800a26c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a256:	b2db      	uxtb	r3, r3
 800a258:	4619      	mov	r1, r3
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f9d4 	bl	800a608 <USBD_CoreFindEP>
 800a260:	4603      	mov	r3, r0
 800a262:	75bb      	strb	r3, [r7, #22]
            break;
 800a264:	e002      	b.n	800a26c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	75bb      	strb	r3, [r7, #22]
            break;
 800a26a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a26c:	7dbb      	ldrb	r3, [r7, #22]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d119      	bne.n	800a2a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d113      	bne.n	800a2a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a27e:	7dba      	ldrb	r2, [r7, #22]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	32ae      	adds	r2, #174	@ 0xae
 800a284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00b      	beq.n	800a2a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a28e:	7dba      	ldrb	r2, [r7, #22]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a296:	7dba      	ldrb	r2, [r7, #22]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	32ae      	adds	r2, #174	@ 0xae
 800a29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f001 f8f2 	bl	800b490 <USBD_CtlSendStatus>
 800a2ac:	e032      	b.n	800a314 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f9a5 	bl	800a608 <USBD_CoreFindEP>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
 800a2c4:	2bff      	cmp	r3, #255	@ 0xff
 800a2c6:	d025      	beq.n	800a314 <USBD_LL_DataOutStage+0x15c>
 800a2c8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d122      	bne.n	800a314 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d117      	bne.n	800a30a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a2da:	7dba      	ldrb	r2, [r7, #22]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	32ae      	adds	r2, #174	@ 0xae
 800a2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00f      	beq.n	800a30a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a2ea:	7dba      	ldrb	r2, [r7, #22]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2f2:	7dba      	ldrb	r2, [r7, #22]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	32ae      	adds	r2, #174	@ 0xae
 800a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	7afa      	ldrb	r2, [r7, #11]
 800a300:	4611      	mov	r1, r2
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	4798      	blx	r3
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	e000      	b.n	800a316 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b086      	sub	sp, #24
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	460b      	mov	r3, r1
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d16f      	bne.n	800a412 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3314      	adds	r3, #20
 800a336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d15a      	bne.n	800a3f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d914      	bls.n	800a378 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	461a      	mov	r2, r3
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f001 f854 	bl	800b412 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f001 fde5 	bl	800bf40 <USBD_LL_PrepareReceive>
 800a376:	e03f      	b.n	800a3f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	429a      	cmp	r2, r3
 800a382:	d11c      	bne.n	800a3be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d316      	bcc.n	800a3be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d20f      	bcs.n	800a3be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f001 f835 	bl	800b412 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f001 fdc2 	bl	800bf40 <USBD_LL_PrepareReceive>
 800a3bc:	e01c      	b.n	800a3f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d10f      	bne.n	800a3ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d009      	beq.n	800a3ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ea:	2180      	movs	r1, #128	@ 0x80
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f001 fca1 	bl	800bd34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f001 f85f 	bl	800b4b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d03a      	beq.n	800a478 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff fe42 	bl	800a08c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a410:	e032      	b.n	800a478 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a412:	7afb      	ldrb	r3, [r7, #11]
 800a414:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	4619      	mov	r1, r3
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 f8f3 	bl	800a608 <USBD_CoreFindEP>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	2bff      	cmp	r3, #255	@ 0xff
 800a42a:	d025      	beq.n	800a478 <USBD_LL_DataInStage+0x15a>
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d122      	bne.n	800a478 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d11c      	bne.n	800a478 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a43e:	7dfa      	ldrb	r2, [r7, #23]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	32ae      	adds	r2, #174	@ 0xae
 800a444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d014      	beq.n	800a478 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a44e:	7dfa      	ldrb	r2, [r7, #23]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a456:	7dfa      	ldrb	r2, [r7, #23]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	32ae      	adds	r2, #174	@ 0xae
 800a45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	7afa      	ldrb	r2, [r7, #11]
 800a464:	4611      	mov	r1, r2
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	4798      	blx	r3
 800a46a:	4603      	mov	r3, r0
 800a46c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a46e:	7dbb      	ldrb	r3, [r7, #22]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a474:	7dbb      	ldrb	r3, [r7, #22]
 800a476:	e000      	b.n	800a47a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d014      	beq.n	800a4e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00e      	beq.n	800a4e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6852      	ldr	r2, [r2, #4]
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	4611      	mov	r1, r2
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	4798      	blx	r3
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4e8:	2340      	movs	r3, #64	@ 0x40
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 fbac 	bl	800bc4c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2240      	movs	r2, #64	@ 0x40
 800a500:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a504:	2340      	movs	r3, #64	@ 0x40
 800a506:	2200      	movs	r2, #0
 800a508:	2180      	movs	r1, #128	@ 0x80
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f001 fb9e 	bl	800bc4c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2240      	movs	r2, #64	@ 0x40
 800a51a:	621a      	str	r2, [r3, #32]

  return ret;
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	460b      	mov	r3, r1
 800a530:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b04      	cmp	r3, #4
 800a558:	d006      	beq.n	800a568 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a560:	b2da      	uxtb	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2204      	movs	r2, #4
 800a56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d106      	bne.n	800a5a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d110      	bne.n	800a5e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00b      	beq.n	800a5e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a614:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a616:	4618      	mov	r0, r3
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	885b      	ldrh	r3, [r3, #2]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	7812      	ldrb	r2, [r2, #0]
 800a644:	4293      	cmp	r3, r2
 800a646:	d91f      	bls.n	800a688 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a64e:	e013      	b.n	800a678 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a650:	f107 030a 	add.w	r3, r7, #10
 800a654:	4619      	mov	r1, r3
 800a656:	6978      	ldr	r0, [r7, #20]
 800a658:	f000 f81b 	bl	800a692 <USBD_GetNextDesc>
 800a65c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	785b      	ldrb	r3, [r3, #1]
 800a662:	2b05      	cmp	r3, #5
 800a664:	d108      	bne.n	800a678 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	789b      	ldrb	r3, [r3, #2]
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	429a      	cmp	r2, r3
 800a672:	d008      	beq.n	800a686 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	885b      	ldrh	r3, [r3, #2]
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	897b      	ldrh	r3, [r7, #10]
 800a680:	429a      	cmp	r2, r3
 800a682:	d8e5      	bhi.n	800a650 <USBD_GetEpDesc+0x2e>
 800a684:	e000      	b.n	800a688 <USBD_GetEpDesc+0x66>
          break;
 800a686:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a688:	693b      	ldr	r3, [r7, #16]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b087      	sub	sp, #28
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6e8:	8a3b      	ldrh	r3, [r7, #16]
 800a6ea:	021b      	lsls	r3, r3, #8
 800a6ec:	b21a      	sxth	r2, r3
 800a6ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	b21b      	sxth	r3, r3
 800a6f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6f8:	89fb      	ldrh	r3, [r7, #14]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
	...

0800a708 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a71e:	2b40      	cmp	r3, #64	@ 0x40
 800a720:	d005      	beq.n	800a72e <USBD_StdDevReq+0x26>
 800a722:	2b40      	cmp	r3, #64	@ 0x40
 800a724:	d857      	bhi.n	800a7d6 <USBD_StdDevReq+0xce>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00f      	beq.n	800a74a <USBD_StdDevReq+0x42>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d153      	bne.n	800a7d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	32ae      	adds	r2, #174	@ 0xae
 800a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
      break;
 800a748:	e04a      	b.n	800a7e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d83b      	bhi.n	800a7ca <USBD_StdDevReq+0xc2>
 800a752:	a201      	add	r2, pc, #4	@ (adr r2, 800a758 <USBD_StdDevReq+0x50>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a7ad 	.word	0x0800a7ad
 800a75c:	0800a7c1 	.word	0x0800a7c1
 800a760:	0800a7cb 	.word	0x0800a7cb
 800a764:	0800a7b7 	.word	0x0800a7b7
 800a768:	0800a7cb 	.word	0x0800a7cb
 800a76c:	0800a78b 	.word	0x0800a78b
 800a770:	0800a781 	.word	0x0800a781
 800a774:	0800a7cb 	.word	0x0800a7cb
 800a778:	0800a7a3 	.word	0x0800a7a3
 800a77c:	0800a795 	.word	0x0800a795
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa3c 	bl	800ac00 <USBD_GetDescriptor>
          break;
 800a788:	e024      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fbcb 	bl	800af28 <USBD_SetAddress>
          break;
 800a792:	e01f      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fc0a 	bl	800afb0 <USBD_SetConfig>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
          break;
 800a7a0:	e018      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fcad 	bl	800b104 <USBD_GetConfig>
          break;
 800a7aa:	e013      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fcde 	bl	800b170 <USBD_GetStatus>
          break;
 800a7b4:	e00e      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fd0d 	bl	800b1d8 <USBD_SetFeature>
          break;
 800a7be:	e009      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fd31 	bl	800b22a <USBD_ClrFeature>
          break;
 800a7c8:	e004      	b.n	800a7d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fd88 	bl	800b2e2 <USBD_CtlError>
          break;
 800a7d2:	bf00      	nop
      }
      break;
 800a7d4:	e004      	b.n	800a7e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fd82 	bl	800b2e2 <USBD_CtlError>
      break;
 800a7de:	bf00      	nop
  }

  return ret;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop

0800a7ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a802:	2b40      	cmp	r3, #64	@ 0x40
 800a804:	d005      	beq.n	800a812 <USBD_StdItfReq+0x26>
 800a806:	2b40      	cmp	r3, #64	@ 0x40
 800a808:	d852      	bhi.n	800a8b0 <USBD_StdItfReq+0xc4>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <USBD_StdItfReq+0x26>
 800a80e:	2b20      	cmp	r3, #32
 800a810:	d14e      	bne.n	800a8b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d840      	bhi.n	800a8a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	889b      	ldrh	r3, [r3, #4]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b01      	cmp	r3, #1
 800a828:	d836      	bhi.n	800a898 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	889b      	ldrh	r3, [r3, #4]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fedb 	bl	800a5ee <USBD_CoreFindIF>
 800a838:	4603      	mov	r3, r0
 800a83a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	2bff      	cmp	r3, #255	@ 0xff
 800a840:	d01d      	beq.n	800a87e <USBD_StdItfReq+0x92>
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d11a      	bne.n	800a87e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a848:	7bba      	ldrb	r2, [r7, #14]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	32ae      	adds	r2, #174	@ 0xae
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a858:	7bba      	ldrb	r2, [r7, #14]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a860:	7bba      	ldrb	r2, [r7, #14]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32ae      	adds	r2, #174	@ 0xae
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a876:	e004      	b.n	800a882 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a87c:	e001      	b.n	800a882 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a87e:	2303      	movs	r3, #3
 800a880:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	88db      	ldrh	r3, [r3, #6]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d110      	bne.n	800a8ac <USBD_StdItfReq+0xc0>
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10d      	bne.n	800a8ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fdfd 	bl	800b490 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a896:	e009      	b.n	800a8ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fd21 	bl	800b2e2 <USBD_CtlError>
          break;
 800a8a0:	e004      	b.n	800a8ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fd1c 	bl	800b2e2 <USBD_CtlError>
          break;
 800a8aa:	e000      	b.n	800a8ae <USBD_StdItfReq+0xc2>
          break;
 800a8ac:	bf00      	nop
      }
      break;
 800a8ae:	e004      	b.n	800a8ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fd15 	bl	800b2e2 <USBD_CtlError>
      break;
 800a8b8:	bf00      	nop
  }

  return ret;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	889b      	ldrh	r3, [r3, #4]
 800a8d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8e0:	2b40      	cmp	r3, #64	@ 0x40
 800a8e2:	d007      	beq.n	800a8f4 <USBD_StdEPReq+0x30>
 800a8e4:	2b40      	cmp	r3, #64	@ 0x40
 800a8e6:	f200 817f 	bhi.w	800abe8 <USBD_StdEPReq+0x324>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d02a      	beq.n	800a944 <USBD_StdEPReq+0x80>
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	f040 817a 	bne.w	800abe8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fe85 	bl	800a608 <USBD_CoreFindEP>
 800a8fe:	4603      	mov	r3, r0
 800a900:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a902:	7b7b      	ldrb	r3, [r7, #13]
 800a904:	2bff      	cmp	r3, #255	@ 0xff
 800a906:	f000 8174 	beq.w	800abf2 <USBD_StdEPReq+0x32e>
 800a90a:	7b7b      	ldrb	r3, [r7, #13]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 8170 	bne.w	800abf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a912:	7b7a      	ldrb	r2, [r7, #13]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a91a:	7b7a      	ldrb	r2, [r7, #13]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	32ae      	adds	r2, #174	@ 0xae
 800a920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 8163 	beq.w	800abf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a92c:	7b7a      	ldrb	r2, [r7, #13]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	32ae      	adds	r2, #174	@ 0xae
 800a932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
 800a93e:	4603      	mov	r3, r0
 800a940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a942:	e156      	b.n	800abf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d008      	beq.n	800a95e <USBD_StdEPReq+0x9a>
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	f300 8145 	bgt.w	800abdc <USBD_StdEPReq+0x318>
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 809b 	beq.w	800aa8e <USBD_StdEPReq+0x1ca>
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d03c      	beq.n	800a9d6 <USBD_StdEPReq+0x112>
 800a95c:	e13e      	b.n	800abdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	d002      	beq.n	800a970 <USBD_StdEPReq+0xac>
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d016      	beq.n	800a99c <USBD_StdEPReq+0xd8>
 800a96e:	e02c      	b.n	800a9ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00d      	beq.n	800a992 <USBD_StdEPReq+0xce>
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b80      	cmp	r3, #128	@ 0x80
 800a97a:	d00a      	beq.n	800a992 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 f9d7 	bl	800bd34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a986:	2180      	movs	r1, #128	@ 0x80
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 f9d3 	bl	800bd34 <USBD_LL_StallEP>
 800a98e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a990:	e020      	b.n	800a9d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fca4 	bl	800b2e2 <USBD_CtlError>
              break;
 800a99a:	e01b      	b.n	800a9d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	885b      	ldrh	r3, [r3, #2]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10e      	bne.n	800a9c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00b      	beq.n	800a9c2 <USBD_StdEPReq+0xfe>
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b80      	cmp	r3, #128	@ 0x80
 800a9ae:	d008      	beq.n	800a9c2 <USBD_StdEPReq+0xfe>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	88db      	ldrh	r3, [r3, #6]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d104      	bne.n	800a9c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 f9b9 	bl	800bd34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fd64 	bl	800b490 <USBD_CtlSendStatus>

              break;
 800a9c8:	e004      	b.n	800a9d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fc88 	bl	800b2e2 <USBD_CtlError>
              break;
 800a9d2:	bf00      	nop
          }
          break;
 800a9d4:	e107      	b.n	800abe6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d002      	beq.n	800a9e8 <USBD_StdEPReq+0x124>
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d016      	beq.n	800aa14 <USBD_StdEPReq+0x150>
 800a9e6:	e04b      	b.n	800aa80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00d      	beq.n	800aa0a <USBD_StdEPReq+0x146>
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	2b80      	cmp	r3, #128	@ 0x80
 800a9f2:	d00a      	beq.n	800aa0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 f99b 	bl	800bd34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9fe:	2180      	movs	r1, #128	@ 0x80
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f001 f997 	bl	800bd34 <USBD_LL_StallEP>
 800aa06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa08:	e040      	b.n	800aa8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fc68 	bl	800b2e2 <USBD_CtlError>
              break;
 800aa12:	e03b      	b.n	800aa8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	885b      	ldrh	r3, [r3, #2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d136      	bne.n	800aa8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d004      	beq.n	800aa30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 f9b8 	bl	800bda0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fd2d 	bl	800b490 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff fde4 	bl	800a608 <USBD_CoreFindEP>
 800aa40:	4603      	mov	r3, r0
 800aa42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa44:	7b7b      	ldrb	r3, [r7, #13]
 800aa46:	2bff      	cmp	r3, #255	@ 0xff
 800aa48:	d01f      	beq.n	800aa8a <USBD_StdEPReq+0x1c6>
 800aa4a:	7b7b      	ldrb	r3, [r7, #13]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11c      	bne.n	800aa8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa50:	7b7a      	ldrb	r2, [r7, #13]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa58:	7b7a      	ldrb	r2, [r7, #13]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32ae      	adds	r2, #174	@ 0xae
 800aa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d010      	beq.n	800aa8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa68:	7b7a      	ldrb	r2, [r7, #13]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32ae      	adds	r2, #174	@ 0xae
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa7e:	e004      	b.n	800aa8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fc2d 	bl	800b2e2 <USBD_CtlError>
              break;
 800aa88:	e000      	b.n	800aa8c <USBD_StdEPReq+0x1c8>
              break;
 800aa8a:	bf00      	nop
          }
          break;
 800aa8c:	e0ab      	b.n	800abe6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d002      	beq.n	800aaa0 <USBD_StdEPReq+0x1dc>
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d032      	beq.n	800ab04 <USBD_StdEPReq+0x240>
 800aa9e:	e097      	b.n	800abd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d007      	beq.n	800aab6 <USBD_StdEPReq+0x1f2>
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	2b80      	cmp	r3, #128	@ 0x80
 800aaaa:	d004      	beq.n	800aab6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fc17 	bl	800b2e2 <USBD_CtlError>
                break;
 800aab4:	e091      	b.n	800abda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	da0b      	bge.n	800aad6 <USBD_StdEPReq+0x212>
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	3310      	adds	r3, #16
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	4413      	add	r3, r2
 800aad2:	3304      	adds	r3, #4
 800aad4:	e00b      	b.n	800aaee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aadc:	4613      	mov	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	4413      	add	r3, r2
 800aaec:	3304      	adds	r3, #4
 800aaee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fc6d 	bl	800b3dc <USBD_CtlSendData>
              break;
 800ab02:	e06a      	b.n	800abda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	da11      	bge.n	800ab30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	f003 020f 	and.w	r2, r3, #15
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	3324      	adds	r3, #36	@ 0x24
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d117      	bne.n	800ab56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fbda 	bl	800b2e2 <USBD_CtlError>
                  break;
 800ab2e:	e054      	b.n	800abda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	f003 020f 	and.w	r2, r3, #15
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d104      	bne.n	800ab56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fbc7 	bl	800b2e2 <USBD_CtlError>
                  break;
 800ab54:	e041      	b.n	800abda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	da0b      	bge.n	800ab76 <USBD_StdEPReq+0x2b2>
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	3310      	adds	r3, #16
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	3304      	adds	r3, #4
 800ab74:	e00b      	b.n	800ab8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <USBD_StdEPReq+0x2d8>
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	2b80      	cmp	r3, #128	@ 0x80
 800ab9a:	d103      	bne.n	800aba4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	e00e      	b.n	800abc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 f92f 	bl	800be0c <USBD_LL_IsStallEP>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2201      	movs	r2, #1
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	e002      	b.n	800abc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2202      	movs	r2, #2
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fc07 	bl	800b3dc <USBD_CtlSendData>
              break;
 800abce:	e004      	b.n	800abda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fb85 	bl	800b2e2 <USBD_CtlError>
              break;
 800abd8:	bf00      	nop
          }
          break;
 800abda:	e004      	b.n	800abe6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fb7f 	bl	800b2e2 <USBD_CtlError>
          break;
 800abe4:	bf00      	nop
      }
      break;
 800abe6:	e005      	b.n	800abf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fb79 	bl	800b2e2 <USBD_CtlError>
      break;
 800abf0:	e000      	b.n	800abf4 <USBD_StdEPReq+0x330>
      break;
 800abf2:	bf00      	nop
  }

  return ret;
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	885b      	ldrh	r3, [r3, #2]
 800ac1a:	0a1b      	lsrs	r3, r3, #8
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	2b0e      	cmp	r3, #14
 800ac22:	f200 8152 	bhi.w	800aeca <USBD_GetDescriptor+0x2ca>
 800ac26:	a201      	add	r2, pc, #4	@ (adr r2, 800ac2c <USBD_GetDescriptor+0x2c>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800ac9d 	.word	0x0800ac9d
 800ac30:	0800acb5 	.word	0x0800acb5
 800ac34:	0800acf5 	.word	0x0800acf5
 800ac38:	0800aecb 	.word	0x0800aecb
 800ac3c:	0800aecb 	.word	0x0800aecb
 800ac40:	0800ae6b 	.word	0x0800ae6b
 800ac44:	0800ae97 	.word	0x0800ae97
 800ac48:	0800aecb 	.word	0x0800aecb
 800ac4c:	0800aecb 	.word	0x0800aecb
 800ac50:	0800aecb 	.word	0x0800aecb
 800ac54:	0800aecb 	.word	0x0800aecb
 800ac58:	0800aecb 	.word	0x0800aecb
 800ac5c:	0800aecb 	.word	0x0800aecb
 800ac60:	0800aecb 	.word	0x0800aecb
 800ac64:	0800ac69 	.word	0x0800ac69
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac7a:	69db      	ldr	r3, [r3, #28]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac8a:	e126      	b.n	800aeda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fb27 	bl	800b2e2 <USBD_CtlError>
        err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
      break;
 800ac9a:	e11e      	b.n	800aeda <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	f107 0108 	add.w	r1, r7, #8
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
      break;
 800acb2:	e112      	b.n	800aeda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7c1b      	ldrb	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10d      	bne.n	800acd8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc4:	f107 0208 	add.w	r2, r7, #8
 800acc8:	4610      	mov	r0, r2
 800acca:	4798      	blx	r3
 800accc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3301      	adds	r3, #1
 800acd2:	2202      	movs	r2, #2
 800acd4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acd6:	e100      	b.n	800aeda <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace0:	f107 0208 	add.w	r2, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3301      	adds	r3, #1
 800acee:	2202      	movs	r2, #2
 800acf0:	701a      	strb	r2, [r3, #0]
      break;
 800acf2:	e0f2      	b.n	800aeda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	885b      	ldrh	r3, [r3, #2]
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	f200 80ac 	bhi.w	800ae58 <USBD_GetDescriptor+0x258>
 800ad00:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <USBD_GetDescriptor+0x108>)
 800ad02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad06:	bf00      	nop
 800ad08:	0800ad21 	.word	0x0800ad21
 800ad0c:	0800ad55 	.word	0x0800ad55
 800ad10:	0800ad89 	.word	0x0800ad89
 800ad14:	0800adbd 	.word	0x0800adbd
 800ad18:	0800adf1 	.word	0x0800adf1
 800ad1c:	0800ae25 	.word	0x0800ae25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	7c12      	ldrb	r2, [r2, #16]
 800ad38:	f107 0108 	add.w	r1, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
 800ad40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad42:	e091      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 facb 	bl	800b2e2 <USBD_CtlError>
            err++;
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	72fb      	strb	r3, [r7, #11]
          break;
 800ad52:	e089      	b.n	800ae68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7c12      	ldrb	r2, [r2, #16]
 800ad6c:	f107 0108 	add.w	r1, r7, #8
 800ad70:	4610      	mov	r0, r2
 800ad72:	4798      	blx	r3
 800ad74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad76:	e077      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fab1 	bl	800b2e2 <USBD_CtlError>
            err++;
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	3301      	adds	r3, #1
 800ad84:	72fb      	strb	r3, [r7, #11]
          break;
 800ad86:	e06f      	b.n	800ae68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	7c12      	ldrb	r2, [r2, #16]
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adaa:	e05d      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa97 	bl	800b2e2 <USBD_CtlError>
            err++;
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	3301      	adds	r3, #1
 800adb8:	72fb      	strb	r3, [r7, #11]
          break;
 800adba:	e055      	b.n	800ae68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	7c12      	ldrb	r2, [r2, #16]
 800add4:	f107 0108 	add.w	r1, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adde:	e043      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa7d 	bl	800b2e2 <USBD_CtlError>
            err++;
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	3301      	adds	r3, #1
 800adec:	72fb      	strb	r3, [r7, #11]
          break;
 800adee:	e03b      	b.n	800ae68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00b      	beq.n	800ae14 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	7c12      	ldrb	r2, [r2, #16]
 800ae08:	f107 0108 	add.w	r1, r7, #8
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	4798      	blx	r3
 800ae10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae12:	e029      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa63 	bl	800b2e2 <USBD_CtlError>
            err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
          break;
 800ae22:	e021      	b.n	800ae68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	7c12      	ldrb	r2, [r2, #16]
 800ae3c:	f107 0108 	add.w	r1, r7, #8
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae46:	e00f      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fa49 	bl	800b2e2 <USBD_CtlError>
            err++;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	3301      	adds	r3, #1
 800ae54:	72fb      	strb	r3, [r7, #11]
          break;
 800ae56:	e007      	b.n	800ae68 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa41 	bl	800b2e2 <USBD_CtlError>
          err++;
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	3301      	adds	r3, #1
 800ae64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae66:	bf00      	nop
      }
      break;
 800ae68:	e037      	b.n	800aeda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	7c1b      	ldrb	r3, [r3, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae7a:	f107 0208 	add.w	r2, r7, #8
 800ae7e:	4610      	mov	r0, r2
 800ae80:	4798      	blx	r3
 800ae82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae84:	e029      	b.n	800aeda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fa2a 	bl	800b2e2 <USBD_CtlError>
        err++;
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	3301      	adds	r3, #1
 800ae92:	72fb      	strb	r3, [r7, #11]
      break;
 800ae94:	e021      	b.n	800aeda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7c1b      	ldrb	r3, [r3, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10d      	bne.n	800aeba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea6:	f107 0208 	add.w	r2, r7, #8
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4798      	blx	r3
 800aeae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	2207      	movs	r2, #7
 800aeb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aeb8:	e00f      	b.n	800aeda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fa10 	bl	800b2e2 <USBD_CtlError>
        err++;
 800aec2:	7afb      	ldrb	r3, [r7, #11]
 800aec4:	3301      	adds	r3, #1
 800aec6:	72fb      	strb	r3, [r7, #11]
      break;
 800aec8:	e007      	b.n	800aeda <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fa08 	bl	800b2e2 <USBD_CtlError>
      err++;
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	3301      	adds	r3, #1
 800aed6:	72fb      	strb	r3, [r7, #11]
      break;
 800aed8:	bf00      	nop
  }

  if (err != 0U)
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d11e      	bne.n	800af1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	88db      	ldrh	r3, [r3, #6]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d016      	beq.n	800af16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aee8:	893b      	ldrh	r3, [r7, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00e      	beq.n	800af0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	88da      	ldrh	r2, [r3, #6]
 800aef2:	893b      	ldrh	r3, [r7, #8]
 800aef4:	4293      	cmp	r3, r2
 800aef6:	bf28      	it	cs
 800aef8:	4613      	movcs	r3, r2
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aefe:	893b      	ldrh	r3, [r7, #8]
 800af00:	461a      	mov	r2, r3
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa69 	bl	800b3dc <USBD_CtlSendData>
 800af0a:	e009      	b.n	800af20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f9e7 	bl	800b2e2 <USBD_CtlError>
 800af14:	e004      	b.n	800af20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 faba 	bl	800b490 <USBD_CtlSendStatus>
 800af1c:	e000      	b.n	800af20 <USBD_GetDescriptor+0x320>
    return;
 800af1e:	bf00      	nop
  }
}
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop

0800af28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	889b      	ldrh	r3, [r3, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d131      	bne.n	800af9e <USBD_SetAddress+0x76>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	88db      	ldrh	r3, [r3, #6]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d12d      	bne.n	800af9e <USBD_SetAddress+0x76>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	2b7f      	cmp	r3, #127	@ 0x7f
 800af48:	d829      	bhi.n	800af9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	885b      	ldrh	r3, [r3, #2]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d104      	bne.n	800af6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f9bc 	bl	800b2e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6a:	e01d      	b.n	800afa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7bfa      	ldrb	r2, [r7, #15]
 800af70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 ff73 	bl	800be64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa86 	bl	800b490 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af92:	e009      	b.n	800afa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9c:	e004      	b.n	800afa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f99e 	bl	800b2e2 <USBD_CtlError>
  }
}
 800afa6:	bf00      	nop
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	885b      	ldrh	r3, [r3, #2]
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	4b4e      	ldr	r3, [pc, #312]	@ (800b100 <USBD_SetConfig+0x150>)
 800afc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afc8:	4b4d      	ldr	r3, [pc, #308]	@ (800b100 <USBD_SetConfig+0x150>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d905      	bls.n	800afdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f985 	bl	800b2e2 <USBD_CtlError>
    return USBD_FAIL;
 800afd8:	2303      	movs	r3, #3
 800afda:	e08c      	b.n	800b0f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d002      	beq.n	800afee <USBD_SetConfig+0x3e>
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d029      	beq.n	800b040 <USBD_SetConfig+0x90>
 800afec:	e075      	b.n	800b0da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afee:	4b44      	ldr	r3, [pc, #272]	@ (800b100 <USBD_SetConfig+0x150>)
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d020      	beq.n	800b038 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aff6:	4b42      	ldr	r3, [pc, #264]	@ (800b100 <USBD_SetConfig+0x150>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b000:	4b3f      	ldr	r3, [pc, #252]	@ (800b100 <USBD_SetConfig+0x150>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff f84b 	bl	800a0a2 <USBD_SetClassConfig>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d008      	beq.n	800b028 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f962 	bl	800b2e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2202      	movs	r2, #2
 800b022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b026:	e065      	b.n	800b0f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fa31 	bl	800b490 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2203      	movs	r2, #3
 800b032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b036:	e05d      	b.n	800b0f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fa29 	bl	800b490 <USBD_CtlSendStatus>
      break;
 800b03e:	e059      	b.n	800b0f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b040:	4b2f      	ldr	r3, [pc, #188]	@ (800b100 <USBD_SetConfig+0x150>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d112      	bne.n	800b06e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b050:	4b2b      	ldr	r3, [pc, #172]	@ (800b100 <USBD_SetConfig+0x150>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	461a      	mov	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b05a:	4b29      	ldr	r3, [pc, #164]	@ (800b100 <USBD_SetConfig+0x150>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff f83a 	bl	800a0da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa12 	bl	800b490 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b06c:	e042      	b.n	800b0f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b06e:	4b24      	ldr	r3, [pc, #144]	@ (800b100 <USBD_SetConfig+0x150>)
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d02a      	beq.n	800b0d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f7ff f828 	bl	800a0da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b08a:	4b1d      	ldr	r3, [pc, #116]	@ (800b100 <USBD_SetConfig+0x150>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	461a      	mov	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b094:	4b1a      	ldr	r3, [pc, #104]	@ (800b100 <USBD_SetConfig+0x150>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff f801 	bl	800a0a2 <USBD_SetClassConfig>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00f      	beq.n	800b0ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f918 	bl	800b2e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff f80d 	bl	800a0da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b0c8:	e014      	b.n	800b0f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f9e0 	bl	800b490 <USBD_CtlSendStatus>
      break;
 800b0d0:	e010      	b.n	800b0f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f9dc 	bl	800b490 <USBD_CtlSendStatus>
      break;
 800b0d8:	e00c      	b.n	800b0f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f900 	bl	800b2e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0e2:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <USBD_SetConfig+0x150>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7fe fff6 	bl	800a0da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0f2:	bf00      	nop
  }

  return ret;
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	200017d0 	.word	0x200017d0

0800b104 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	88db      	ldrh	r3, [r3, #6]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d004      	beq.n	800b120 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f8e2 	bl	800b2e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b11e:	e023      	b.n	800b168 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b126:	b2db      	uxtb	r3, r3
 800b128:	2b02      	cmp	r3, #2
 800b12a:	dc02      	bgt.n	800b132 <USBD_GetConfig+0x2e>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc03      	bgt.n	800b138 <USBD_GetConfig+0x34>
 800b130:	e015      	b.n	800b15e <USBD_GetConfig+0x5a>
 800b132:	2b03      	cmp	r3, #3
 800b134:	d00b      	beq.n	800b14e <USBD_GetConfig+0x4a>
 800b136:	e012      	b.n	800b15e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3308      	adds	r3, #8
 800b142:	2201      	movs	r2, #1
 800b144:	4619      	mov	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f948 	bl	800b3dc <USBD_CtlSendData>
        break;
 800b14c:	e00c      	b.n	800b168 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3304      	adds	r3, #4
 800b152:	2201      	movs	r2, #1
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f940 	bl	800b3dc <USBD_CtlSendData>
        break;
 800b15c:	e004      	b.n	800b168 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f8be 	bl	800b2e2 <USBD_CtlError>
        break;
 800b166:	bf00      	nop
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b180:	b2db      	uxtb	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	2b02      	cmp	r3, #2
 800b186:	d81e      	bhi.n	800b1c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	88db      	ldrh	r3, [r3, #6]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d004      	beq.n	800b19a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f8a5 	bl	800b2e2 <USBD_CtlError>
        break;
 800b198:	e01a      	b.n	800b1d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d005      	beq.n	800b1b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f043 0202 	orr.w	r2, r3, #2
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f90c 	bl	800b3dc <USBD_CtlSendData>
      break;
 800b1c4:	e004      	b.n	800b1d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f88a 	bl	800b2e2 <USBD_CtlError>
      break;
 800b1ce:	bf00      	nop
  }
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	885b      	ldrh	r3, [r3, #2]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d107      	bne.n	800b1fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f94c 	bl	800b490 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b1f8:	e013      	b.n	800b222 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d10b      	bne.n	800b21a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	889b      	ldrh	r3, [r3, #4]
 800b206:	0a1b      	lsrs	r3, r3, #8
 800b208:	b29b      	uxth	r3, r3
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f93c 	bl	800b490 <USBD_CtlSendStatus>
}
 800b218:	e003      	b.n	800b222 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f860 	bl	800b2e2 <USBD_CtlError>
}
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	3b01      	subs	r3, #1
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d80b      	bhi.n	800b25a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	885b      	ldrh	r3, [r3, #2]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d10c      	bne.n	800b264 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f91c 	bl	800b490 <USBD_CtlSendStatus>
      }
      break;
 800b258:	e004      	b.n	800b264 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b25a:	6839      	ldr	r1, [r7, #0]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f840 	bl	800b2e2 <USBD_CtlError>
      break;
 800b262:	e000      	b.n	800b266 <USBD_ClrFeature+0x3c>
      break;
 800b264:	bf00      	nop
  }
}
 800b266:	bf00      	nop
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3301      	adds	r3, #1
 800b288:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7ff fa16 	bl	800a6ca <SWAPBYTE>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff fa09 	bl	800a6ca <SWAPBYTE>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f7ff f9fc 	bl	800a6ca <SWAPBYTE>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	80da      	strh	r2, [r3, #6]
}
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2ec:	2180      	movs	r1, #128	@ 0x80
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fd20 	bl	800bd34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fd1c 	bl	800bd34 <USBD_LL_StallEP>
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d042      	beq.n	800b3a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b31e:	6938      	ldr	r0, [r7, #16]
 800b320:	f000 f842 	bl	800b3a8 <USBD_GetLen>
 800b324:	4603      	mov	r3, r0
 800b326:	3301      	adds	r3, #1
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b32e:	d808      	bhi.n	800b342 <USBD_GetString+0x3e>
 800b330:	6938      	ldr	r0, [r7, #16]
 800b332:	f000 f839 	bl	800b3a8 <USBD_GetLen>
 800b336:	4603      	mov	r3, r0
 800b338:	3301      	adds	r3, #1
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	b29a      	uxth	r2, r3
 800b340:	e001      	b.n	800b346 <USBD_GetString+0x42>
 800b342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	4413      	add	r3, r2
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	7812      	ldrb	r2, [r2, #0]
 800b354:	701a      	strb	r2, [r3, #0]
  idx++;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	3301      	adds	r3, #1
 800b35a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	4413      	add	r3, r2
 800b362:	2203      	movs	r2, #3
 800b364:	701a      	strb	r2, [r3, #0]
  idx++;
 800b366:	7dfb      	ldrb	r3, [r7, #23]
 800b368:	3301      	adds	r3, #1
 800b36a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b36c:	e013      	b.n	800b396 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	4413      	add	r3, r2
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	7812      	ldrb	r2, [r2, #0]
 800b378:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	3301      	adds	r3, #1
 800b37e:	613b      	str	r3, [r7, #16]
    idx++;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	3301      	adds	r3, #1
 800b384:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	4413      	add	r3, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b390:	7dfb      	ldrb	r3, [r7, #23]
 800b392:	3301      	adds	r3, #1
 800b394:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e7      	bne.n	800b36e <USBD_GetString+0x6a>
 800b39e:	e000      	b.n	800b3a2 <USBD_GetString+0x9e>
    return;
 800b3a0:	bf00      	nop
  }
}
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3b8:	e005      	b.n	800b3c6 <USBD_GetLen+0x1e>
  {
    len++;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1f5      	bne.n	800b3ba <USBD_GetLen+0x12>
  }

  return len;
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	2100      	movs	r1, #0
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 fd64 	bl	800bed0 <USBD_LL_Transmit>

  return USBD_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	2100      	movs	r1, #0
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 fd53 	bl	800bed0 <USBD_LL_Transmit>

  return USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2203      	movs	r2, #3
 800b444:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	2100      	movs	r1, #0
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f000 fd6e 	bl	800bf40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	2100      	movs	r1, #0
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 fd5d 	bl	800bf40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2204      	movs	r2, #4
 800b49c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fd12 	bl	800bed0 <USBD_LL_Transmit>

  return USBD_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2205      	movs	r2, #5
 800b4c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fd37 	bl	800bf40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4912      	ldr	r1, [pc, #72]	@ (800b52c <MX_USB_DEVICE_Init+0x50>)
 800b4e4:	4812      	ldr	r0, [pc, #72]	@ (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b4e6:	f7fe fd5f 	bl	8009fa8 <USBD_Init>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4f0:	f7f7 fa36 	bl	8002960 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4f4:	490f      	ldr	r1, [pc, #60]	@ (800b534 <MX_USB_DEVICE_Init+0x58>)
 800b4f6:	480e      	ldr	r0, [pc, #56]	@ (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b4f8:	f7fe fd86 	bl	800a008 <USBD_RegisterClass>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b502:	f7f7 fa2d 	bl	8002960 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b506:	490c      	ldr	r1, [pc, #48]	@ (800b538 <MX_USB_DEVICE_Init+0x5c>)
 800b508:	4809      	ldr	r0, [pc, #36]	@ (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b50a:	f7fe fc7d 	bl	8009e08 <USBD_CDC_RegisterInterface>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b514:	f7f7 fa24 	bl	8002960 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b518:	4805      	ldr	r0, [pc, #20]	@ (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b51a:	f7fe fdab 	bl	800a074 <USBD_Start>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b524:	f7f7 fa1c 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b528:	bf00      	nop
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20000a30 	.word	0x20000a30
 800b530:	200017d4 	.word	0x200017d4
 800b534:	2000099c 	.word	0x2000099c
 800b538:	20000a1c 	.word	0x20000a1c

0800b53c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b540:	2200      	movs	r2, #0
 800b542:	4905      	ldr	r1, [pc, #20]	@ (800b558 <CDC_Init_FS+0x1c>)
 800b544:	4805      	ldr	r0, [pc, #20]	@ (800b55c <CDC_Init_FS+0x20>)
 800b546:	f7fe fc79 	bl	8009e3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b54a:	4905      	ldr	r1, [pc, #20]	@ (800b560 <CDC_Init_FS+0x24>)
 800b54c:	4803      	ldr	r0, [pc, #12]	@ (800b55c <CDC_Init_FS+0x20>)
 800b54e:	f7fe fc97 	bl	8009e80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b554:	4618      	mov	r0, r3
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20001eb0 	.word	0x20001eb0
 800b55c:	200017d4 	.word	0x200017d4
 800b560:	20001ab0 	.word	0x20001ab0

0800b564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b564:	b480      	push	{r7}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
 800b580:	4613      	mov	r3, r2
 800b582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b584:	79fb      	ldrb	r3, [r7, #7]
 800b586:	2b23      	cmp	r3, #35	@ 0x23
 800b588:	d84a      	bhi.n	800b620 <CDC_Control_FS+0xac>
 800b58a:	a201      	add	r2, pc, #4	@ (adr r2, 800b590 <CDC_Control_FS+0x1c>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b621 	.word	0x0800b621
 800b594:	0800b621 	.word	0x0800b621
 800b598:	0800b621 	.word	0x0800b621
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b621 	.word	0x0800b621
 800b5a4:	0800b621 	.word	0x0800b621
 800b5a8:	0800b621 	.word	0x0800b621
 800b5ac:	0800b621 	.word	0x0800b621
 800b5b0:	0800b621 	.word	0x0800b621
 800b5b4:	0800b621 	.word	0x0800b621
 800b5b8:	0800b621 	.word	0x0800b621
 800b5bc:	0800b621 	.word	0x0800b621
 800b5c0:	0800b621 	.word	0x0800b621
 800b5c4:	0800b621 	.word	0x0800b621
 800b5c8:	0800b621 	.word	0x0800b621
 800b5cc:	0800b621 	.word	0x0800b621
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	0800b621 	.word	0x0800b621
 800b5d8:	0800b621 	.word	0x0800b621
 800b5dc:	0800b621 	.word	0x0800b621
 800b5e0:	0800b621 	.word	0x0800b621
 800b5e4:	0800b621 	.word	0x0800b621
 800b5e8:	0800b621 	.word	0x0800b621
 800b5ec:	0800b621 	.word	0x0800b621
 800b5f0:	0800b621 	.word	0x0800b621
 800b5f4:	0800b621 	.word	0x0800b621
 800b5f8:	0800b621 	.word	0x0800b621
 800b5fc:	0800b621 	.word	0x0800b621
 800b600:	0800b621 	.word	0x0800b621
 800b604:	0800b621 	.word	0x0800b621
 800b608:	0800b621 	.word	0x0800b621
 800b60c:	0800b621 	.word	0x0800b621
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b621 	.word	0x0800b621
 800b618:	0800b621 	.word	0x0800b621
 800b61c:	0800b621 	.word	0x0800b621
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b620:	bf00      	nop
  }

  return (USBD_OK);
 800b622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	480f      	ldr	r0, [pc, #60]	@ (800b67c <CDC_Receive_FS+0x4c>)
 800b63e:	f7fe fc1f 	bl	8009e80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b642:	480e      	ldr	r0, [pc, #56]	@ (800b67c <CDC_Receive_FS+0x4c>)
 800b644:	f7fe fc7a 	bl	8009f3c <USBD_CDC_ReceivePacket>
  // added this:
  uint8_t len = (uint8_t) *Len;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	73fb      	strb	r3, [r7, #15]
  memset(USB_buffer,'0',3000);
 800b64e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b652:	2130      	movs	r1, #48	@ 0x30
 800b654:	480a      	ldr	r0, [pc, #40]	@ (800b680 <CDC_Receive_FS+0x50>)
 800b656:	f000 fd13 	bl	800c080 <memset>
  memcpy(USB_buffer, Buf, len);
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	461a      	mov	r2, r3
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	4807      	ldr	r0, [pc, #28]	@ (800b680 <CDC_Receive_FS+0x50>)
 800b662:	f000 fd3f 	bl	800c0e4 <memcpy>
  memset(Buf,'0',len);
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	461a      	mov	r2, r3
 800b66a:	2130      	movs	r1, #48	@ 0x30
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fd07 	bl	800c080 <memset>
  // added until here
  return (USBD_OK);
 800b672:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	200017d4 	.word	0x200017d4
 800b680:	20000c14 	.word	0x20000c14

0800b684 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b694:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <CDC_Transmit_FS+0x48>)
 800b696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b69a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e00b      	b.n	800b6c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b6aa:	887b      	ldrh	r3, [r7, #2]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	4806      	ldr	r0, [pc, #24]	@ (800b6cc <CDC_Transmit_FS+0x48>)
 800b6b2:	f7fe fbc3 	bl	8009e3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b6b6:	4805      	ldr	r0, [pc, #20]	@ (800b6cc <CDC_Transmit_FS+0x48>)
 800b6b8:	f7fe fc00 	bl	8009ebc <USBD_CDC_TransmitPacket>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	200017d4 	.word	0x200017d4

0800b6d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	6039      	str	r1, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2212      	movs	r2, #18
 800b704:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b706:	4b03      	ldr	r3, [pc, #12]	@ (800b714 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	20000a50 	.word	0x20000a50

0800b718 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2204      	movs	r2, #4
 800b728:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b72a:	4b03      	ldr	r3, [pc, #12]	@ (800b738 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	20000a70 	.word	0x20000a70

0800b73c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	6039      	str	r1, [r7, #0]
 800b746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	4907      	ldr	r1, [pc, #28]	@ (800b770 <USBD_FS_ProductStrDescriptor+0x34>)
 800b752:	4808      	ldr	r0, [pc, #32]	@ (800b774 <USBD_FS_ProductStrDescriptor+0x38>)
 800b754:	f7ff fdd6 	bl	800b304 <USBD_GetString>
 800b758:	e004      	b.n	800b764 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	4904      	ldr	r1, [pc, #16]	@ (800b770 <USBD_FS_ProductStrDescriptor+0x34>)
 800b75e:	4805      	ldr	r0, [pc, #20]	@ (800b774 <USBD_FS_ProductStrDescriptor+0x38>)
 800b760:	f7ff fdd0 	bl	800b304 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b764:	4b02      	ldr	r3, [pc, #8]	@ (800b770 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	200022b0 	.word	0x200022b0
 800b774:	0800dc58 	.word	0x0800dc58

0800b778 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	4904      	ldr	r1, [pc, #16]	@ (800b798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b788:	4804      	ldr	r0, [pc, #16]	@ (800b79c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b78a:	f7ff fdbb 	bl	800b304 <USBD_GetString>
  return USBD_StrDesc;
 800b78e:	4b02      	ldr	r3, [pc, #8]	@ (800b798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	200022b0 	.word	0x200022b0
 800b79c:	0800dc70 	.word	0x0800dc70

0800b7a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	6039      	str	r1, [r7, #0]
 800b7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	221a      	movs	r2, #26
 800b7b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7b2:	f000 f855 	bl	800b860 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7b6:	4b02      	ldr	r3, [pc, #8]	@ (800b7c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000a74 	.word	0x20000a74

0800b7c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	6039      	str	r1, [r7, #0]
 800b7ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d105      	bne.n	800b7e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	4907      	ldr	r1, [pc, #28]	@ (800b7f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7da:	4808      	ldr	r0, [pc, #32]	@ (800b7fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7dc:	f7ff fd92 	bl	800b304 <USBD_GetString>
 800b7e0:	e004      	b.n	800b7ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	4904      	ldr	r1, [pc, #16]	@ (800b7f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7e6:	4805      	ldr	r0, [pc, #20]	@ (800b7fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7e8:	f7ff fd8c 	bl	800b304 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7ec:	4b02      	ldr	r3, [pc, #8]	@ (800b7f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200022b0 	.word	0x200022b0
 800b7fc:	0800dc84 	.word	0x0800dc84

0800b800 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	4603      	mov	r3, r0
 800b808:	6039      	str	r1, [r7, #0]
 800b80a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d105      	bne.n	800b81e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	4907      	ldr	r1, [pc, #28]	@ (800b834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b816:	4808      	ldr	r0, [pc, #32]	@ (800b838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b818:	f7ff fd74 	bl	800b304 <USBD_GetString>
 800b81c:	e004      	b.n	800b828 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	4904      	ldr	r1, [pc, #16]	@ (800b834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b822:	4805      	ldr	r0, [pc, #20]	@ (800b838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b824:	f7ff fd6e 	bl	800b304 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b828:	4b02      	ldr	r3, [pc, #8]	@ (800b834 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200022b0 	.word	0x200022b0
 800b838:	0800dc90 	.word	0x0800dc90

0800b83c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	6039      	str	r1, [r7, #0]
 800b846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	220c      	movs	r2, #12
 800b84c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b84e:	4b03      	ldr	r3, [pc, #12]	@ (800b85c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000a64 	.word	0x20000a64

0800b860 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b866:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a4 <Get_SerialNum+0x44>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b86c:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a8 <Get_SerialNum+0x48>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b872:	4b0e      	ldr	r3, [pc, #56]	@ (800b8ac <Get_SerialNum+0x4c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4413      	add	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d009      	beq.n	800b89a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b886:	2208      	movs	r2, #8
 800b888:	4909      	ldr	r1, [pc, #36]	@ (800b8b0 <Get_SerialNum+0x50>)
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 f814 	bl	800b8b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b890:	2204      	movs	r2, #4
 800b892:	4908      	ldr	r1, [pc, #32]	@ (800b8b4 <Get_SerialNum+0x54>)
 800b894:	68b8      	ldr	r0, [r7, #8]
 800b896:	f000 f80f 	bl	800b8b8 <IntToUnicode>
  }
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	1fff7590 	.word	0x1fff7590
 800b8a8:	1fff7594 	.word	0x1fff7594
 800b8ac:	1fff7598 	.word	0x1fff7598
 800b8b0:	20000a76 	.word	0x20000a76
 800b8b4:	20000a86 	.word	0x20000a86

0800b8b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	75fb      	strb	r3, [r7, #23]
 800b8ce:	e027      	b.n	800b920 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	0f1b      	lsrs	r3, r3, #28
 800b8d4:	2b09      	cmp	r3, #9
 800b8d6:	d80b      	bhi.n	800b8f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	0f1b      	lsrs	r3, r3, #28
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	440b      	add	r3, r1
 800b8e8:	3230      	adds	r2, #48	@ 0x30
 800b8ea:	b2d2      	uxtb	r2, r2
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	e00a      	b.n	800b906 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	0f1b      	lsrs	r3, r3, #28
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	005b      	lsls	r3, r3, #1
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	440b      	add	r3, r1
 800b900:	3237      	adds	r2, #55	@ 0x37
 800b902:	b2d2      	uxtb	r2, r2
 800b904:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	011b      	lsls	r3, r3, #4
 800b90a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	3301      	adds	r3, #1
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	4413      	add	r3, r2
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	3301      	adds	r3, #1
 800b91e:	75fb      	strb	r3, [r7, #23]
 800b920:	7dfa      	ldrb	r2, [r7, #23]
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	429a      	cmp	r2, r3
 800b926:	d3d3      	bcc.n	800b8d0 <IntToUnicode+0x18>
  }
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
	...

0800b938 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b098      	sub	sp, #96	@ 0x60
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b940:	f107 030c 	add.w	r3, r7, #12
 800b944:	2254      	movs	r2, #84	@ 0x54
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fb99 	bl	800c080 <memset>
  if(pcdHandle->Instance==USB)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a1d      	ldr	r2, [pc, #116]	@ (800b9c8 <HAL_PCD_MspInit+0x90>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d132      	bne.n	800b9be <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b95c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b95e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b962:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b964:	2301      	movs	r3, #1
 800b966:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b968:	2301      	movs	r3, #1
 800b96a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b96c:	2318      	movs	r3, #24
 800b96e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b970:	2307      	movs	r3, #7
 800b972:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b974:	2302      	movs	r3, #2
 800b976:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b978:	2302      	movs	r3, #2
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b97c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b980:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b982:	f107 030c 	add.w	r3, r7, #12
 800b986:	4618      	mov	r0, r3
 800b988:	f7fa fe34 	bl	80065f4 <HAL_RCCEx_PeriphCLKConfig>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800b992:	f7f6 ffe5 	bl	8002960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b996:	4b0d      	ldr	r3, [pc, #52]	@ (800b9cc <HAL_PCD_MspInit+0x94>)
 800b998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b99a:	4a0c      	ldr	r2, [pc, #48]	@ (800b9cc <HAL_PCD_MspInit+0x94>)
 800b99c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9a0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <HAL_PCD_MspInit+0x94>)
 800b9a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9aa:	60bb      	str	r3, [r7, #8]
 800b9ac:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	2043      	movs	r0, #67	@ 0x43
 800b9b4:	f7f7 fab1 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b9b8:	2043      	movs	r0, #67	@ 0x43
 800b9ba:	f7f7 faca 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b9be:	bf00      	nop
 800b9c0:	3760      	adds	r7, #96	@ 0x60
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	40006800 	.word	0x40006800
 800b9cc:	40021000 	.word	0x40021000

0800b9d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f7fe fb91 	bl	800a10e <USBD_LL_SetupStage>
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	6879      	ldr	r1, [r7, #4]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	00db      	lsls	r3, r3, #3
 800ba12:	440b      	add	r3, r1
 800ba14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	78fb      	ldrb	r3, [r7, #3]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f7fe fbcb 	bl	800a1b8 <USBD_LL_DataOutStage>
}
 800ba22:	bf00      	nop
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b082      	sub	sp, #8
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	460b      	mov	r3, r1
 800ba34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800ba3c:	78fa      	ldrb	r2, [r7, #3]
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	440b      	add	r3, r1
 800ba4a:	3324      	adds	r3, #36	@ 0x24
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	4619      	mov	r1, r3
 800ba52:	f7fe fc64 	bl	800a31e <USBD_LL_DataInStage>
}
 800ba56:	bf00      	nop
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fd9e 	bl	800a5ae <USBD_LL_SOF>
}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba82:	2301      	movs	r3, #1
 800ba84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	799b      	ldrb	r3, [r3, #6]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d001      	beq.n	800ba92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba8e:	f7f6 ff67 	bl	8002960 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ba98:	7bfa      	ldrb	r2, [r7, #15]
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe fd42 	bl	800a526 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fcea 	bl	800a482 <USBD_LL_Reset>
}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fe fd3d 	bl	800a546 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	7a9b      	ldrb	r3, [r3, #10]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d005      	beq.n	800bae0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bad4:	4b04      	ldr	r3, [pc, #16]	@ (800bae8 <HAL_PCD_SuspendCallback+0x30>)
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4a03      	ldr	r2, [pc, #12]	@ (800bae8 <HAL_PCD_SuspendCallback+0x30>)
 800bada:	f043 0306 	orr.w	r3, r3, #6
 800bade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed00 	.word	0xe000ed00

0800baec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7a9b      	ldrb	r3, [r3, #10]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bafc:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <HAL_PCD_ResumeCallback+0x34>)
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	4a07      	ldr	r2, [pc, #28]	@ (800bb20 <HAL_PCD_ResumeCallback+0x34>)
 800bb02:	f023 0306 	bic.w	r3, r3, #6
 800bb06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bb08:	f000 fab4 	bl	800c074 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe fd33 	bl	800a57e <USBD_LL_Resume>
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	e000ed00 	.word	0xe000ed00

0800bb24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bb2c:	f7f9 ff52 	bl	80059d4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bb30:	4a2b      	ldr	r2, [pc, #172]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
  pdev->pData = &hpcd_USB_FS;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a29      	ldr	r2, [pc, #164]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb3c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_FS.Instance = USB;
 800bb40:	4b27      	ldr	r3, [pc, #156]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb42:	4a28      	ldr	r2, [pc, #160]	@ (800bbe4 <USBD_LL_Init+0xc0>)
 800bb44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb46:	4b26      	ldr	r3, [pc, #152]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb48:	2208      	movs	r2, #8
 800bb4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb4c:	4b24      	ldr	r3, [pc, #144]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb4e:	2202      	movs	r2, #2
 800bb50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb52:	4b23      	ldr	r3, [pc, #140]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb54:	2202      	movs	r2, #2
 800bb56:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bb58:	4b21      	ldr	r3, [pc, #132]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb5e:	4b20      	ldr	r3, [pc, #128]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb64:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb70:	481b      	ldr	r0, [pc, #108]	@ (800bbe0 <USBD_LL_Init+0xbc>)
 800bb72:	f7f8 f98c 	bl	8003e8e <HAL_PCD_Init>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bb7c:	f7f6 fef0 	bl	8002960 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb86:	2318      	movs	r3, #24
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	f7f9 fe50 	bl	8005830 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb96:	2358      	movs	r3, #88	@ 0x58
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2180      	movs	r1, #128	@ 0x80
 800bb9c:	f7f9 fe48 	bl	8005830 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bba6:	23c0      	movs	r3, #192	@ 0xc0
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2181      	movs	r1, #129	@ 0x81
 800bbac:	f7f9 fe40 	bl	8005830 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbb6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	f7f9 fe37 	bl	8005830 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bbcc:	2200      	movs	r2, #0
 800bbce:	2182      	movs	r1, #130	@ 0x82
 800bbd0:	f7f9 fe2e 	bl	8005830 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	200024b0 	.word	0x200024b0
 800bbe4:	40006800 	.word	0x40006800

0800bbe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7f8 fa42 	bl	8004088 <HAL_PCD_Start>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d816      	bhi.n	800bc3c <USBD_LL_Start+0x54>
 800bc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <USBD_LL_Start+0x2c>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc25 	.word	0x0800bc25
 800bc18:	0800bc2b 	.word	0x0800bc2b
 800bc1c:	0800bc31 	.word	0x0800bc31
 800bc20:	0800bc37 	.word	0x0800bc37
    case HAL_OK :
      usb_status = USBD_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]
    break;
 800bc28:	e00b      	b.n	800bc42 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc2e:	e008      	b.n	800bc42 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc30:	2301      	movs	r3, #1
 800bc32:	73fb      	strb	r3, [r7, #15]
    break;
 800bc34:	e005      	b.n	800bc42 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc36:	2303      	movs	r3, #3
 800bc38:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3a:	e002      	b.n	800bc42 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc40:	bf00      	nop
  }
  return usb_status;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	461a      	mov	r2, r3
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	70fb      	strb	r3, [r7, #3]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70bb      	strb	r3, [r7, #2]
 800bc62:	4613      	mov	r3, r2
 800bc64:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc74:	78bb      	ldrb	r3, [r7, #2]
 800bc76:	883a      	ldrh	r2, [r7, #0]
 800bc78:	78f9      	ldrb	r1, [r7, #3]
 800bc7a:	f7f8 fb72 	bl	8004362 <HAL_PCD_EP_Open>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d817      	bhi.n	800bcb8 <USBD_LL_OpenEP+0x6c>
 800bc88:	a201      	add	r2, pc, #4	@ (adr r2, 800bc90 <USBD_LL_OpenEP+0x44>)
 800bc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8e:	bf00      	nop
 800bc90:	0800bca1 	.word	0x0800bca1
 800bc94:	0800bca7 	.word	0x0800bca7
 800bc98:	0800bcad 	.word	0x0800bcad
 800bc9c:	0800bcb3 	.word	0x0800bcb3
    case HAL_OK :
      usb_status = USBD_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
    break;
 800bca4:	e00b      	b.n	800bcbe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bca6:	2303      	movs	r3, #3
 800bca8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcaa:	e008      	b.n	800bcbe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcac:	2301      	movs	r3, #1
 800bcae:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb0:	e005      	b.n	800bcbe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb6:	e002      	b.n	800bcbe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	73fb      	strb	r3, [r7, #15]
    break;
 800bcbc:	bf00      	nop
  }
  return usb_status;
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bce2:	78fa      	ldrb	r2, [r7, #3]
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7f8 fb9a 	bl	8004420 <HAL_PCD_EP_Close>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d816      	bhi.n	800bd24 <USBD_LL_CloseEP+0x5c>
 800bcf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcfc <USBD_LL_CloseEP+0x34>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd0d 	.word	0x0800bd0d
 800bd00:	0800bd13 	.word	0x0800bd13
 800bd04:	0800bd19 	.word	0x0800bd19
 800bd08:	0800bd1f 	.word	0x0800bd1f
    case HAL_OK :
      usb_status = USBD_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd10:	e00b      	b.n	800bd2a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	73fb      	strb	r3, [r7, #15]
    break;
 800bd16:	e008      	b.n	800bd2a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd1c:	e005      	b.n	800bd2a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	73fb      	strb	r3, [r7, #15]
    break;
 800bd22:	e002      	b.n	800bd2a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd24:	2303      	movs	r3, #3
 800bd26:	73fb      	strb	r3, [r7, #15]
    break;
 800bd28:	bf00      	nop
  }
  return usb_status;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd4e:	78fa      	ldrb	r2, [r7, #3]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7f8 fc2c 	bl	80045b0 <HAL_PCD_EP_SetStall>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d816      	bhi.n	800bd90 <USBD_LL_StallEP+0x5c>
 800bd62:	a201      	add	r2, pc, #4	@ (adr r2, 800bd68 <USBD_LL_StallEP+0x34>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800bd79 	.word	0x0800bd79
 800bd6c:	0800bd7f 	.word	0x0800bd7f
 800bd70:	0800bd85 	.word	0x0800bd85
 800bd74:	0800bd8b 	.word	0x0800bd8b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd7c:	e00b      	b.n	800bd96 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	73fb      	strb	r3, [r7, #15]
    break;
 800bd82:	e008      	b.n	800bd96 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd84:	2301      	movs	r3, #1
 800bd86:	73fb      	strb	r3, [r7, #15]
    break;
 800bd88:	e005      	b.n	800bd96 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd8e:	e002      	b.n	800bd96 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd90:	2303      	movs	r3, #3
 800bd92:	73fb      	strb	r3, [r7, #15]
    break;
 800bd94:	bf00      	nop
  }
  return usb_status;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f8 fc56 	bl	8004670 <HAL_PCD_EP_ClrStall>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d816      	bhi.n	800bdfc <USBD_LL_ClearStallEP+0x5c>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <USBD_LL_ClearStallEP+0x34>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800bdeb 	.word	0x0800bdeb
 800bddc:	0800bdf1 	.word	0x0800bdf1
 800bde0:	0800bdf7 	.word	0x0800bdf7
    case HAL_OK :
      usb_status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]
    break;
 800bde8:	e00b      	b.n	800be02 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdea:	2303      	movs	r3, #3
 800bdec:	73fb      	strb	r3, [r7, #15]
    break;
 800bdee:	e008      	b.n	800be02 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf4:	e005      	b.n	800be02 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdfa:	e002      	b.n	800be02 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800be00:	bf00      	nop
  }
  return usb_status;
 800be02:	7bfb      	ldrb	r3, [r7, #15]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be24:	2b00      	cmp	r3, #0
 800be26:	da0b      	bge.n	800be40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be28:	78fb      	ldrb	r3, [r7, #3]
 800be2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be2e:	68f9      	ldr	r1, [r7, #12]
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	440b      	add	r3, r1
 800be3a:	3312      	adds	r3, #18
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	e00b      	b.n	800be58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	4613      	mov	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800be56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	460b      	mov	r3, r1
 800be6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be7e:	78fa      	ldrb	r2, [r7, #3]
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f7f8 fa49 	bl	800431a <HAL_PCD_SetAddress>
 800be88:	4603      	mov	r3, r0
 800be8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	2b03      	cmp	r3, #3
 800be90:	d816      	bhi.n	800bec0 <USBD_LL_SetUSBAddress+0x5c>
 800be92:	a201      	add	r2, pc, #4	@ (adr r2, 800be98 <USBD_LL_SetUSBAddress+0x34>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800bea9 	.word	0x0800bea9
 800be9c:	0800beaf 	.word	0x0800beaf
 800bea0:	0800beb5 	.word	0x0800beb5
 800bea4:	0800bebb 	.word	0x0800bebb
    case HAL_OK :
      usb_status = USBD_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
    break;
 800beac:	e00b      	b.n	800bec6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beae:	2303      	movs	r3, #3
 800beb0:	73fb      	strb	r3, [r7, #15]
    break;
 800beb2:	e008      	b.n	800bec6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800beb4:	2301      	movs	r3, #1
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	e005      	b.n	800bec6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beba:	2303      	movs	r3, #3
 800bebc:	73fb      	strb	r3, [r7, #15]
    break;
 800bebe:	e002      	b.n	800bec6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bec0:	2303      	movs	r3, #3
 800bec2:	73fb      	strb	r3, [r7, #15]
    break;
 800bec4:	bf00      	nop
  }
  return usb_status;
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	607a      	str	r2, [r7, #4]
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	460b      	mov	r3, r1
 800bede:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bee4:	2300      	movs	r3, #0
 800bee6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800beee:	7af9      	ldrb	r1, [r7, #11]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	f7f8 fb25 	bl	8004542 <HAL_PCD_EP_Transmit>
 800bef8:	4603      	mov	r3, r0
 800befa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800befc:	7dbb      	ldrb	r3, [r7, #22]
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d816      	bhi.n	800bf30 <USBD_LL_Transmit+0x60>
 800bf02:	a201      	add	r2, pc, #4	@ (adr r2, 800bf08 <USBD_LL_Transmit+0x38>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf19 	.word	0x0800bf19
 800bf0c:	0800bf1f 	.word	0x0800bf1f
 800bf10:	0800bf25 	.word	0x0800bf25
 800bf14:	0800bf2b 	.word	0x0800bf2b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf1c:	e00b      	b.n	800bf36 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	75fb      	strb	r3, [r7, #23]
    break;
 800bf22:	e008      	b.n	800bf36 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf24:	2301      	movs	r3, #1
 800bf26:	75fb      	strb	r3, [r7, #23]
    break;
 800bf28:	e005      	b.n	800bf36 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	75fb      	strb	r3, [r7, #23]
    break;
 800bf2e:	e002      	b.n	800bf36 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf30:	2303      	movs	r3, #3
 800bf32:	75fb      	strb	r3, [r7, #23]
    break;
 800bf34:	bf00      	nop
  }
  return usb_status;
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	607a      	str	r2, [r7, #4]
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf5e:	7af9      	ldrb	r1, [r7, #11]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	f7f8 faa4 	bl	80044b0 <HAL_PCD_EP_Receive>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf6c:	7dbb      	ldrb	r3, [r7, #22]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d816      	bhi.n	800bfa0 <USBD_LL_PrepareReceive+0x60>
 800bf72:	a201      	add	r2, pc, #4	@ (adr r2, 800bf78 <USBD_LL_PrepareReceive+0x38>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf89 	.word	0x0800bf89
 800bf7c:	0800bf8f 	.word	0x0800bf8f
 800bf80:	0800bf95 	.word	0x0800bf95
 800bf84:	0800bf9b 	.word	0x0800bf9b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf8c:	e00b      	b.n	800bfa6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	75fb      	strb	r3, [r7, #23]
    break;
 800bf92:	e008      	b.n	800bfa6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf94:	2301      	movs	r3, #1
 800bf96:	75fb      	strb	r3, [r7, #23]
    break;
 800bf98:	e005      	b.n	800bfa6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	75fb      	strb	r3, [r7, #23]
    break;
 800bf9e:	e002      	b.n	800bfa6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	75fb      	strb	r3, [r7, #23]
    break;
 800bfa4:	bf00      	nop
  }
  return usb_status;
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfc2:	78fa      	ldrb	r2, [r7, #3]
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7f8 faa3 	bl	8004512 <HAL_PCD_EP_GetRxCount>
 800bfcc:	4603      	mov	r3, r0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bfe4:	78fb      	ldrb	r3, [r7, #3]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d002      	beq.n	800bff0 <HAL_PCDEx_LPM_Callback+0x18>
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d013      	beq.n	800c016 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bfee:	e023      	b.n	800c038 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	7a9b      	ldrb	r3, [r3, #10]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d007      	beq.n	800c008 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bff8:	f000 f83c 	bl	800c074 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bffc:	4b10      	ldr	r3, [pc, #64]	@ (800c040 <HAL_PCDEx_LPM_Callback+0x68>)
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	4a0f      	ldr	r2, [pc, #60]	@ (800c040 <HAL_PCDEx_LPM_Callback+0x68>)
 800c002:	f023 0306 	bic.w	r3, r3, #6
 800c006:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fab5 	bl	800a57e <USBD_LL_Resume>
    break;
 800c014:	e010      	b.n	800c038 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fa92 	bl	800a546 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7a9b      	ldrb	r3, [r3, #10]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d005      	beq.n	800c036 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c02a:	4b05      	ldr	r3, [pc, #20]	@ (800c040 <HAL_PCDEx_LPM_Callback+0x68>)
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	4a04      	ldr	r2, [pc, #16]	@ (800c040 <HAL_PCDEx_LPM_Callback+0x68>)
 800c030:	f043 0306 	orr.w	r3, r3, #6
 800c034:	6113      	str	r3, [r2, #16]
    break;
 800c036:	bf00      	nop
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	e000ed00 	.word	0xe000ed00

0800c044 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c04c:	4b03      	ldr	r3, [pc, #12]	@ (800c05c <USBD_static_malloc+0x18>)
}
 800c04e:	4618      	mov	r0, r3
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	20002790 	.word	0x20002790

0800c060 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]

}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c078:	f7f6 fa94 	bl	80025a4 <SystemClock_Config>
}
 800c07c:	bf00      	nop
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <memset>:
 800c080:	4402      	add	r2, r0
 800c082:	4603      	mov	r3, r0
 800c084:	4293      	cmp	r3, r2
 800c086:	d100      	bne.n	800c08a <memset+0xa>
 800c088:	4770      	bx	lr
 800c08a:	f803 1b01 	strb.w	r1, [r3], #1
 800c08e:	e7f9      	b.n	800c084 <memset+0x4>

0800c090 <__errno>:
 800c090:	4b01      	ldr	r3, [pc, #4]	@ (800c098 <__errno+0x8>)
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	20000a90 	.word	0x20000a90

0800c09c <__libc_init_array>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	4d0d      	ldr	r5, [pc, #52]	@ (800c0d4 <__libc_init_array+0x38>)
 800c0a0:	4c0d      	ldr	r4, [pc, #52]	@ (800c0d8 <__libc_init_array+0x3c>)
 800c0a2:	1b64      	subs	r4, r4, r5
 800c0a4:	10a4      	asrs	r4, r4, #2
 800c0a6:	2600      	movs	r6, #0
 800c0a8:	42a6      	cmp	r6, r4
 800c0aa:	d109      	bne.n	800c0c0 <__libc_init_array+0x24>
 800c0ac:	4d0b      	ldr	r5, [pc, #44]	@ (800c0dc <__libc_init_array+0x40>)
 800c0ae:	4c0c      	ldr	r4, [pc, #48]	@ (800c0e0 <__libc_init_array+0x44>)
 800c0b0:	f001 fcc8 	bl	800da44 <_init>
 800c0b4:	1b64      	subs	r4, r4, r5
 800c0b6:	10a4      	asrs	r4, r4, #2
 800c0b8:	2600      	movs	r6, #0
 800c0ba:	42a6      	cmp	r6, r4
 800c0bc:	d105      	bne.n	800c0ca <__libc_init_array+0x2e>
 800c0be:	bd70      	pop	{r4, r5, r6, pc}
 800c0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0c4:	4798      	blx	r3
 800c0c6:	3601      	adds	r6, #1
 800c0c8:	e7ee      	b.n	800c0a8 <__libc_init_array+0xc>
 800c0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ce:	4798      	blx	r3
 800c0d0:	3601      	adds	r6, #1
 800c0d2:	e7f2      	b.n	800c0ba <__libc_init_array+0x1e>
 800c0d4:	0800dd58 	.word	0x0800dd58
 800c0d8:	0800dd58 	.word	0x0800dd58
 800c0dc:	0800dd58 	.word	0x0800dd58
 800c0e0:	0800dd5c 	.word	0x0800dd5c

0800c0e4 <memcpy>:
 800c0e4:	440a      	add	r2, r1
 800c0e6:	4291      	cmp	r1, r2
 800c0e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0ec:	d100      	bne.n	800c0f0 <memcpy+0xc>
 800c0ee:	4770      	bx	lr
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0fa:	4291      	cmp	r1, r2
 800c0fc:	d1f9      	bne.n	800c0f2 <memcpy+0xe>
 800c0fe:	bd10      	pop	{r4, pc}

0800c100 <exp>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	ed2d 8b02 	vpush	{d8}
 800c106:	ec55 4b10 	vmov	r4, r5, d0
 800c10a:	f000 f97d 	bl	800c408 <__ieee754_exp>
 800c10e:	eeb0 8a40 	vmov.f32	s16, s0
 800c112:	eef0 8a60 	vmov.f32	s17, s1
 800c116:	ec45 4b10 	vmov	d0, r4, r5
 800c11a:	f000 f917 	bl	800c34c <finite>
 800c11e:	b168      	cbz	r0, 800c13c <exp+0x3c>
 800c120:	a317      	add	r3, pc, #92	@ (adr r3, 800c180 <exp+0x80>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 fc9d 	bl	8000a68 <__aeabi_dcmpgt>
 800c12e:	b160      	cbz	r0, 800c14a <exp+0x4a>
 800c130:	f7ff ffae 	bl	800c090 <__errno>
 800c134:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800c170 <exp+0x70>
 800c138:	2322      	movs	r3, #34	@ 0x22
 800c13a:	6003      	str	r3, [r0, #0]
 800c13c:	eeb0 0a48 	vmov.f32	s0, s16
 800c140:	eef0 0a68 	vmov.f32	s1, s17
 800c144:	ecbd 8b02 	vpop	{d8}
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	a30f      	add	r3, pc, #60	@ (adr r3, 800c188 <exp+0x88>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	4620      	mov	r0, r4
 800c152:	4629      	mov	r1, r5
 800c154:	f7f4 fc6a 	bl	8000a2c <__aeabi_dcmplt>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0ef      	beq.n	800c13c <exp+0x3c>
 800c15c:	f7ff ff98 	bl	800c090 <__errno>
 800c160:	2322      	movs	r3, #34	@ 0x22
 800c162:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800c178 <exp+0x78>
 800c166:	6003      	str	r3, [r0, #0]
 800c168:	e7e8      	b.n	800c13c <exp+0x3c>
 800c16a:	bf00      	nop
 800c16c:	f3af 8000 	nop.w
 800c170:	00000000 	.word	0x00000000
 800c174:	7ff00000 	.word	0x7ff00000
	...
 800c180:	fefa39ef 	.word	0xfefa39ef
 800c184:	40862e42 	.word	0x40862e42
 800c188:	d52d3051 	.word	0xd52d3051
 800c18c:	c0874910 	.word	0xc0874910

0800c190 <fmod>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	ed2d 8b02 	vpush	{d8}
 800c196:	ec57 6b10 	vmov	r6, r7, d0
 800c19a:	ec55 4b11 	vmov	r4, r5, d1
 800c19e:	f000 faad 	bl	800c6fc <__ieee754_fmod>
 800c1a2:	4622      	mov	r2, r4
 800c1a4:	462b      	mov	r3, r5
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4639      	mov	r1, r7
 800c1aa:	eeb0 8a40 	vmov.f32	s16, s0
 800c1ae:	eef0 8a60 	vmov.f32	s17, s1
 800c1b2:	f7f4 fc63 	bl	8000a7c <__aeabi_dcmpun>
 800c1b6:	b990      	cbnz	r0, 800c1de <fmod+0x4e>
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fc2a 	bl	8000a18 <__aeabi_dcmpeq>
 800c1c4:	b158      	cbz	r0, 800c1de <fmod+0x4e>
 800c1c6:	f7ff ff63 	bl	800c090 <__errno>
 800c1ca:	2321      	movs	r3, #33	@ 0x21
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	f7f4 fae1 	bl	800079c <__aeabi_ddiv>
 800c1da:	ec41 0b18 	vmov	d8, r0, r1
 800c1de:	eeb0 0a48 	vmov.f32	s0, s16
 800c1e2:	eef0 0a68 	vmov.f32	s1, s17
 800c1e6:	ecbd 8b02 	vpop	{d8}
 800c1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ec:	0000      	movs	r0, r0
	...

0800c1f0 <log>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	ed2d 8b02 	vpush	{d8}
 800c1f6:	ec55 4b10 	vmov	r4, r5, d0
 800c1fa:	f000 fb89 	bl	800c910 <__ieee754_log>
 800c1fe:	4622      	mov	r2, r4
 800c200:	462b      	mov	r3, r5
 800c202:	4620      	mov	r0, r4
 800c204:	4629      	mov	r1, r5
 800c206:	eeb0 8a40 	vmov.f32	s16, s0
 800c20a:	eef0 8a60 	vmov.f32	s17, s1
 800c20e:	f7f4 fc35 	bl	8000a7c <__aeabi_dcmpun>
 800c212:	b998      	cbnz	r0, 800c23c <log+0x4c>
 800c214:	2200      	movs	r2, #0
 800c216:	2300      	movs	r3, #0
 800c218:	4620      	mov	r0, r4
 800c21a:	4629      	mov	r1, r5
 800c21c:	f7f4 fc24 	bl	8000a68 <__aeabi_dcmpgt>
 800c220:	b960      	cbnz	r0, 800c23c <log+0x4c>
 800c222:	2200      	movs	r2, #0
 800c224:	2300      	movs	r3, #0
 800c226:	4620      	mov	r0, r4
 800c228:	4629      	mov	r1, r5
 800c22a:	f7f4 fbf5 	bl	8000a18 <__aeabi_dcmpeq>
 800c22e:	b160      	cbz	r0, 800c24a <log+0x5a>
 800c230:	f7ff ff2e 	bl	800c090 <__errno>
 800c234:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800c260 <log+0x70>
 800c238:	2322      	movs	r3, #34	@ 0x22
 800c23a:	6003      	str	r3, [r0, #0]
 800c23c:	eeb0 0a48 	vmov.f32	s0, s16
 800c240:	eef0 0a68 	vmov.f32	s1, s17
 800c244:	ecbd 8b02 	vpop	{d8}
 800c248:	bd38      	pop	{r3, r4, r5, pc}
 800c24a:	f7ff ff21 	bl	800c090 <__errno>
 800c24e:	ecbd 8b02 	vpop	{d8}
 800c252:	2321      	movs	r3, #33	@ 0x21
 800c254:	6003      	str	r3, [r0, #0]
 800c256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c25a:	4803      	ldr	r0, [pc, #12]	@ (800c268 <log+0x78>)
 800c25c:	f000 b884 	b.w	800c368 <nan>
 800c260:	00000000 	.word	0x00000000
 800c264:	fff00000 	.word	0xfff00000
 800c268:	0800dce0 	.word	0x0800dce0

0800c26c <pow>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	ed2d 8b02 	vpush	{d8}
 800c272:	eeb0 8a40 	vmov.f32	s16, s0
 800c276:	eef0 8a60 	vmov.f32	s17, s1
 800c27a:	ec55 4b11 	vmov	r4, r5, d1
 800c27e:	f000 fcff 	bl	800cc80 <__ieee754_pow>
 800c282:	4622      	mov	r2, r4
 800c284:	462b      	mov	r3, r5
 800c286:	4620      	mov	r0, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	ec57 6b10 	vmov	r6, r7, d0
 800c28e:	f7f4 fbf5 	bl	8000a7c <__aeabi_dcmpun>
 800c292:	2800      	cmp	r0, #0
 800c294:	d13b      	bne.n	800c30e <pow+0xa2>
 800c296:	ec51 0b18 	vmov	r0, r1, d8
 800c29a:	2200      	movs	r2, #0
 800c29c:	2300      	movs	r3, #0
 800c29e:	f7f4 fbbb 	bl	8000a18 <__aeabi_dcmpeq>
 800c2a2:	b1b8      	cbz	r0, 800c2d4 <pow+0x68>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	f7f4 fbb4 	bl	8000a18 <__aeabi_dcmpeq>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d146      	bne.n	800c342 <pow+0xd6>
 800c2b4:	ec45 4b10 	vmov	d0, r4, r5
 800c2b8:	f000 f848 	bl	800c34c <finite>
 800c2bc:	b338      	cbz	r0, 800c30e <pow+0xa2>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	f7f4 fbb1 	bl	8000a2c <__aeabi_dcmplt>
 800c2ca:	b300      	cbz	r0, 800c30e <pow+0xa2>
 800c2cc:	f7ff fee0 	bl	800c090 <__errno>
 800c2d0:	2322      	movs	r3, #34	@ 0x22
 800c2d2:	e01b      	b.n	800c30c <pow+0xa0>
 800c2d4:	ec47 6b10 	vmov	d0, r6, r7
 800c2d8:	f000 f838 	bl	800c34c <finite>
 800c2dc:	b9e0      	cbnz	r0, 800c318 <pow+0xac>
 800c2de:	eeb0 0a48 	vmov.f32	s0, s16
 800c2e2:	eef0 0a68 	vmov.f32	s1, s17
 800c2e6:	f000 f831 	bl	800c34c <finite>
 800c2ea:	b1a8      	cbz	r0, 800c318 <pow+0xac>
 800c2ec:	ec45 4b10 	vmov	d0, r4, r5
 800c2f0:	f000 f82c 	bl	800c34c <finite>
 800c2f4:	b180      	cbz	r0, 800c318 <pow+0xac>
 800c2f6:	4632      	mov	r2, r6
 800c2f8:	463b      	mov	r3, r7
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	f7f4 fbbd 	bl	8000a7c <__aeabi_dcmpun>
 800c302:	2800      	cmp	r0, #0
 800c304:	d0e2      	beq.n	800c2cc <pow+0x60>
 800c306:	f7ff fec3 	bl	800c090 <__errno>
 800c30a:	2321      	movs	r3, #33	@ 0x21
 800c30c:	6003      	str	r3, [r0, #0]
 800c30e:	ecbd 8b02 	vpop	{d8}
 800c312:	ec47 6b10 	vmov	d0, r6, r7
 800c316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c318:	2200      	movs	r2, #0
 800c31a:	2300      	movs	r3, #0
 800c31c:	4630      	mov	r0, r6
 800c31e:	4639      	mov	r1, r7
 800c320:	f7f4 fb7a 	bl	8000a18 <__aeabi_dcmpeq>
 800c324:	2800      	cmp	r0, #0
 800c326:	d0f2      	beq.n	800c30e <pow+0xa2>
 800c328:	eeb0 0a48 	vmov.f32	s0, s16
 800c32c:	eef0 0a68 	vmov.f32	s1, s17
 800c330:	f000 f80c 	bl	800c34c <finite>
 800c334:	2800      	cmp	r0, #0
 800c336:	d0ea      	beq.n	800c30e <pow+0xa2>
 800c338:	ec45 4b10 	vmov	d0, r4, r5
 800c33c:	f000 f806 	bl	800c34c <finite>
 800c340:	e7c3      	b.n	800c2ca <pow+0x5e>
 800c342:	4f01      	ldr	r7, [pc, #4]	@ (800c348 <pow+0xdc>)
 800c344:	2600      	movs	r6, #0
 800c346:	e7e2      	b.n	800c30e <pow+0xa2>
 800c348:	3ff00000 	.word	0x3ff00000

0800c34c <finite>:
 800c34c:	b082      	sub	sp, #8
 800c34e:	ed8d 0b00 	vstr	d0, [sp]
 800c352:	9801      	ldr	r0, [sp, #4]
 800c354:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c358:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c35c:	0fc0      	lsrs	r0, r0, #31
 800c35e:	b002      	add	sp, #8
 800c360:	4770      	bx	lr
 800c362:	0000      	movs	r0, r0
 800c364:	0000      	movs	r0, r0
	...

0800c368 <nan>:
 800c368:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c370 <nan+0x8>
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	00000000 	.word	0x00000000
 800c374:	7ff80000 	.word	0x7ff80000

0800c378 <round>:
 800c378:	ec51 0b10 	vmov	r0, r1, d0
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c382:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c386:	2a13      	cmp	r2, #19
 800c388:	460b      	mov	r3, r1
 800c38a:	4605      	mov	r5, r0
 800c38c:	dc1b      	bgt.n	800c3c6 <round+0x4e>
 800c38e:	2a00      	cmp	r2, #0
 800c390:	da0b      	bge.n	800c3aa <round+0x32>
 800c392:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c396:	3201      	adds	r2, #1
 800c398:	bf04      	itt	eq
 800c39a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c39e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	e015      	b.n	800c3d6 <round+0x5e>
 800c3aa:	4c15      	ldr	r4, [pc, #84]	@ (800c400 <round+0x88>)
 800c3ac:	4114      	asrs	r4, r2
 800c3ae:	ea04 0601 	and.w	r6, r4, r1
 800c3b2:	4306      	orrs	r6, r0
 800c3b4:	d00f      	beq.n	800c3d6 <round+0x5e>
 800c3b6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c3ba:	fa41 f202 	asr.w	r2, r1, r2
 800c3be:	4413      	add	r3, r2
 800c3c0:	ea23 0304 	bic.w	r3, r3, r4
 800c3c4:	e7ed      	b.n	800c3a2 <round+0x2a>
 800c3c6:	2a33      	cmp	r2, #51	@ 0x33
 800c3c8:	dd08      	ble.n	800c3dc <round+0x64>
 800c3ca:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c3ce:	d102      	bne.n	800c3d6 <round+0x5e>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	f7f3 ff03 	bl	80001dc <__adddf3>
 800c3d6:	ec41 0b10 	vmov	d0, r0, r1
 800c3da:	bd70      	pop	{r4, r5, r6, pc}
 800c3dc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c3e0:	f04f 34ff 	mov.w	r4, #4294967295
 800c3e4:	40f4      	lsrs	r4, r6
 800c3e6:	4204      	tst	r4, r0
 800c3e8:	d0f5      	beq.n	800c3d6 <round+0x5e>
 800c3ea:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	408a      	lsls	r2, r1
 800c3f2:	1952      	adds	r2, r2, r5
 800c3f4:	bf28      	it	cs
 800c3f6:	3301      	addcs	r3, #1
 800c3f8:	ea22 0204 	bic.w	r2, r2, r4
 800c3fc:	e7d2      	b.n	800c3a4 <round+0x2c>
 800c3fe:	bf00      	nop
 800c400:	000fffff 	.word	0x000fffff
 800c404:	00000000 	.word	0x00000000

0800c408 <__ieee754_exp>:
 800c408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c40c:	ec55 4b10 	vmov	r4, r5, d0
 800c410:	49b1      	ldr	r1, [pc, #708]	@ (800c6d8 <__ieee754_exp+0x2d0>)
 800c412:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c416:	428a      	cmp	r2, r1
 800c418:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800c41c:	d936      	bls.n	800c48c <__ieee754_exp+0x84>
 800c41e:	49af      	ldr	r1, [pc, #700]	@ (800c6dc <__ieee754_exp+0x2d4>)
 800c420:	428a      	cmp	r2, r1
 800c422:	d914      	bls.n	800c44e <__ieee754_exp+0x46>
 800c424:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c428:	4323      	orrs	r3, r4
 800c42a:	4622      	mov	r2, r4
 800c42c:	d007      	beq.n	800c43e <__ieee754_exp+0x36>
 800c42e:	462b      	mov	r3, r5
 800c430:	4620      	mov	r0, r4
 800c432:	4629      	mov	r1, r5
 800c434:	f7f3 fed2 	bl	80001dc <__adddf3>
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	e002      	b.n	800c444 <__ieee754_exp+0x3c>
 800c43e:	2e00      	cmp	r6, #0
 800c440:	f040 8118 	bne.w	800c674 <__ieee754_exp+0x26c>
 800c444:	ec45 4b10 	vmov	d0, r4, r5
 800c448:	b004      	add	sp, #16
 800c44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44e:	a38c      	add	r3, pc, #560	@ (adr r3, 800c680 <__ieee754_exp+0x278>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	4620      	mov	r0, r4
 800c456:	4629      	mov	r1, r5
 800c458:	f7f4 fb06 	bl	8000a68 <__aeabi_dcmpgt>
 800c45c:	4607      	mov	r7, r0
 800c45e:	b128      	cbz	r0, 800c46c <__ieee754_exp+0x64>
 800c460:	2000      	movs	r0, #0
 800c462:	b004      	add	sp, #16
 800c464:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	f001 ba0a 	b.w	800d880 <__math_oflow>
 800c46c:	a386      	add	r3, pc, #536	@ (adr r3, 800c688 <__ieee754_exp+0x280>)
 800c46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c472:	4620      	mov	r0, r4
 800c474:	4629      	mov	r1, r5
 800c476:	f7f4 fad9 	bl	8000a2c <__aeabi_dcmplt>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	f000 8087 	beq.w	800c58e <__ieee754_exp+0x186>
 800c480:	4638      	mov	r0, r7
 800c482:	b004      	add	sp, #16
 800c484:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	f001 b9f2 	b.w	800d870 <__math_uflow>
 800c48c:	4b94      	ldr	r3, [pc, #592]	@ (800c6e0 <__ieee754_exp+0x2d8>)
 800c48e:	429a      	cmp	r2, r3
 800c490:	f240 80a9 	bls.w	800c5e6 <__ieee754_exp+0x1de>
 800c494:	4b93      	ldr	r3, [pc, #588]	@ (800c6e4 <__ieee754_exp+0x2dc>)
 800c496:	429a      	cmp	r2, r3
 800c498:	d879      	bhi.n	800c58e <__ieee754_exp+0x186>
 800c49a:	4b93      	ldr	r3, [pc, #588]	@ (800c6e8 <__ieee754_exp+0x2e0>)
 800c49c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f3 fe96 	bl	80001d8 <__aeabi_dsub>
 800c4ac:	4b8f      	ldr	r3, [pc, #572]	@ (800c6ec <__ieee754_exp+0x2e4>)
 800c4ae:	00f7      	lsls	r7, r6, #3
 800c4b0:	443b      	add	r3, r7
 800c4b2:	ed93 7b00 	vldr	d7, [r3]
 800c4b6:	ed8d 7b00 	vstr	d7, [sp]
 800c4ba:	f1c6 0a01 	rsb	sl, r6, #1
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	ebaa 0a06 	sub.w	sl, sl, r6
 800c4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	f7f3 fe83 	bl	80001d8 <__aeabi_dsub>
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	462b      	mov	r3, r5
 800c4da:	4620      	mov	r0, r4
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7f4 f833 	bl	8000548 <__aeabi_dmul>
 800c4e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c690 <__ieee754_exp+0x288>)
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	460f      	mov	r7, r1
 800c4ec:	f7f4 f82c 	bl	8000548 <__aeabi_dmul>
 800c4f0:	a369      	add	r3, pc, #420	@ (adr r3, 800c698 <__ieee754_exp+0x290>)
 800c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f6:	f7f3 fe6f 	bl	80001d8 <__aeabi_dsub>
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	463b      	mov	r3, r7
 800c4fe:	f7f4 f823 	bl	8000548 <__aeabi_dmul>
 800c502:	a367      	add	r3, pc, #412	@ (adr r3, 800c6a0 <__ieee754_exp+0x298>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f3 fe68 	bl	80001dc <__adddf3>
 800c50c:	4632      	mov	r2, r6
 800c50e:	463b      	mov	r3, r7
 800c510:	f7f4 f81a 	bl	8000548 <__aeabi_dmul>
 800c514:	a364      	add	r3, pc, #400	@ (adr r3, 800c6a8 <__ieee754_exp+0x2a0>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 fe5d 	bl	80001d8 <__aeabi_dsub>
 800c51e:	4632      	mov	r2, r6
 800c520:	463b      	mov	r3, r7
 800c522:	f7f4 f811 	bl	8000548 <__aeabi_dmul>
 800c526:	a362      	add	r3, pc, #392	@ (adr r3, 800c6b0 <__ieee754_exp+0x2a8>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f7f3 fe56 	bl	80001dc <__adddf3>
 800c530:	4632      	mov	r2, r6
 800c532:	463b      	mov	r3, r7
 800c534:	f7f4 f808 	bl	8000548 <__aeabi_dmul>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4620      	mov	r0, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	f7f3 fe4a 	bl	80001d8 <__aeabi_dsub>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4606      	mov	r6, r0
 800c54a:	460f      	mov	r7, r1
 800c54c:	4620      	mov	r0, r4
 800c54e:	4629      	mov	r1, r5
 800c550:	f7f3 fffa 	bl	8000548 <__aeabi_dmul>
 800c554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c558:	f1ba 0f00 	cmp.w	sl, #0
 800c55c:	d15c      	bne.n	800c618 <__ieee754_exp+0x210>
 800c55e:	2200      	movs	r2, #0
 800c560:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f3 fe36 	bl	80001d8 <__aeabi_dsub>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c574:	f7f4 f912 	bl	800079c <__aeabi_ddiv>
 800c578:	4622      	mov	r2, r4
 800c57a:	462b      	mov	r3, r5
 800c57c:	f7f3 fe2c 	bl	80001d8 <__aeabi_dsub>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	2000      	movs	r0, #0
 800c586:	495a      	ldr	r1, [pc, #360]	@ (800c6f0 <__ieee754_exp+0x2e8>)
 800c588:	f7f3 fe26 	bl	80001d8 <__aeabi_dsub>
 800c58c:	e754      	b.n	800c438 <__ieee754_exp+0x30>
 800c58e:	4b59      	ldr	r3, [pc, #356]	@ (800c6f4 <__ieee754_exp+0x2ec>)
 800c590:	4620      	mov	r0, r4
 800c592:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c596:	4629      	mov	r1, r5
 800c598:	a347      	add	r3, pc, #284	@ (adr r3, 800c6b8 <__ieee754_exp+0x2b0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 ffd3 	bl	8000548 <__aeabi_dmul>
 800c5a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c5a6:	f7f3 fe19 	bl	80001dc <__adddf3>
 800c5aa:	f7f4 fa7d 	bl	8000aa8 <__aeabi_d2iz>
 800c5ae:	4682      	mov	sl, r0
 800c5b0:	f7f3 ff60 	bl	8000474 <__aeabi_i2d>
 800c5b4:	a342      	add	r3, pc, #264	@ (adr r3, 800c6c0 <__ieee754_exp+0x2b8>)
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	460f      	mov	r7, r1
 800c5be:	f7f3 ffc3 	bl	8000548 <__aeabi_dmul>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f3 fe05 	bl	80001d8 <__aeabi_dsub>
 800c5ce:	a33e      	add	r3, pc, #248	@ (adr r3, 800c6c8 <__ieee754_exp+0x2c0>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	4689      	mov	r9, r1
 800c5d8:	4630      	mov	r0, r6
 800c5da:	4639      	mov	r1, r7
 800c5dc:	f7f3 ffb4 	bl	8000548 <__aeabi_dmul>
 800c5e0:	e9cd 0100 	strd	r0, r1, [sp]
 800c5e4:	e76f      	b.n	800c4c6 <__ieee754_exp+0xbe>
 800c5e6:	4b44      	ldr	r3, [pc, #272]	@ (800c6f8 <__ieee754_exp+0x2f0>)
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d810      	bhi.n	800c60e <__ieee754_exp+0x206>
 800c5ec:	a338      	add	r3, pc, #224	@ (adr r3, 800c6d0 <__ieee754_exp+0x2c8>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	f7f3 fdf1 	bl	80001dc <__adddf3>
 800c5fa:	4b3d      	ldr	r3, [pc, #244]	@ (800c6f0 <__ieee754_exp+0x2e8>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f7f4 fa33 	bl	8000a68 <__aeabi_dcmpgt>
 800c602:	b138      	cbz	r0, 800c614 <__ieee754_exp+0x20c>
 800c604:	4b3a      	ldr	r3, [pc, #232]	@ (800c6f0 <__ieee754_exp+0x2e8>)
 800c606:	2200      	movs	r2, #0
 800c608:	4620      	mov	r0, r4
 800c60a:	4629      	mov	r1, r5
 800c60c:	e712      	b.n	800c434 <__ieee754_exp+0x2c>
 800c60e:	f04f 0a00 	mov.w	sl, #0
 800c612:	e760      	b.n	800c4d6 <__ieee754_exp+0xce>
 800c614:	4682      	mov	sl, r0
 800c616:	e75e      	b.n	800c4d6 <__ieee754_exp+0xce>
 800c618:	4632      	mov	r2, r6
 800c61a:	463b      	mov	r3, r7
 800c61c:	2000      	movs	r0, #0
 800c61e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c622:	f7f3 fdd9 	bl	80001d8 <__aeabi_dsub>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c62e:	f7f4 f8b5 	bl	800079c <__aeabi_ddiv>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c63a:	f7f3 fdcd 	bl	80001d8 <__aeabi_dsub>
 800c63e:	4642      	mov	r2, r8
 800c640:	464b      	mov	r3, r9
 800c642:	f7f3 fdc9 	bl	80001d8 <__aeabi_dsub>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	2000      	movs	r0, #0
 800c64c:	4928      	ldr	r1, [pc, #160]	@ (800c6f0 <__ieee754_exp+0x2e8>)
 800c64e:	f7f3 fdc3 	bl	80001d8 <__aeabi_dsub>
 800c652:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800c656:	4592      	cmp	sl, r2
 800c658:	db02      	blt.n	800c660 <__ieee754_exp+0x258>
 800c65a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c65e:	e6eb      	b.n	800c438 <__ieee754_exp+0x30>
 800c660:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800c664:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c668:	2200      	movs	r2, #0
 800c66a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800c66e:	f7f3 ff6b 	bl	8000548 <__aeabi_dmul>
 800c672:	e6e1      	b.n	800c438 <__ieee754_exp+0x30>
 800c674:	2400      	movs	r4, #0
 800c676:	2500      	movs	r5, #0
 800c678:	e6e4      	b.n	800c444 <__ieee754_exp+0x3c>
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w
 800c680:	fefa39ef 	.word	0xfefa39ef
 800c684:	40862e42 	.word	0x40862e42
 800c688:	d52d3051 	.word	0xd52d3051
 800c68c:	c0874910 	.word	0xc0874910
 800c690:	72bea4d0 	.word	0x72bea4d0
 800c694:	3e663769 	.word	0x3e663769
 800c698:	c5d26bf1 	.word	0xc5d26bf1
 800c69c:	3ebbbd41 	.word	0x3ebbbd41
 800c6a0:	af25de2c 	.word	0xaf25de2c
 800c6a4:	3f11566a 	.word	0x3f11566a
 800c6a8:	16bebd93 	.word	0x16bebd93
 800c6ac:	3f66c16c 	.word	0x3f66c16c
 800c6b0:	5555553e 	.word	0x5555553e
 800c6b4:	3fc55555 	.word	0x3fc55555
 800c6b8:	652b82fe 	.word	0x652b82fe
 800c6bc:	3ff71547 	.word	0x3ff71547
 800c6c0:	fee00000 	.word	0xfee00000
 800c6c4:	3fe62e42 	.word	0x3fe62e42
 800c6c8:	35793c76 	.word	0x35793c76
 800c6cc:	3dea39ef 	.word	0x3dea39ef
 800c6d0:	8800759c 	.word	0x8800759c
 800c6d4:	7e37e43c 	.word	0x7e37e43c
 800c6d8:	40862e41 	.word	0x40862e41
 800c6dc:	7fefffff 	.word	0x7fefffff
 800c6e0:	3fd62e42 	.word	0x3fd62e42
 800c6e4:	3ff0a2b1 	.word	0x3ff0a2b1
 800c6e8:	0800dcf8 	.word	0x0800dcf8
 800c6ec:	0800dce8 	.word	0x0800dce8
 800c6f0:	3ff00000 	.word	0x3ff00000
 800c6f4:	0800dd08 	.word	0x0800dd08
 800c6f8:	3defffff 	.word	0x3defffff

0800c6fc <__ieee754_fmod>:
 800c6fc:	ec53 2b11 	vmov	r2, r3, d1
 800c700:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800c704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c708:	ea52 040c 	orrs.w	r4, r2, ip
 800c70c:	ec51 0b10 	vmov	r0, r1, d0
 800c710:	461e      	mov	r6, r3
 800c712:	4617      	mov	r7, r2
 800c714:	4696      	mov	lr, r2
 800c716:	d00c      	beq.n	800c732 <__ieee754_fmod+0x36>
 800c718:	4c77      	ldr	r4, [pc, #476]	@ (800c8f8 <__ieee754_fmod+0x1fc>)
 800c71a:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800c71e:	45a0      	cmp	r8, r4
 800c720:	4689      	mov	r9, r1
 800c722:	d806      	bhi.n	800c732 <__ieee754_fmod+0x36>
 800c724:	4254      	negs	r4, r2
 800c726:	4d75      	ldr	r5, [pc, #468]	@ (800c8fc <__ieee754_fmod+0x200>)
 800c728:	4314      	orrs	r4, r2
 800c72a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800c72e:	42ac      	cmp	r4, r5
 800c730:	d909      	bls.n	800c746 <__ieee754_fmod+0x4a>
 800c732:	f7f3 ff09 	bl	8000548 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	f7f4 f82f 	bl	800079c <__aeabi_ddiv>
 800c73e:	ec41 0b10 	vmov	d0, r0, r1
 800c742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c746:	45e0      	cmp	r8, ip
 800c748:	4682      	mov	sl, r0
 800c74a:	4604      	mov	r4, r0
 800c74c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c750:	dc09      	bgt.n	800c766 <__ieee754_fmod+0x6a>
 800c752:	dbf4      	blt.n	800c73e <__ieee754_fmod+0x42>
 800c754:	4282      	cmp	r2, r0
 800c756:	d8f2      	bhi.n	800c73e <__ieee754_fmod+0x42>
 800c758:	d105      	bne.n	800c766 <__ieee754_fmod+0x6a>
 800c75a:	4b69      	ldr	r3, [pc, #420]	@ (800c900 <__ieee754_fmod+0x204>)
 800c75c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800c760:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c764:	e7eb      	b.n	800c73e <__ieee754_fmod+0x42>
 800c766:	4a65      	ldr	r2, [pc, #404]	@ (800c8fc <__ieee754_fmod+0x200>)
 800c768:	ea19 0f02 	tst.w	r9, r2
 800c76c:	d148      	bne.n	800c800 <__ieee754_fmod+0x104>
 800c76e:	f1b8 0f00 	cmp.w	r8, #0
 800c772:	d13d      	bne.n	800c7f0 <__ieee754_fmod+0xf4>
 800c774:	4963      	ldr	r1, [pc, #396]	@ (800c904 <__ieee754_fmod+0x208>)
 800c776:	4653      	mov	r3, sl
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dc36      	bgt.n	800c7ea <__ieee754_fmod+0xee>
 800c77c:	4216      	tst	r6, r2
 800c77e:	d14f      	bne.n	800c820 <__ieee754_fmod+0x124>
 800c780:	f1bc 0f00 	cmp.w	ip, #0
 800c784:	d144      	bne.n	800c810 <__ieee754_fmod+0x114>
 800c786:	4a5f      	ldr	r2, [pc, #380]	@ (800c904 <__ieee754_fmod+0x208>)
 800c788:	463b      	mov	r3, r7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	dc3d      	bgt.n	800c80a <__ieee754_fmod+0x10e>
 800c78e:	485e      	ldr	r0, [pc, #376]	@ (800c908 <__ieee754_fmod+0x20c>)
 800c790:	4281      	cmp	r1, r0
 800c792:	db4a      	blt.n	800c82a <__ieee754_fmod+0x12e>
 800c794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c798:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c79c:	485a      	ldr	r0, [pc, #360]	@ (800c908 <__ieee754_fmod+0x20c>)
 800c79e:	4282      	cmp	r2, r0
 800c7a0:	db57      	blt.n	800c852 <__ieee754_fmod+0x156>
 800c7a2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c7a6:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800c7aa:	1a89      	subs	r1, r1, r2
 800c7ac:	1b98      	subs	r0, r3, r6
 800c7ae:	eba4 070e 	sub.w	r7, r4, lr
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	d162      	bne.n	800c87c <__ieee754_fmod+0x180>
 800c7b6:	4574      	cmp	r4, lr
 800c7b8:	bf38      	it	cc
 800c7ba:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	bfa4      	itt	ge
 800c7c2:	463c      	movge	r4, r7
 800c7c4:	4603      	movge	r3, r0
 800c7c6:	ea53 0104 	orrs.w	r1, r3, r4
 800c7ca:	d0c6      	beq.n	800c75a <__ieee754_fmod+0x5e>
 800c7cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7d0:	db69      	blt.n	800c8a6 <__ieee754_fmod+0x1aa>
 800c7d2:	494d      	ldr	r1, [pc, #308]	@ (800c908 <__ieee754_fmod+0x20c>)
 800c7d4:	428a      	cmp	r2, r1
 800c7d6:	db6c      	blt.n	800c8b2 <__ieee754_fmod+0x1b6>
 800c7d8:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c7dc:	432b      	orrs	r3, r5
 800c7de:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800c7e2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	e7a9      	b.n	800c73e <__ieee754_fmod+0x42>
 800c7ea:	3901      	subs	r1, #1
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	e7c3      	b.n	800c778 <__ieee754_fmod+0x7c>
 800c7f0:	4945      	ldr	r1, [pc, #276]	@ (800c908 <__ieee754_fmod+0x20c>)
 800c7f2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	ddc0      	ble.n	800c77c <__ieee754_fmod+0x80>
 800c7fa:	3901      	subs	r1, #1
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	e7fa      	b.n	800c7f6 <__ieee754_fmod+0xfa>
 800c800:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c804:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c808:	e7b8      	b.n	800c77c <__ieee754_fmod+0x80>
 800c80a:	3a01      	subs	r2, #1
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	e7bc      	b.n	800c78a <__ieee754_fmod+0x8e>
 800c810:	4a3d      	ldr	r2, [pc, #244]	@ (800c908 <__ieee754_fmod+0x20c>)
 800c812:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800c816:	2b00      	cmp	r3, #0
 800c818:	ddb9      	ble.n	800c78e <__ieee754_fmod+0x92>
 800c81a:	3a01      	subs	r2, #1
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	e7fa      	b.n	800c816 <__ieee754_fmod+0x11a>
 800c820:	ea4f 522c 	mov.w	r2, ip, asr #20
 800c824:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c828:	e7b1      	b.n	800c78e <__ieee754_fmod+0x92>
 800c82a:	1a40      	subs	r0, r0, r1
 800c82c:	281f      	cmp	r0, #31
 800c82e:	dc0a      	bgt.n	800c846 <__ieee754_fmod+0x14a>
 800c830:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800c834:	fa08 f800 	lsl.w	r8, r8, r0
 800c838:	fa2a f303 	lsr.w	r3, sl, r3
 800c83c:	ea43 0308 	orr.w	r3, r3, r8
 800c840:	fa0a f400 	lsl.w	r4, sl, r0
 800c844:	e7aa      	b.n	800c79c <__ieee754_fmod+0xa0>
 800c846:	4b31      	ldr	r3, [pc, #196]	@ (800c90c <__ieee754_fmod+0x210>)
 800c848:	1a5b      	subs	r3, r3, r1
 800c84a:	fa0a f303 	lsl.w	r3, sl, r3
 800c84e:	2400      	movs	r4, #0
 800c850:	e7a4      	b.n	800c79c <__ieee754_fmod+0xa0>
 800c852:	1a80      	subs	r0, r0, r2
 800c854:	281f      	cmp	r0, #31
 800c856:	dc0a      	bgt.n	800c86e <__ieee754_fmod+0x172>
 800c858:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800c85c:	fa0c fc00 	lsl.w	ip, ip, r0
 800c860:	fa27 f606 	lsr.w	r6, r7, r6
 800c864:	ea46 060c 	orr.w	r6, r6, ip
 800c868:	fa07 fe00 	lsl.w	lr, r7, r0
 800c86c:	e79d      	b.n	800c7aa <__ieee754_fmod+0xae>
 800c86e:	4e27      	ldr	r6, [pc, #156]	@ (800c90c <__ieee754_fmod+0x210>)
 800c870:	1ab6      	subs	r6, r6, r2
 800c872:	fa07 f606 	lsl.w	r6, r7, r6
 800c876:	f04f 0e00 	mov.w	lr, #0
 800c87a:	e796      	b.n	800c7aa <__ieee754_fmod+0xae>
 800c87c:	4574      	cmp	r4, lr
 800c87e:	bf38      	it	cc
 800c880:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c884:	2800      	cmp	r0, #0
 800c886:	da05      	bge.n	800c894 <__ieee754_fmod+0x198>
 800c888:	0fe0      	lsrs	r0, r4, #31
 800c88a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c88e:	0064      	lsls	r4, r4, #1
 800c890:	3901      	subs	r1, #1
 800c892:	e78b      	b.n	800c7ac <__ieee754_fmod+0xb0>
 800c894:	ea50 0307 	orrs.w	r3, r0, r7
 800c898:	f43f af5f 	beq.w	800c75a <__ieee754_fmod+0x5e>
 800c89c:	0ffb      	lsrs	r3, r7, #31
 800c89e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c8a2:	007c      	lsls	r4, r7, #1
 800c8a4:	e7f4      	b.n	800c890 <__ieee754_fmod+0x194>
 800c8a6:	0fe1      	lsrs	r1, r4, #31
 800c8a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c8ac:	0064      	lsls	r4, r4, #1
 800c8ae:	3a01      	subs	r2, #1
 800c8b0:	e78c      	b.n	800c7cc <__ieee754_fmod+0xd0>
 800c8b2:	1a89      	subs	r1, r1, r2
 800c8b4:	2914      	cmp	r1, #20
 800c8b6:	dc0a      	bgt.n	800c8ce <__ieee754_fmod+0x1d2>
 800c8b8:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c8bc:	fa03 f202 	lsl.w	r2, r3, r2
 800c8c0:	40cc      	lsrs	r4, r1
 800c8c2:	4322      	orrs	r2, r4
 800c8c4:	410b      	asrs	r3, r1
 800c8c6:	ea43 0105 	orr.w	r1, r3, r5
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	e737      	b.n	800c73e <__ieee754_fmod+0x42>
 800c8ce:	291f      	cmp	r1, #31
 800c8d0:	dc07      	bgt.n	800c8e2 <__ieee754_fmod+0x1e6>
 800c8d2:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c8d6:	40cc      	lsrs	r4, r1
 800c8d8:	fa03 f202 	lsl.w	r2, r3, r2
 800c8dc:	4322      	orrs	r2, r4
 800c8de:	462b      	mov	r3, r5
 800c8e0:	e7f1      	b.n	800c8c6 <__ieee754_fmod+0x1ca>
 800c8e2:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800c8e6:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c8ea:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800c8ee:	32e2      	adds	r2, #226	@ 0xe2
 800c8f0:	fa43 f202 	asr.w	r2, r3, r2
 800c8f4:	e7f3      	b.n	800c8de <__ieee754_fmod+0x1e2>
 800c8f6:	bf00      	nop
 800c8f8:	7fefffff 	.word	0x7fefffff
 800c8fc:	7ff00000 	.word	0x7ff00000
 800c900:	0800dd18 	.word	0x0800dd18
 800c904:	fffffbed 	.word	0xfffffbed
 800c908:	fffffc02 	.word	0xfffffc02
 800c90c:	fffffbe2 	.word	0xfffffbe2

0800c910 <__ieee754_log>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ec51 0b10 	vmov	r0, r1, d0
 800c918:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800c91c:	b087      	sub	sp, #28
 800c91e:	460d      	mov	r5, r1
 800c920:	da26      	bge.n	800c970 <__ieee754_log+0x60>
 800c922:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c926:	4303      	orrs	r3, r0
 800c928:	4602      	mov	r2, r0
 800c92a:	d10a      	bne.n	800c942 <__ieee754_log+0x32>
 800c92c:	49ce      	ldr	r1, [pc, #824]	@ (800cc68 <__ieee754_log+0x358>)
 800c92e:	2200      	movs	r2, #0
 800c930:	2300      	movs	r3, #0
 800c932:	2000      	movs	r0, #0
 800c934:	f7f3 ff32 	bl	800079c <__aeabi_ddiv>
 800c938:	ec41 0b10 	vmov	d0, r0, r1
 800c93c:	b007      	add	sp, #28
 800c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c942:	2900      	cmp	r1, #0
 800c944:	da05      	bge.n	800c952 <__ieee754_log+0x42>
 800c946:	460b      	mov	r3, r1
 800c948:	f7f3 fc46 	bl	80001d8 <__aeabi_dsub>
 800c94c:	2200      	movs	r2, #0
 800c94e:	2300      	movs	r3, #0
 800c950:	e7f0      	b.n	800c934 <__ieee754_log+0x24>
 800c952:	4bc6      	ldr	r3, [pc, #792]	@ (800cc6c <__ieee754_log+0x35c>)
 800c954:	2200      	movs	r2, #0
 800c956:	f7f3 fdf7 	bl	8000548 <__aeabi_dmul>
 800c95a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800c95e:	460d      	mov	r5, r1
 800c960:	4ac3      	ldr	r2, [pc, #780]	@ (800cc70 <__ieee754_log+0x360>)
 800c962:	4295      	cmp	r5, r2
 800c964:	dd06      	ble.n	800c974 <__ieee754_log+0x64>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	f7f3 fc37 	bl	80001dc <__adddf3>
 800c96e:	e7e3      	b.n	800c938 <__ieee754_log+0x28>
 800c970:	2300      	movs	r3, #0
 800c972:	e7f5      	b.n	800c960 <__ieee754_log+0x50>
 800c974:	152c      	asrs	r4, r5, #20
 800c976:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800c97a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c97e:	441c      	add	r4, r3
 800c980:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800c984:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800c988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c98c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800c990:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800c994:	ea42 0105 	orr.w	r1, r2, r5
 800c998:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c99c:	2200      	movs	r2, #0
 800c99e:	4bb5      	ldr	r3, [pc, #724]	@ (800cc74 <__ieee754_log+0x364>)
 800c9a0:	f7f3 fc1a 	bl	80001d8 <__aeabi_dsub>
 800c9a4:	1cab      	adds	r3, r5, #2
 800c9a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	468b      	mov	fp, r1
 800c9b0:	f04f 0200 	mov.w	r2, #0
 800c9b4:	dc53      	bgt.n	800ca5e <__ieee754_log+0x14e>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f7f4 f82e 	bl	8000a18 <__aeabi_dcmpeq>
 800c9bc:	b1d0      	cbz	r0, 800c9f4 <__ieee754_log+0xe4>
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	f000 8120 	beq.w	800cc04 <__ieee754_log+0x2f4>
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f7f3 fd55 	bl	8000474 <__aeabi_i2d>
 800c9ca:	a391      	add	r3, pc, #580	@ (adr r3, 800cc10 <__ieee754_log+0x300>)
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	460f      	mov	r7, r1
 800c9d4:	f7f3 fdb8 	bl	8000548 <__aeabi_dmul>
 800c9d8:	a38f      	add	r3, pc, #572	@ (adr r3, 800cc18 <__ieee754_log+0x308>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f3 fdaf 	bl	8000548 <__aeabi_dmul>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	e7ba      	b.n	800c96a <__ieee754_log+0x5a>
 800c9f4:	a38a      	add	r3, pc, #552	@ (adr r3, 800cc20 <__ieee754_log+0x310>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	4650      	mov	r0, sl
 800c9fc:	4659      	mov	r1, fp
 800c9fe:	f7f3 fda3 	bl	8000548 <__aeabi_dmul>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	2000      	movs	r0, #0
 800ca08:	499b      	ldr	r1, [pc, #620]	@ (800cc78 <__ieee754_log+0x368>)
 800ca0a:	f7f3 fbe5 	bl	80001d8 <__aeabi_dsub>
 800ca0e:	4652      	mov	r2, sl
 800ca10:	4606      	mov	r6, r0
 800ca12:	460f      	mov	r7, r1
 800ca14:	465b      	mov	r3, fp
 800ca16:	4650      	mov	r0, sl
 800ca18:	4659      	mov	r1, fp
 800ca1a:	f7f3 fd95 	bl	8000548 <__aeabi_dmul>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fd8f 	bl	8000548 <__aeabi_dmul>
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	b914      	cbnz	r4, 800ca36 <__ieee754_log+0x126>
 800ca30:	4632      	mov	r2, r6
 800ca32:	463b      	mov	r3, r7
 800ca34:	e0a0      	b.n	800cb78 <__ieee754_log+0x268>
 800ca36:	4620      	mov	r0, r4
 800ca38:	f7f3 fd1c 	bl	8000474 <__aeabi_i2d>
 800ca3c:	a374      	add	r3, pc, #464	@ (adr r3, 800cc10 <__ieee754_log+0x300>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	4680      	mov	r8, r0
 800ca44:	4689      	mov	r9, r1
 800ca46:	f7f3 fd7f 	bl	8000548 <__aeabi_dmul>
 800ca4a:	a373      	add	r3, pc, #460	@ (adr r3, 800cc18 <__ieee754_log+0x308>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	4604      	mov	r4, r0
 800ca52:	460d      	mov	r5, r1
 800ca54:	4640      	mov	r0, r8
 800ca56:	4649      	mov	r1, r9
 800ca58:	f7f3 fd76 	bl	8000548 <__aeabi_dmul>
 800ca5c:	e0a5      	b.n	800cbaa <__ieee754_log+0x29a>
 800ca5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca62:	f7f3 fbbb 	bl	80001dc <__adddf3>
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	4659      	mov	r1, fp
 800ca6e:	f7f3 fe95 	bl	800079c <__aeabi_ddiv>
 800ca72:	e9cd 0100 	strd	r0, r1, [sp]
 800ca76:	4620      	mov	r0, r4
 800ca78:	f7f3 fcfc 	bl	8000474 <__aeabi_i2d>
 800ca7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca84:	4610      	mov	r0, r2
 800ca86:	4619      	mov	r1, r3
 800ca88:	f7f3 fd5e 	bl	8000548 <__aeabi_dmul>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca94:	f7f3 fd58 	bl	8000548 <__aeabi_dmul>
 800ca98:	a363      	add	r3, pc, #396	@ (adr r3, 800cc28 <__ieee754_log+0x318>)
 800ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9e:	4680      	mov	r8, r0
 800caa0:	4689      	mov	r9, r1
 800caa2:	f7f3 fd51 	bl	8000548 <__aeabi_dmul>
 800caa6:	a362      	add	r3, pc, #392	@ (adr r3, 800cc30 <__ieee754_log+0x320>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f7f3 fb96 	bl	80001dc <__adddf3>
 800cab0:	4642      	mov	r2, r8
 800cab2:	464b      	mov	r3, r9
 800cab4:	f7f3 fd48 	bl	8000548 <__aeabi_dmul>
 800cab8:	a35f      	add	r3, pc, #380	@ (adr r3, 800cc38 <__ieee754_log+0x328>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	f7f3 fb8d 	bl	80001dc <__adddf3>
 800cac2:	4642      	mov	r2, r8
 800cac4:	464b      	mov	r3, r9
 800cac6:	f7f3 fd3f 	bl	8000548 <__aeabi_dmul>
 800caca:	a35d      	add	r3, pc, #372	@ (adr r3, 800cc40 <__ieee754_log+0x330>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f7f3 fb84 	bl	80001dc <__adddf3>
 800cad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cad8:	f7f3 fd36 	bl	8000548 <__aeabi_dmul>
 800cadc:	a35a      	add	r3, pc, #360	@ (adr r3, 800cc48 <__ieee754_log+0x338>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cae6:	4640      	mov	r0, r8
 800cae8:	4649      	mov	r1, r9
 800caea:	f7f3 fd2d 	bl	8000548 <__aeabi_dmul>
 800caee:	a358      	add	r3, pc, #352	@ (adr r3, 800cc50 <__ieee754_log+0x340>)
 800caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf4:	f7f3 fb72 	bl	80001dc <__adddf3>
 800caf8:	4642      	mov	r2, r8
 800cafa:	464b      	mov	r3, r9
 800cafc:	f7f3 fd24 	bl	8000548 <__aeabi_dmul>
 800cb00:	a355      	add	r3, pc, #340	@ (adr r3, 800cc58 <__ieee754_log+0x348>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	f7f3 fb69 	bl	80001dc <__adddf3>
 800cb0a:	4642      	mov	r2, r8
 800cb0c:	464b      	mov	r3, r9
 800cb0e:	f7f3 fd1b 	bl	8000548 <__aeabi_dmul>
 800cb12:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800cb1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb22:	f7f3 fb5b 	bl	80001dc <__adddf3>
 800cb26:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800cb2a:	3551      	adds	r5, #81	@ 0x51
 800cb2c:	4335      	orrs	r5, r6
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	4680      	mov	r8, r0
 800cb32:	4689      	mov	r9, r1
 800cb34:	dd48      	ble.n	800cbc8 <__ieee754_log+0x2b8>
 800cb36:	4b50      	ldr	r3, [pc, #320]	@ (800cc78 <__ieee754_log+0x368>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4650      	mov	r0, sl
 800cb3c:	4659      	mov	r1, fp
 800cb3e:	f7f3 fd03 	bl	8000548 <__aeabi_dmul>
 800cb42:	4652      	mov	r2, sl
 800cb44:	465b      	mov	r3, fp
 800cb46:	f7f3 fcff 	bl	8000548 <__aeabi_dmul>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	4640      	mov	r0, r8
 800cb54:	4649      	mov	r1, r9
 800cb56:	f7f3 fb41 	bl	80001dc <__adddf3>
 800cb5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb5e:	f7f3 fcf3 	bl	8000548 <__aeabi_dmul>
 800cb62:	4680      	mov	r8, r0
 800cb64:	4689      	mov	r9, r1
 800cb66:	b964      	cbnz	r4, 800cb82 <__ieee754_log+0x272>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	4639      	mov	r1, r7
 800cb70:	f7f3 fb32 	bl	80001d8 <__aeabi_dsub>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4650      	mov	r0, sl
 800cb7a:	4659      	mov	r1, fp
 800cb7c:	f7f3 fb2c 	bl	80001d8 <__aeabi_dsub>
 800cb80:	e6da      	b.n	800c938 <__ieee754_log+0x28>
 800cb82:	a323      	add	r3, pc, #140	@ (adr r3, 800cc10 <__ieee754_log+0x300>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb8c:	f7f3 fcdc 	bl	8000548 <__aeabi_dmul>
 800cb90:	a321      	add	r3, pc, #132	@ (adr r3, 800cc18 <__ieee754_log+0x308>)
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	4604      	mov	r4, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb9e:	f7f3 fcd3 	bl	8000548 <__aeabi_dmul>
 800cba2:	4642      	mov	r2, r8
 800cba4:	464b      	mov	r3, r9
 800cba6:	f7f3 fb19 	bl	80001dc <__adddf3>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 fb11 	bl	80001d8 <__aeabi_dsub>
 800cbb6:	4652      	mov	r2, sl
 800cbb8:	465b      	mov	r3, fp
 800cbba:	f7f3 fb0d 	bl	80001d8 <__aeabi_dsub>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	e7d9      	b.n	800cb7c <__ieee754_log+0x26c>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4650      	mov	r0, sl
 800cbce:	4659      	mov	r1, fp
 800cbd0:	f7f3 fb02 	bl	80001d8 <__aeabi_dsub>
 800cbd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbd8:	f7f3 fcb6 	bl	8000548 <__aeabi_dmul>
 800cbdc:	4606      	mov	r6, r0
 800cbde:	460f      	mov	r7, r1
 800cbe0:	2c00      	cmp	r4, #0
 800cbe2:	f43f af25 	beq.w	800ca30 <__ieee754_log+0x120>
 800cbe6:	a30a      	add	r3, pc, #40	@ (adr r3, 800cc10 <__ieee754_log+0x300>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf0:	f7f3 fcaa 	bl	8000548 <__aeabi_dmul>
 800cbf4:	a308      	add	r3, pc, #32	@ (adr r3, 800cc18 <__ieee754_log+0x308>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc02:	e729      	b.n	800ca58 <__ieee754_log+0x148>
 800cc04:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800cc60 <__ieee754_log+0x350>
 800cc08:	e698      	b.n	800c93c <__ieee754_log+0x2c>
 800cc0a:	bf00      	nop
 800cc0c:	f3af 8000 	nop.w
 800cc10:	fee00000 	.word	0xfee00000
 800cc14:	3fe62e42 	.word	0x3fe62e42
 800cc18:	35793c76 	.word	0x35793c76
 800cc1c:	3dea39ef 	.word	0x3dea39ef
 800cc20:	55555555 	.word	0x55555555
 800cc24:	3fd55555 	.word	0x3fd55555
 800cc28:	df3e5244 	.word	0xdf3e5244
 800cc2c:	3fc2f112 	.word	0x3fc2f112
 800cc30:	96cb03de 	.word	0x96cb03de
 800cc34:	3fc74664 	.word	0x3fc74664
 800cc38:	94229359 	.word	0x94229359
 800cc3c:	3fd24924 	.word	0x3fd24924
 800cc40:	55555593 	.word	0x55555593
 800cc44:	3fe55555 	.word	0x3fe55555
 800cc48:	d078c69f 	.word	0xd078c69f
 800cc4c:	3fc39a09 	.word	0x3fc39a09
 800cc50:	1d8e78af 	.word	0x1d8e78af
 800cc54:	3fcc71c5 	.word	0x3fcc71c5
 800cc58:	9997fa04 	.word	0x9997fa04
 800cc5c:	3fd99999 	.word	0x3fd99999
	...
 800cc68:	c3500000 	.word	0xc3500000
 800cc6c:	43500000 	.word	0x43500000
 800cc70:	7fefffff 	.word	0x7fefffff
 800cc74:	3ff00000 	.word	0x3ff00000
 800cc78:	3fe00000 	.word	0x3fe00000
 800cc7c:	00000000 	.word	0x00000000

0800cc80 <__ieee754_pow>:
 800cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	b091      	sub	sp, #68	@ 0x44
 800cc86:	ed8d 1b00 	vstr	d1, [sp]
 800cc8a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800cc8e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800cc92:	ea5a 0001 	orrs.w	r0, sl, r1
 800cc96:	ec57 6b10 	vmov	r6, r7, d0
 800cc9a:	d113      	bne.n	800ccc4 <__ieee754_pow+0x44>
 800cc9c:	19b3      	adds	r3, r6, r6
 800cc9e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800cca2:	4152      	adcs	r2, r2
 800cca4:	4298      	cmp	r0, r3
 800cca6:	4b98      	ldr	r3, [pc, #608]	@ (800cf08 <__ieee754_pow+0x288>)
 800cca8:	4193      	sbcs	r3, r2
 800ccaa:	f080 84ea 	bcs.w	800d682 <__ieee754_pow+0xa02>
 800ccae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	f7f3 fa91 	bl	80001dc <__adddf3>
 800ccba:	ec41 0b10 	vmov	d0, r0, r1
 800ccbe:	b011      	add	sp, #68	@ 0x44
 800ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc4:	4a91      	ldr	r2, [pc, #580]	@ (800cf0c <__ieee754_pow+0x28c>)
 800ccc6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ccca:	4590      	cmp	r8, r2
 800cccc:	463d      	mov	r5, r7
 800ccce:	4633      	mov	r3, r6
 800ccd0:	d806      	bhi.n	800cce0 <__ieee754_pow+0x60>
 800ccd2:	d101      	bne.n	800ccd8 <__ieee754_pow+0x58>
 800ccd4:	2e00      	cmp	r6, #0
 800ccd6:	d1ea      	bne.n	800ccae <__ieee754_pow+0x2e>
 800ccd8:	4592      	cmp	sl, r2
 800ccda:	d801      	bhi.n	800cce0 <__ieee754_pow+0x60>
 800ccdc:	d10e      	bne.n	800ccfc <__ieee754_pow+0x7c>
 800ccde:	b169      	cbz	r1, 800ccfc <__ieee754_pow+0x7c>
 800cce0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800cce4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800cce8:	431d      	orrs	r5, r3
 800ccea:	d1e0      	bne.n	800ccae <__ieee754_pow+0x2e>
 800ccec:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccf0:	18db      	adds	r3, r3, r3
 800ccf2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ccf6:	4152      	adcs	r2, r2
 800ccf8:	429d      	cmp	r5, r3
 800ccfa:	e7d4      	b.n	800cca6 <__ieee754_pow+0x26>
 800ccfc:	2d00      	cmp	r5, #0
 800ccfe:	46c3      	mov	fp, r8
 800cd00:	da3a      	bge.n	800cd78 <__ieee754_pow+0xf8>
 800cd02:	4a83      	ldr	r2, [pc, #524]	@ (800cf10 <__ieee754_pow+0x290>)
 800cd04:	4592      	cmp	sl, r2
 800cd06:	d84d      	bhi.n	800cda4 <__ieee754_pow+0x124>
 800cd08:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cd0c:	4592      	cmp	sl, r2
 800cd0e:	f240 84c7 	bls.w	800d6a0 <__ieee754_pow+0xa20>
 800cd12:	ea4f 522a 	mov.w	r2, sl, asr #20
 800cd16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cd1a:	2a14      	cmp	r2, #20
 800cd1c:	dd0f      	ble.n	800cd3e <__ieee754_pow+0xbe>
 800cd1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cd22:	fa21 f402 	lsr.w	r4, r1, r2
 800cd26:	fa04 f202 	lsl.w	r2, r4, r2
 800cd2a:	428a      	cmp	r2, r1
 800cd2c:	f040 84b8 	bne.w	800d6a0 <__ieee754_pow+0xa20>
 800cd30:	f004 0401 	and.w	r4, r4, #1
 800cd34:	f1c4 0402 	rsb	r4, r4, #2
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	d158      	bne.n	800cdee <__ieee754_pow+0x16e>
 800cd3c:	e00e      	b.n	800cd5c <__ieee754_pow+0xdc>
 800cd3e:	2900      	cmp	r1, #0
 800cd40:	d154      	bne.n	800cdec <__ieee754_pow+0x16c>
 800cd42:	f1c2 0214 	rsb	r2, r2, #20
 800cd46:	fa4a f402 	asr.w	r4, sl, r2
 800cd4a:	fa04 f202 	lsl.w	r2, r4, r2
 800cd4e:	4552      	cmp	r2, sl
 800cd50:	f040 84a3 	bne.w	800d69a <__ieee754_pow+0xa1a>
 800cd54:	f004 0401 	and.w	r4, r4, #1
 800cd58:	f1c4 0402 	rsb	r4, r4, #2
 800cd5c:	4a6d      	ldr	r2, [pc, #436]	@ (800cf14 <__ieee754_pow+0x294>)
 800cd5e:	4592      	cmp	sl, r2
 800cd60:	d12e      	bne.n	800cdc0 <__ieee754_pow+0x140>
 800cd62:	f1b9 0f00 	cmp.w	r9, #0
 800cd66:	f280 8494 	bge.w	800d692 <__ieee754_pow+0xa12>
 800cd6a:	496a      	ldr	r1, [pc, #424]	@ (800cf14 <__ieee754_pow+0x294>)
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	463b      	mov	r3, r7
 800cd70:	2000      	movs	r0, #0
 800cd72:	f7f3 fd13 	bl	800079c <__aeabi_ddiv>
 800cd76:	e7a0      	b.n	800ccba <__ieee754_pow+0x3a>
 800cd78:	2400      	movs	r4, #0
 800cd7a:	bbc1      	cbnz	r1, 800cdee <__ieee754_pow+0x16e>
 800cd7c:	4a63      	ldr	r2, [pc, #396]	@ (800cf0c <__ieee754_pow+0x28c>)
 800cd7e:	4592      	cmp	sl, r2
 800cd80:	d1ec      	bne.n	800cd5c <__ieee754_pow+0xdc>
 800cd82:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800cd86:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	f000 8479 	beq.w	800d682 <__ieee754_pow+0xa02>
 800cd90:	4b61      	ldr	r3, [pc, #388]	@ (800cf18 <__ieee754_pow+0x298>)
 800cd92:	4598      	cmp	r8, r3
 800cd94:	d908      	bls.n	800cda8 <__ieee754_pow+0x128>
 800cd96:	f1b9 0f00 	cmp.w	r9, #0
 800cd9a:	f2c0 8476 	blt.w	800d68a <__ieee754_pow+0xa0a>
 800cd9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cda2:	e78a      	b.n	800ccba <__ieee754_pow+0x3a>
 800cda4:	2402      	movs	r4, #2
 800cda6:	e7e8      	b.n	800cd7a <__ieee754_pow+0xfa>
 800cda8:	f1b9 0f00 	cmp.w	r9, #0
 800cdac:	f04f 0000 	mov.w	r0, #0
 800cdb0:	f04f 0100 	mov.w	r1, #0
 800cdb4:	da81      	bge.n	800ccba <__ieee754_pow+0x3a>
 800cdb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cdba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cdbe:	e77c      	b.n	800ccba <__ieee754_pow+0x3a>
 800cdc0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800cdc4:	d106      	bne.n	800cdd4 <__ieee754_pow+0x154>
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	463b      	mov	r3, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fbbb 	bl	8000548 <__aeabi_dmul>
 800cdd2:	e772      	b.n	800ccba <__ieee754_pow+0x3a>
 800cdd4:	4a51      	ldr	r2, [pc, #324]	@ (800cf1c <__ieee754_pow+0x29c>)
 800cdd6:	4591      	cmp	r9, r2
 800cdd8:	d109      	bne.n	800cdee <__ieee754_pow+0x16e>
 800cdda:	2d00      	cmp	r5, #0
 800cddc:	db07      	blt.n	800cdee <__ieee754_pow+0x16e>
 800cdde:	ec47 6b10 	vmov	d0, r6, r7
 800cde2:	b011      	add	sp, #68	@ 0x44
 800cde4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	f000 bd52 	b.w	800d890 <__ieee754_sqrt>
 800cdec:	2400      	movs	r4, #0
 800cdee:	ec47 6b10 	vmov	d0, r6, r7
 800cdf2:	9302      	str	r3, [sp, #8]
 800cdf4:	f000 fc88 	bl	800d708 <fabs>
 800cdf8:	9b02      	ldr	r3, [sp, #8]
 800cdfa:	ec51 0b10 	vmov	r0, r1, d0
 800cdfe:	bb53      	cbnz	r3, 800ce56 <__ieee754_pow+0x1d6>
 800ce00:	4b44      	ldr	r3, [pc, #272]	@ (800cf14 <__ieee754_pow+0x294>)
 800ce02:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d002      	beq.n	800ce10 <__ieee754_pow+0x190>
 800ce0a:	f1b8 0f00 	cmp.w	r8, #0
 800ce0e:	d122      	bne.n	800ce56 <__ieee754_pow+0x1d6>
 800ce10:	f1b9 0f00 	cmp.w	r9, #0
 800ce14:	da05      	bge.n	800ce22 <__ieee754_pow+0x1a2>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	493d      	ldr	r1, [pc, #244]	@ (800cf14 <__ieee754_pow+0x294>)
 800ce1e:	f7f3 fcbd 	bl	800079c <__aeabi_ddiv>
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	f6bf af49 	bge.w	800ccba <__ieee754_pow+0x3a>
 800ce28:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ce2c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ce30:	ea58 0804 	orrs.w	r8, r8, r4
 800ce34:	d108      	bne.n	800ce48 <__ieee754_pow+0x1c8>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	f7f3 f9cb 	bl	80001d8 <__aeabi_dsub>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	e794      	b.n	800cd72 <__ieee754_pow+0xf2>
 800ce48:	2c01      	cmp	r4, #1
 800ce4a:	f47f af36 	bne.w	800ccba <__ieee754_pow+0x3a>
 800ce4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce52:	4619      	mov	r1, r3
 800ce54:	e731      	b.n	800ccba <__ieee754_pow+0x3a>
 800ce56:	0feb      	lsrs	r3, r5, #31
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	ea53 0204 	orrs.w	r2, r3, r4
 800ce5e:	d102      	bne.n	800ce66 <__ieee754_pow+0x1e6>
 800ce60:	4632      	mov	r2, r6
 800ce62:	463b      	mov	r3, r7
 800ce64:	e7e9      	b.n	800ce3a <__ieee754_pow+0x1ba>
 800ce66:	3c01      	subs	r4, #1
 800ce68:	431c      	orrs	r4, r3
 800ce6a:	d016      	beq.n	800ce9a <__ieee754_pow+0x21a>
 800ce6c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800cef8 <__ieee754_pow+0x278>
 800ce70:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ce74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce78:	f240 8112 	bls.w	800d0a0 <__ieee754_pow+0x420>
 800ce7c:	4b28      	ldr	r3, [pc, #160]	@ (800cf20 <__ieee754_pow+0x2a0>)
 800ce7e:	459a      	cmp	sl, r3
 800ce80:	4b25      	ldr	r3, [pc, #148]	@ (800cf18 <__ieee754_pow+0x298>)
 800ce82:	d916      	bls.n	800ceb2 <__ieee754_pow+0x232>
 800ce84:	4598      	cmp	r8, r3
 800ce86:	d80b      	bhi.n	800cea0 <__ieee754_pow+0x220>
 800ce88:	f1b9 0f00 	cmp.w	r9, #0
 800ce8c:	da0b      	bge.n	800cea6 <__ieee754_pow+0x226>
 800ce8e:	2000      	movs	r0, #0
 800ce90:	b011      	add	sp, #68	@ 0x44
 800ce92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce96:	f000 bcf3 	b.w	800d880 <__math_oflow>
 800ce9a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800cf00 <__ieee754_pow+0x280>
 800ce9e:	e7e7      	b.n	800ce70 <__ieee754_pow+0x1f0>
 800cea0:	f1b9 0f00 	cmp.w	r9, #0
 800cea4:	dcf3      	bgt.n	800ce8e <__ieee754_pow+0x20e>
 800cea6:	2000      	movs	r0, #0
 800cea8:	b011      	add	sp, #68	@ 0x44
 800ceaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceae:	f000 bcdf 	b.w	800d870 <__math_uflow>
 800ceb2:	4598      	cmp	r8, r3
 800ceb4:	d20c      	bcs.n	800ced0 <__ieee754_pow+0x250>
 800ceb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	2300      	movs	r3, #0
 800cebe:	f7f3 fdb5 	bl	8000a2c <__aeabi_dcmplt>
 800cec2:	3800      	subs	r0, #0
 800cec4:	bf18      	it	ne
 800cec6:	2001      	movne	r0, #1
 800cec8:	f1b9 0f00 	cmp.w	r9, #0
 800cecc:	daec      	bge.n	800cea8 <__ieee754_pow+0x228>
 800cece:	e7df      	b.n	800ce90 <__ieee754_pow+0x210>
 800ced0:	4b10      	ldr	r3, [pc, #64]	@ (800cf14 <__ieee754_pow+0x294>)
 800ced2:	4598      	cmp	r8, r3
 800ced4:	f04f 0200 	mov.w	r2, #0
 800ced8:	d924      	bls.n	800cf24 <__ieee754_pow+0x2a4>
 800ceda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cede:	2300      	movs	r3, #0
 800cee0:	f7f3 fda4 	bl	8000a2c <__aeabi_dcmplt>
 800cee4:	3800      	subs	r0, #0
 800cee6:	bf18      	it	ne
 800cee8:	2001      	movne	r0, #1
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	dccf      	bgt.n	800ce90 <__ieee754_pow+0x210>
 800cef0:	e7da      	b.n	800cea8 <__ieee754_pow+0x228>
 800cef2:	bf00      	nop
 800cef4:	f3af 8000 	nop.w
 800cef8:	00000000 	.word	0x00000000
 800cefc:	3ff00000 	.word	0x3ff00000
 800cf00:	00000000 	.word	0x00000000
 800cf04:	bff00000 	.word	0xbff00000
 800cf08:	fff00000 	.word	0xfff00000
 800cf0c:	7ff00000 	.word	0x7ff00000
 800cf10:	433fffff 	.word	0x433fffff
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	3fefffff 	.word	0x3fefffff
 800cf1c:	3fe00000 	.word	0x3fe00000
 800cf20:	43f00000 	.word	0x43f00000
 800cf24:	4b5a      	ldr	r3, [pc, #360]	@ (800d090 <__ieee754_pow+0x410>)
 800cf26:	f7f3 f957 	bl	80001d8 <__aeabi_dsub>
 800cf2a:	a351      	add	r3, pc, #324	@ (adr r3, 800d070 <__ieee754_pow+0x3f0>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	4604      	mov	r4, r0
 800cf32:	460d      	mov	r5, r1
 800cf34:	f7f3 fb08 	bl	8000548 <__aeabi_dmul>
 800cf38:	a34f      	add	r3, pc, #316	@ (adr r3, 800d078 <__ieee754_pow+0x3f8>)
 800cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3e:	4606      	mov	r6, r0
 800cf40:	460f      	mov	r7, r1
 800cf42:	4620      	mov	r0, r4
 800cf44:	4629      	mov	r1, r5
 800cf46:	f7f3 faff 	bl	8000548 <__aeabi_dmul>
 800cf4a:	4b52      	ldr	r3, [pc, #328]	@ (800d094 <__ieee754_pow+0x414>)
 800cf4c:	4682      	mov	sl, r0
 800cf4e:	468b      	mov	fp, r1
 800cf50:	2200      	movs	r2, #0
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7f3 faf7 	bl	8000548 <__aeabi_dmul>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	a148      	add	r1, pc, #288	@ (adr r1, 800d080 <__ieee754_pow+0x400>)
 800cf60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf64:	f7f3 f938 	bl	80001d8 <__aeabi_dsub>
 800cf68:	4622      	mov	r2, r4
 800cf6a:	462b      	mov	r3, r5
 800cf6c:	f7f3 faec 	bl	8000548 <__aeabi_dmul>
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	2000      	movs	r0, #0
 800cf76:	4948      	ldr	r1, [pc, #288]	@ (800d098 <__ieee754_pow+0x418>)
 800cf78:	f7f3 f92e 	bl	80001d8 <__aeabi_dsub>
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	4680      	mov	r8, r0
 800cf80:	4689      	mov	r9, r1
 800cf82:	462b      	mov	r3, r5
 800cf84:	4620      	mov	r0, r4
 800cf86:	4629      	mov	r1, r5
 800cf88:	f7f3 fade 	bl	8000548 <__aeabi_dmul>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4640      	mov	r0, r8
 800cf92:	4649      	mov	r1, r9
 800cf94:	f7f3 fad8 	bl	8000548 <__aeabi_dmul>
 800cf98:	a33b      	add	r3, pc, #236	@ (adr r3, 800d088 <__ieee754_pow+0x408>)
 800cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9e:	f7f3 fad3 	bl	8000548 <__aeabi_dmul>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4650      	mov	r0, sl
 800cfa8:	4659      	mov	r1, fp
 800cfaa:	f7f3 f915 	bl	80001d8 <__aeabi_dsub>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	4689      	mov	r9, r1
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	4639      	mov	r1, r7
 800cfba:	f7f3 f90f 	bl	80001dc <__adddf3>
 800cfbe:	2400      	movs	r4, #0
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	460d      	mov	r5, r1
 800cfc8:	f7f3 f906 	bl	80001d8 <__aeabi_dsub>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	f7f3 f900 	bl	80001d8 <__aeabi_dsub>
 800cfd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9304      	str	r3, [sp, #16]
 800cfe4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cfe8:	4606      	mov	r6, r0
 800cfea:	460f      	mov	r7, r1
 800cfec:	4652      	mov	r2, sl
 800cfee:	465b      	mov	r3, fp
 800cff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cff4:	f7f3 f8f0 	bl	80001d8 <__aeabi_dsub>
 800cff8:	4622      	mov	r2, r4
 800cffa:	462b      	mov	r3, r5
 800cffc:	f7f3 faa4 	bl	8000548 <__aeabi_dmul>
 800d000:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d004:	4680      	mov	r8, r0
 800d006:	4689      	mov	r9, r1
 800d008:	4630      	mov	r0, r6
 800d00a:	4639      	mov	r1, r7
 800d00c:	f7f3 fa9c 	bl	8000548 <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4640      	mov	r0, r8
 800d016:	4649      	mov	r1, r9
 800d018:	f7f3 f8e0 	bl	80001dc <__adddf3>
 800d01c:	4652      	mov	r2, sl
 800d01e:	465b      	mov	r3, fp
 800d020:	4606      	mov	r6, r0
 800d022:	460f      	mov	r7, r1
 800d024:	4620      	mov	r0, r4
 800d026:	4629      	mov	r1, r5
 800d028:	f7f3 fa8e 	bl	8000548 <__aeabi_dmul>
 800d02c:	460b      	mov	r3, r1
 800d02e:	4602      	mov	r2, r0
 800d030:	4680      	mov	r8, r0
 800d032:	4689      	mov	r9, r1
 800d034:	4630      	mov	r0, r6
 800d036:	4639      	mov	r1, r7
 800d038:	f7f3 f8d0 	bl	80001dc <__adddf3>
 800d03c:	4b17      	ldr	r3, [pc, #92]	@ (800d09c <__ieee754_pow+0x41c>)
 800d03e:	4299      	cmp	r1, r3
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	468a      	mov	sl, r1
 800d046:	468b      	mov	fp, r1
 800d048:	f340 82ef 	ble.w	800d62a <__ieee754_pow+0x9aa>
 800d04c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d050:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d054:	4303      	orrs	r3, r0
 800d056:	f000 81e8 	beq.w	800d42a <__ieee754_pow+0x7aa>
 800d05a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d05e:	2200      	movs	r2, #0
 800d060:	2300      	movs	r3, #0
 800d062:	f7f3 fce3 	bl	8000a2c <__aeabi_dcmplt>
 800d066:	3800      	subs	r0, #0
 800d068:	bf18      	it	ne
 800d06a:	2001      	movne	r0, #1
 800d06c:	e710      	b.n	800ce90 <__ieee754_pow+0x210>
 800d06e:	bf00      	nop
 800d070:	60000000 	.word	0x60000000
 800d074:	3ff71547 	.word	0x3ff71547
 800d078:	f85ddf44 	.word	0xf85ddf44
 800d07c:	3e54ae0b 	.word	0x3e54ae0b
 800d080:	55555555 	.word	0x55555555
 800d084:	3fd55555 	.word	0x3fd55555
 800d088:	652b82fe 	.word	0x652b82fe
 800d08c:	3ff71547 	.word	0x3ff71547
 800d090:	3ff00000 	.word	0x3ff00000
 800d094:	3fd00000 	.word	0x3fd00000
 800d098:	3fe00000 	.word	0x3fe00000
 800d09c:	408fffff 	.word	0x408fffff
 800d0a0:	4bd5      	ldr	r3, [pc, #852]	@ (800d3f8 <__ieee754_pow+0x778>)
 800d0a2:	402b      	ands	r3, r5
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	b92b      	cbnz	r3, 800d0b4 <__ieee754_pow+0x434>
 800d0a8:	4bd4      	ldr	r3, [pc, #848]	@ (800d3fc <__ieee754_pow+0x77c>)
 800d0aa:	f7f3 fa4d 	bl	8000548 <__aeabi_dmul>
 800d0ae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d0b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d0bc:	4413      	add	r3, r2
 800d0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c0:	4bcf      	ldr	r3, [pc, #828]	@ (800d400 <__ieee754_pow+0x780>)
 800d0c2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d0c6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d0ca:	459b      	cmp	fp, r3
 800d0cc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d0d0:	dd08      	ble.n	800d0e4 <__ieee754_pow+0x464>
 800d0d2:	4bcc      	ldr	r3, [pc, #816]	@ (800d404 <__ieee754_pow+0x784>)
 800d0d4:	459b      	cmp	fp, r3
 800d0d6:	f340 81a5 	ble.w	800d424 <__ieee754_pow+0x7a4>
 800d0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0dc:	3301      	adds	r3, #1
 800d0de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0e0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d0e4:	f04f 0a00 	mov.w	sl, #0
 800d0e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d0ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0ee:	4bc6      	ldr	r3, [pc, #792]	@ (800d408 <__ieee754_pow+0x788>)
 800d0f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d0f4:	ed93 7b00 	vldr	d7, [r3]
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	ec53 2b17 	vmov	r2, r3, d7
 800d0fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d102:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d106:	f7f3 f867 	bl	80001d8 <__aeabi_dsub>
 800d10a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d10e:	4606      	mov	r6, r0
 800d110:	460f      	mov	r7, r1
 800d112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d116:	f7f3 f861 	bl	80001dc <__adddf3>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	2000      	movs	r0, #0
 800d120:	49ba      	ldr	r1, [pc, #744]	@ (800d40c <__ieee754_pow+0x78c>)
 800d122:	f7f3 fb3b 	bl	800079c <__aeabi_ddiv>
 800d126:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	4630      	mov	r0, r6
 800d130:	4639      	mov	r1, r7
 800d132:	f7f3 fa09 	bl	8000548 <__aeabi_dmul>
 800d136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d13a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d13e:	106d      	asrs	r5, r5, #1
 800d140:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d144:	f04f 0b00 	mov.w	fp, #0
 800d148:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d14c:	4661      	mov	r1, ip
 800d14e:	2200      	movs	r2, #0
 800d150:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d154:	4658      	mov	r0, fp
 800d156:	46e1      	mov	r9, ip
 800d158:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d15c:	4614      	mov	r4, r2
 800d15e:	461d      	mov	r5, r3
 800d160:	f7f3 f9f2 	bl	8000548 <__aeabi_dmul>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	4630      	mov	r0, r6
 800d16a:	4639      	mov	r1, r7
 800d16c:	f7f3 f834 	bl	80001d8 <__aeabi_dsub>
 800d170:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d174:	4606      	mov	r6, r0
 800d176:	460f      	mov	r7, r1
 800d178:	4620      	mov	r0, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	f7f3 f82c 	bl	80001d8 <__aeabi_dsub>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d188:	f7f3 f826 	bl	80001d8 <__aeabi_dsub>
 800d18c:	465a      	mov	r2, fp
 800d18e:	464b      	mov	r3, r9
 800d190:	f7f3 f9da 	bl	8000548 <__aeabi_dmul>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	4630      	mov	r0, r6
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 f81c 	bl	80001d8 <__aeabi_dsub>
 800d1a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d1a4:	f7f3 f9d0 	bl	8000548 <__aeabi_dmul>
 800d1a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	f7f3 f9c8 	bl	8000548 <__aeabi_dmul>
 800d1b8:	a37d      	add	r3, pc, #500	@ (adr r3, 800d3b0 <__ieee754_pow+0x730>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 f9c1 	bl	8000548 <__aeabi_dmul>
 800d1c6:	a37c      	add	r3, pc, #496	@ (adr r3, 800d3b8 <__ieee754_pow+0x738>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	f7f3 f806 	bl	80001dc <__adddf3>
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	462b      	mov	r3, r5
 800d1d4:	f7f3 f9b8 	bl	8000548 <__aeabi_dmul>
 800d1d8:	a379      	add	r3, pc, #484	@ (adr r3, 800d3c0 <__ieee754_pow+0x740>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f2 fffd 	bl	80001dc <__adddf3>
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	f7f3 f9af 	bl	8000548 <__aeabi_dmul>
 800d1ea:	a377      	add	r3, pc, #476	@ (adr r3, 800d3c8 <__ieee754_pow+0x748>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	f7f2 fff4 	bl	80001dc <__adddf3>
 800d1f4:	4622      	mov	r2, r4
 800d1f6:	462b      	mov	r3, r5
 800d1f8:	f7f3 f9a6 	bl	8000548 <__aeabi_dmul>
 800d1fc:	a374      	add	r3, pc, #464	@ (adr r3, 800d3d0 <__ieee754_pow+0x750>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f2 ffeb 	bl	80001dc <__adddf3>
 800d206:	4622      	mov	r2, r4
 800d208:	462b      	mov	r3, r5
 800d20a:	f7f3 f99d 	bl	8000548 <__aeabi_dmul>
 800d20e:	a372      	add	r3, pc, #456	@ (adr r3, 800d3d8 <__ieee754_pow+0x758>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	f7f2 ffe2 	bl	80001dc <__adddf3>
 800d218:	4622      	mov	r2, r4
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	462b      	mov	r3, r5
 800d220:	4620      	mov	r0, r4
 800d222:	4629      	mov	r1, r5
 800d224:	f7f3 f990 	bl	8000548 <__aeabi_dmul>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f3 f98a 	bl	8000548 <__aeabi_dmul>
 800d234:	465a      	mov	r2, fp
 800d236:	4604      	mov	r4, r0
 800d238:	460d      	mov	r5, r1
 800d23a:	464b      	mov	r3, r9
 800d23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d240:	f7f2 ffcc 	bl	80001dc <__adddf3>
 800d244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d248:	f7f3 f97e 	bl	8000548 <__aeabi_dmul>
 800d24c:	4622      	mov	r2, r4
 800d24e:	462b      	mov	r3, r5
 800d250:	f7f2 ffc4 	bl	80001dc <__adddf3>
 800d254:	465a      	mov	r2, fp
 800d256:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d25a:	464b      	mov	r3, r9
 800d25c:	4658      	mov	r0, fp
 800d25e:	4649      	mov	r1, r9
 800d260:	f7f3 f972 	bl	8000548 <__aeabi_dmul>
 800d264:	4b6a      	ldr	r3, [pc, #424]	@ (800d410 <__ieee754_pow+0x790>)
 800d266:	2200      	movs	r2, #0
 800d268:	4606      	mov	r6, r0
 800d26a:	460f      	mov	r7, r1
 800d26c:	f7f2 ffb6 	bl	80001dc <__adddf3>
 800d270:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d274:	f7f2 ffb2 	bl	80001dc <__adddf3>
 800d278:	46d8      	mov	r8, fp
 800d27a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d27e:	460d      	mov	r5, r1
 800d280:	465a      	mov	r2, fp
 800d282:	460b      	mov	r3, r1
 800d284:	4640      	mov	r0, r8
 800d286:	4649      	mov	r1, r9
 800d288:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d28c:	f7f3 f95c 	bl	8000548 <__aeabi_dmul>
 800d290:	465c      	mov	r4, fp
 800d292:	4680      	mov	r8, r0
 800d294:	4689      	mov	r9, r1
 800d296:	4b5e      	ldr	r3, [pc, #376]	@ (800d410 <__ieee754_pow+0x790>)
 800d298:	2200      	movs	r2, #0
 800d29a:	4620      	mov	r0, r4
 800d29c:	4629      	mov	r1, r5
 800d29e:	f7f2 ff9b 	bl	80001d8 <__aeabi_dsub>
 800d2a2:	4632      	mov	r2, r6
 800d2a4:	463b      	mov	r3, r7
 800d2a6:	f7f2 ff97 	bl	80001d8 <__aeabi_dsub>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2b2:	f7f2 ff91 	bl	80001d8 <__aeabi_dsub>
 800d2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2ba:	f7f3 f945 	bl	8000548 <__aeabi_dmul>
 800d2be:	4622      	mov	r2, r4
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	460f      	mov	r7, r1
 800d2c4:	462b      	mov	r3, r5
 800d2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2ca:	f7f3 f93d 	bl	8000548 <__aeabi_dmul>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7f2 ff81 	bl	80001dc <__adddf3>
 800d2da:	4606      	mov	r6, r0
 800d2dc:	460f      	mov	r7, r1
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	4649      	mov	r1, r9
 800d2e6:	f7f2 ff79 	bl	80001dc <__adddf3>
 800d2ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d2ee:	a33c      	add	r3, pc, #240	@ (adr r3, 800d3e0 <__ieee754_pow+0x760>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	4658      	mov	r0, fp
 800d2f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d2fa:	460d      	mov	r5, r1
 800d2fc:	f7f3 f924 	bl	8000548 <__aeabi_dmul>
 800d300:	465c      	mov	r4, fp
 800d302:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d306:	4642      	mov	r2, r8
 800d308:	464b      	mov	r3, r9
 800d30a:	4620      	mov	r0, r4
 800d30c:	4629      	mov	r1, r5
 800d30e:	f7f2 ff63 	bl	80001d8 <__aeabi_dsub>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	4630      	mov	r0, r6
 800d318:	4639      	mov	r1, r7
 800d31a:	f7f2 ff5d 	bl	80001d8 <__aeabi_dsub>
 800d31e:	a332      	add	r3, pc, #200	@ (adr r3, 800d3e8 <__ieee754_pow+0x768>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f7f3 f910 	bl	8000548 <__aeabi_dmul>
 800d328:	a331      	add	r3, pc, #196	@ (adr r3, 800d3f0 <__ieee754_pow+0x770>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	4606      	mov	r6, r0
 800d330:	460f      	mov	r7, r1
 800d332:	4620      	mov	r0, r4
 800d334:	4629      	mov	r1, r5
 800d336:	f7f3 f907 	bl	8000548 <__aeabi_dmul>
 800d33a:	4602      	mov	r2, r0
 800d33c:	460b      	mov	r3, r1
 800d33e:	4630      	mov	r0, r6
 800d340:	4639      	mov	r1, r7
 800d342:	f7f2 ff4b 	bl	80001dc <__adddf3>
 800d346:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d348:	4b32      	ldr	r3, [pc, #200]	@ (800d414 <__ieee754_pow+0x794>)
 800d34a:	4413      	add	r3, r2
 800d34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d350:	f7f2 ff44 	bl	80001dc <__adddf3>
 800d354:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d358:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d35a:	f7f3 f88b 	bl	8000474 <__aeabi_i2d>
 800d35e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d360:	4b2d      	ldr	r3, [pc, #180]	@ (800d418 <__ieee754_pow+0x798>)
 800d362:	4413      	add	r3, r2
 800d364:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d368:	4606      	mov	r6, r0
 800d36a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d36e:	460f      	mov	r7, r1
 800d370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d374:	f7f2 ff32 	bl	80001dc <__adddf3>
 800d378:	4642      	mov	r2, r8
 800d37a:	464b      	mov	r3, r9
 800d37c:	f7f2 ff2e 	bl	80001dc <__adddf3>
 800d380:	4632      	mov	r2, r6
 800d382:	463b      	mov	r3, r7
 800d384:	f7f2 ff2a 	bl	80001dc <__adddf3>
 800d388:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d38c:	4632      	mov	r2, r6
 800d38e:	463b      	mov	r3, r7
 800d390:	4658      	mov	r0, fp
 800d392:	460d      	mov	r5, r1
 800d394:	f7f2 ff20 	bl	80001d8 <__aeabi_dsub>
 800d398:	4642      	mov	r2, r8
 800d39a:	464b      	mov	r3, r9
 800d39c:	f7f2 ff1c 	bl	80001d8 <__aeabi_dsub>
 800d3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3a4:	f7f2 ff18 	bl	80001d8 <__aeabi_dsub>
 800d3a8:	465c      	mov	r4, fp
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	e036      	b.n	800d41c <__ieee754_pow+0x79c>
 800d3ae:	bf00      	nop
 800d3b0:	4a454eef 	.word	0x4a454eef
 800d3b4:	3fca7e28 	.word	0x3fca7e28
 800d3b8:	93c9db65 	.word	0x93c9db65
 800d3bc:	3fcd864a 	.word	0x3fcd864a
 800d3c0:	a91d4101 	.word	0xa91d4101
 800d3c4:	3fd17460 	.word	0x3fd17460
 800d3c8:	518f264d 	.word	0x518f264d
 800d3cc:	3fd55555 	.word	0x3fd55555
 800d3d0:	db6fabff 	.word	0xdb6fabff
 800d3d4:	3fdb6db6 	.word	0x3fdb6db6
 800d3d8:	33333303 	.word	0x33333303
 800d3dc:	3fe33333 	.word	0x3fe33333
 800d3e0:	e0000000 	.word	0xe0000000
 800d3e4:	3feec709 	.word	0x3feec709
 800d3e8:	dc3a03fd 	.word	0xdc3a03fd
 800d3ec:	3feec709 	.word	0x3feec709
 800d3f0:	145b01f5 	.word	0x145b01f5
 800d3f4:	be3e2fe0 	.word	0xbe3e2fe0
 800d3f8:	7ff00000 	.word	0x7ff00000
 800d3fc:	43400000 	.word	0x43400000
 800d400:	0003988e 	.word	0x0003988e
 800d404:	000bb679 	.word	0x000bb679
 800d408:	0800dd48 	.word	0x0800dd48
 800d40c:	3ff00000 	.word	0x3ff00000
 800d410:	40080000 	.word	0x40080000
 800d414:	0800dd28 	.word	0x0800dd28
 800d418:	0800dd38 	.word	0x0800dd38
 800d41c:	460b      	mov	r3, r1
 800d41e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d422:	e5d7      	b.n	800cfd4 <__ieee754_pow+0x354>
 800d424:	f04f 0a01 	mov.w	sl, #1
 800d428:	e65e      	b.n	800d0e8 <__ieee754_pow+0x468>
 800d42a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d6fc <__ieee754_pow+0xa7c>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	4630      	mov	r0, r6
 800d432:	4639      	mov	r1, r7
 800d434:	f7f2 fed2 	bl	80001dc <__adddf3>
 800d438:	4642      	mov	r2, r8
 800d43a:	e9cd 0100 	strd	r0, r1, [sp]
 800d43e:	464b      	mov	r3, r9
 800d440:	4620      	mov	r0, r4
 800d442:	4629      	mov	r1, r5
 800d444:	f7f2 fec8 	bl	80001d8 <__aeabi_dsub>
 800d448:	4602      	mov	r2, r0
 800d44a:	460b      	mov	r3, r1
 800d44c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d450:	f7f3 fb0a 	bl	8000a68 <__aeabi_dcmpgt>
 800d454:	2800      	cmp	r0, #0
 800d456:	f47f ae00 	bne.w	800d05a <__ieee754_pow+0x3da>
 800d45a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d45e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d462:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d466:	fa43 fa0a 	asr.w	sl, r3, sl
 800d46a:	44da      	add	sl, fp
 800d46c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d470:	489d      	ldr	r0, [pc, #628]	@ (800d6e8 <__ieee754_pow+0xa68>)
 800d472:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d476:	4108      	asrs	r0, r1
 800d478:	ea00 030a 	and.w	r3, r0, sl
 800d47c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d480:	f1c1 0114 	rsb	r1, r1, #20
 800d484:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d488:	fa4a fa01 	asr.w	sl, sl, r1
 800d48c:	f1bb 0f00 	cmp.w	fp, #0
 800d490:	4640      	mov	r0, r8
 800d492:	4649      	mov	r1, r9
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	bfb8      	it	lt
 800d49a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d49e:	f7f2 fe9b 	bl	80001d8 <__aeabi_dsub>
 800d4a2:	4680      	mov	r8, r0
 800d4a4:	4689      	mov	r9, r1
 800d4a6:	4632      	mov	r2, r6
 800d4a8:	463b      	mov	r3, r7
 800d4aa:	4640      	mov	r0, r8
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	f7f2 fe95 	bl	80001dc <__adddf3>
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	a37c      	add	r3, pc, #496	@ (adr r3, 800d6a8 <__ieee754_pow+0xa28>)
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	460d      	mov	r5, r1
 800d4be:	f7f3 f843 	bl	8000548 <__aeabi_dmul>
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	e9cd 0100 	strd	r0, r1, [sp]
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	f7f2 fe83 	bl	80001d8 <__aeabi_dsub>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	4639      	mov	r1, r7
 800d4da:	f7f2 fe7d 	bl	80001d8 <__aeabi_dsub>
 800d4de:	a374      	add	r3, pc, #464	@ (adr r3, 800d6b0 <__ieee754_pow+0xa30>)
 800d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e4:	f7f3 f830 	bl	8000548 <__aeabi_dmul>
 800d4e8:	a373      	add	r3, pc, #460	@ (adr r3, 800d6b8 <__ieee754_pow+0xa38>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	4680      	mov	r8, r0
 800d4f0:	4689      	mov	r9, r1
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7f3 f827 	bl	8000548 <__aeabi_dmul>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4640      	mov	r0, r8
 800d500:	4649      	mov	r1, r9
 800d502:	f7f2 fe6b 	bl	80001dc <__adddf3>
 800d506:	4604      	mov	r4, r0
 800d508:	460d      	mov	r5, r1
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d512:	f7f2 fe63 	bl	80001dc <__adddf3>
 800d516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d51a:	4680      	mov	r8, r0
 800d51c:	4689      	mov	r9, r1
 800d51e:	f7f2 fe5b 	bl	80001d8 <__aeabi_dsub>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4620      	mov	r0, r4
 800d528:	4629      	mov	r1, r5
 800d52a:	f7f2 fe55 	bl	80001d8 <__aeabi_dsub>
 800d52e:	4642      	mov	r2, r8
 800d530:	4606      	mov	r6, r0
 800d532:	460f      	mov	r7, r1
 800d534:	464b      	mov	r3, r9
 800d536:	4640      	mov	r0, r8
 800d538:	4649      	mov	r1, r9
 800d53a:	f7f3 f805 	bl	8000548 <__aeabi_dmul>
 800d53e:	a360      	add	r3, pc, #384	@ (adr r3, 800d6c0 <__ieee754_pow+0xa40>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	4604      	mov	r4, r0
 800d546:	460d      	mov	r5, r1
 800d548:	f7f2 fffe 	bl	8000548 <__aeabi_dmul>
 800d54c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d6c8 <__ieee754_pow+0xa48>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f2 fe41 	bl	80001d8 <__aeabi_dsub>
 800d556:	4622      	mov	r2, r4
 800d558:	462b      	mov	r3, r5
 800d55a:	f7f2 fff5 	bl	8000548 <__aeabi_dmul>
 800d55e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d6d0 <__ieee754_pow+0xa50>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	f7f2 fe3a 	bl	80001dc <__adddf3>
 800d568:	4622      	mov	r2, r4
 800d56a:	462b      	mov	r3, r5
 800d56c:	f7f2 ffec 	bl	8000548 <__aeabi_dmul>
 800d570:	a359      	add	r3, pc, #356	@ (adr r3, 800d6d8 <__ieee754_pow+0xa58>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f2 fe2f 	bl	80001d8 <__aeabi_dsub>
 800d57a:	4622      	mov	r2, r4
 800d57c:	462b      	mov	r3, r5
 800d57e:	f7f2 ffe3 	bl	8000548 <__aeabi_dmul>
 800d582:	a357      	add	r3, pc, #348	@ (adr r3, 800d6e0 <__ieee754_pow+0xa60>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	f7f2 fe28 	bl	80001dc <__adddf3>
 800d58c:	4622      	mov	r2, r4
 800d58e:	462b      	mov	r3, r5
 800d590:	f7f2 ffda 	bl	8000548 <__aeabi_dmul>
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	4640      	mov	r0, r8
 800d59a:	4649      	mov	r1, r9
 800d59c:	f7f2 fe1c 	bl	80001d8 <__aeabi_dsub>
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4640      	mov	r0, r8
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	f7f2 ffcc 	bl	8000548 <__aeabi_dmul>
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	e9cd 0100 	strd	r0, r1, [sp]
 800d5b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	4629      	mov	r1, r5
 800d5be:	f7f2 fe0b 	bl	80001d8 <__aeabi_dsub>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5ca:	f7f3 f8e7 	bl	800079c <__aeabi_ddiv>
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	463b      	mov	r3, r7
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f2 ffb5 	bl	8000548 <__aeabi_dmul>
 800d5de:	4632      	mov	r2, r6
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	f7f2 fdfb 	bl	80001dc <__adddf3>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7f2 fdf3 	bl	80001d8 <__aeabi_dsub>
 800d5f2:	4642      	mov	r2, r8
 800d5f4:	464b      	mov	r3, r9
 800d5f6:	f7f2 fdef 	bl	80001d8 <__aeabi_dsub>
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	493b      	ldr	r1, [pc, #236]	@ (800d6ec <__ieee754_pow+0xa6c>)
 800d600:	2000      	movs	r0, #0
 800d602:	f7f2 fde9 	bl	80001d8 <__aeabi_dsub>
 800d606:	ec41 0b10 	vmov	d0, r0, r1
 800d60a:	ee10 3a90 	vmov	r3, s1
 800d60e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d616:	da30      	bge.n	800d67a <__ieee754_pow+0x9fa>
 800d618:	4650      	mov	r0, sl
 800d61a:	f000 f87d 	bl	800d718 <scalbn>
 800d61e:	ec51 0b10 	vmov	r0, r1, d0
 800d622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d626:	f7ff bbd2 	b.w	800cdce <__ieee754_pow+0x14e>
 800d62a:	4c31      	ldr	r4, [pc, #196]	@ (800d6f0 <__ieee754_pow+0xa70>)
 800d62c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d630:	42a3      	cmp	r3, r4
 800d632:	d91a      	bls.n	800d66a <__ieee754_pow+0x9ea>
 800d634:	4b2f      	ldr	r3, [pc, #188]	@ (800d6f4 <__ieee754_pow+0xa74>)
 800d636:	440b      	add	r3, r1
 800d638:	4303      	orrs	r3, r0
 800d63a:	d009      	beq.n	800d650 <__ieee754_pow+0x9d0>
 800d63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d640:	2200      	movs	r2, #0
 800d642:	2300      	movs	r3, #0
 800d644:	f7f3 f9f2 	bl	8000a2c <__aeabi_dcmplt>
 800d648:	3800      	subs	r0, #0
 800d64a:	bf18      	it	ne
 800d64c:	2001      	movne	r0, #1
 800d64e:	e42b      	b.n	800cea8 <__ieee754_pow+0x228>
 800d650:	4642      	mov	r2, r8
 800d652:	464b      	mov	r3, r9
 800d654:	f7f2 fdc0 	bl	80001d8 <__aeabi_dsub>
 800d658:	4632      	mov	r2, r6
 800d65a:	463b      	mov	r3, r7
 800d65c:	f7f3 f9fa 	bl	8000a54 <__aeabi_dcmpge>
 800d660:	2800      	cmp	r0, #0
 800d662:	d1eb      	bne.n	800d63c <__ieee754_pow+0x9bc>
 800d664:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d704 <__ieee754_pow+0xa84>
 800d668:	e6f7      	b.n	800d45a <__ieee754_pow+0x7da>
 800d66a:	469a      	mov	sl, r3
 800d66c:	4b22      	ldr	r3, [pc, #136]	@ (800d6f8 <__ieee754_pow+0xa78>)
 800d66e:	459a      	cmp	sl, r3
 800d670:	f63f aef3 	bhi.w	800d45a <__ieee754_pow+0x7da>
 800d674:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d678:	e715      	b.n	800d4a6 <__ieee754_pow+0x826>
 800d67a:	ec51 0b10 	vmov	r0, r1, d0
 800d67e:	4619      	mov	r1, r3
 800d680:	e7cf      	b.n	800d622 <__ieee754_pow+0x9a2>
 800d682:	491a      	ldr	r1, [pc, #104]	@ (800d6ec <__ieee754_pow+0xa6c>)
 800d684:	2000      	movs	r0, #0
 800d686:	f7ff bb18 	b.w	800ccba <__ieee754_pow+0x3a>
 800d68a:	2000      	movs	r0, #0
 800d68c:	2100      	movs	r1, #0
 800d68e:	f7ff bb14 	b.w	800ccba <__ieee754_pow+0x3a>
 800d692:	4630      	mov	r0, r6
 800d694:	4639      	mov	r1, r7
 800d696:	f7ff bb10 	b.w	800ccba <__ieee754_pow+0x3a>
 800d69a:	460c      	mov	r4, r1
 800d69c:	f7ff bb5e 	b.w	800cd5c <__ieee754_pow+0xdc>
 800d6a0:	2400      	movs	r4, #0
 800d6a2:	f7ff bb49 	b.w	800cd38 <__ieee754_pow+0xb8>
 800d6a6:	bf00      	nop
 800d6a8:	00000000 	.word	0x00000000
 800d6ac:	3fe62e43 	.word	0x3fe62e43
 800d6b0:	fefa39ef 	.word	0xfefa39ef
 800d6b4:	3fe62e42 	.word	0x3fe62e42
 800d6b8:	0ca86c39 	.word	0x0ca86c39
 800d6bc:	be205c61 	.word	0xbe205c61
 800d6c0:	72bea4d0 	.word	0x72bea4d0
 800d6c4:	3e663769 	.word	0x3e663769
 800d6c8:	c5d26bf1 	.word	0xc5d26bf1
 800d6cc:	3ebbbd41 	.word	0x3ebbbd41
 800d6d0:	af25de2c 	.word	0xaf25de2c
 800d6d4:	3f11566a 	.word	0x3f11566a
 800d6d8:	16bebd93 	.word	0x16bebd93
 800d6dc:	3f66c16c 	.word	0x3f66c16c
 800d6e0:	5555553e 	.word	0x5555553e
 800d6e4:	3fc55555 	.word	0x3fc55555
 800d6e8:	fff00000 	.word	0xfff00000
 800d6ec:	3ff00000 	.word	0x3ff00000
 800d6f0:	4090cbff 	.word	0x4090cbff
 800d6f4:	3f6f3400 	.word	0x3f6f3400
 800d6f8:	3fe00000 	.word	0x3fe00000
 800d6fc:	652b82fe 	.word	0x652b82fe
 800d700:	3c971547 	.word	0x3c971547
 800d704:	4090cc00 	.word	0x4090cc00

0800d708 <fabs>:
 800d708:	ec51 0b10 	vmov	r0, r1, d0
 800d70c:	4602      	mov	r2, r0
 800d70e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d712:	ec43 2b10 	vmov	d0, r2, r3
 800d716:	4770      	bx	lr

0800d718 <scalbn>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	ec55 4b10 	vmov	r4, r5, d0
 800d71e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d722:	4606      	mov	r6, r0
 800d724:	462b      	mov	r3, r5
 800d726:	b991      	cbnz	r1, 800d74e <scalbn+0x36>
 800d728:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d72c:	4323      	orrs	r3, r4
 800d72e:	d03d      	beq.n	800d7ac <scalbn+0x94>
 800d730:	4b35      	ldr	r3, [pc, #212]	@ (800d808 <scalbn+0xf0>)
 800d732:	4620      	mov	r0, r4
 800d734:	4629      	mov	r1, r5
 800d736:	2200      	movs	r2, #0
 800d738:	f7f2 ff06 	bl	8000548 <__aeabi_dmul>
 800d73c:	4b33      	ldr	r3, [pc, #204]	@ (800d80c <scalbn+0xf4>)
 800d73e:	429e      	cmp	r6, r3
 800d740:	4604      	mov	r4, r0
 800d742:	460d      	mov	r5, r1
 800d744:	da0f      	bge.n	800d766 <scalbn+0x4e>
 800d746:	a328      	add	r3, pc, #160	@ (adr r3, 800d7e8 <scalbn+0xd0>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	e01e      	b.n	800d78c <scalbn+0x74>
 800d74e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d752:	4291      	cmp	r1, r2
 800d754:	d10b      	bne.n	800d76e <scalbn+0x56>
 800d756:	4622      	mov	r2, r4
 800d758:	4620      	mov	r0, r4
 800d75a:	4629      	mov	r1, r5
 800d75c:	f7f2 fd3e 	bl	80001dc <__adddf3>
 800d760:	4604      	mov	r4, r0
 800d762:	460d      	mov	r5, r1
 800d764:	e022      	b.n	800d7ac <scalbn+0x94>
 800d766:	460b      	mov	r3, r1
 800d768:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d76c:	3936      	subs	r1, #54	@ 0x36
 800d76e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d772:	4296      	cmp	r6, r2
 800d774:	dd0d      	ble.n	800d792 <scalbn+0x7a>
 800d776:	2d00      	cmp	r5, #0
 800d778:	a11d      	add	r1, pc, #116	@ (adr r1, 800d7f0 <scalbn+0xd8>)
 800d77a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d77e:	da02      	bge.n	800d786 <scalbn+0x6e>
 800d780:	a11d      	add	r1, pc, #116	@ (adr r1, 800d7f8 <scalbn+0xe0>)
 800d782:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d786:	a31a      	add	r3, pc, #104	@ (adr r3, 800d7f0 <scalbn+0xd8>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f2 fedc 	bl	8000548 <__aeabi_dmul>
 800d790:	e7e6      	b.n	800d760 <scalbn+0x48>
 800d792:	1872      	adds	r2, r6, r1
 800d794:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d798:	428a      	cmp	r2, r1
 800d79a:	dcec      	bgt.n	800d776 <scalbn+0x5e>
 800d79c:	2a00      	cmp	r2, #0
 800d79e:	dd08      	ble.n	800d7b2 <scalbn+0x9a>
 800d7a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d7a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d7a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7ac:	ec45 4b10 	vmov	d0, r4, r5
 800d7b0:	bd70      	pop	{r4, r5, r6, pc}
 800d7b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d7b6:	da08      	bge.n	800d7ca <scalbn+0xb2>
 800d7b8:	2d00      	cmp	r5, #0
 800d7ba:	a10b      	add	r1, pc, #44	@ (adr r1, 800d7e8 <scalbn+0xd0>)
 800d7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c0:	dac1      	bge.n	800d746 <scalbn+0x2e>
 800d7c2:	a10f      	add	r1, pc, #60	@ (adr r1, 800d800 <scalbn+0xe8>)
 800d7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c8:	e7bd      	b.n	800d746 <scalbn+0x2e>
 800d7ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d7ce:	3236      	adds	r2, #54	@ 0x36
 800d7d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d7d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7d8:	4620      	mov	r0, r4
 800d7da:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <scalbn+0xf8>)
 800d7dc:	4629      	mov	r1, r5
 800d7de:	2200      	movs	r2, #0
 800d7e0:	e7d4      	b.n	800d78c <scalbn+0x74>
 800d7e2:	bf00      	nop
 800d7e4:	f3af 8000 	nop.w
 800d7e8:	c2f8f359 	.word	0xc2f8f359
 800d7ec:	01a56e1f 	.word	0x01a56e1f
 800d7f0:	8800759c 	.word	0x8800759c
 800d7f4:	7e37e43c 	.word	0x7e37e43c
 800d7f8:	8800759c 	.word	0x8800759c
 800d7fc:	fe37e43c 	.word	0xfe37e43c
 800d800:	c2f8f359 	.word	0xc2f8f359
 800d804:	81a56e1f 	.word	0x81a56e1f
 800d808:	43500000 	.word	0x43500000
 800d80c:	ffff3cb0 	.word	0xffff3cb0
 800d810:	3c900000 	.word	0x3c900000

0800d814 <with_errno>:
 800d814:	b510      	push	{r4, lr}
 800d816:	ed2d 8b02 	vpush	{d8}
 800d81a:	eeb0 8a40 	vmov.f32	s16, s0
 800d81e:	eef0 8a60 	vmov.f32	s17, s1
 800d822:	4604      	mov	r4, r0
 800d824:	f7fe fc34 	bl	800c090 <__errno>
 800d828:	eeb0 0a48 	vmov.f32	s0, s16
 800d82c:	eef0 0a68 	vmov.f32	s1, s17
 800d830:	ecbd 8b02 	vpop	{d8}
 800d834:	6004      	str	r4, [r0, #0]
 800d836:	bd10      	pop	{r4, pc}

0800d838 <xflow>:
 800d838:	4603      	mov	r3, r0
 800d83a:	b507      	push	{r0, r1, r2, lr}
 800d83c:	ec51 0b10 	vmov	r0, r1, d0
 800d840:	b183      	cbz	r3, 800d864 <xflow+0x2c>
 800d842:	4602      	mov	r2, r0
 800d844:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d848:	e9cd 2300 	strd	r2, r3, [sp]
 800d84c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d850:	f7f2 fe7a 	bl	8000548 <__aeabi_dmul>
 800d854:	ec41 0b10 	vmov	d0, r0, r1
 800d858:	2022      	movs	r0, #34	@ 0x22
 800d85a:	b003      	add	sp, #12
 800d85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d860:	f7ff bfd8 	b.w	800d814 <with_errno>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	e7ee      	b.n	800d848 <xflow+0x10>
 800d86a:	0000      	movs	r0, r0
 800d86c:	0000      	movs	r0, r0
	...

0800d870 <__math_uflow>:
 800d870:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d878 <__math_uflow+0x8>
 800d874:	f7ff bfe0 	b.w	800d838 <xflow>
 800d878:	00000000 	.word	0x00000000
 800d87c:	10000000 	.word	0x10000000

0800d880 <__math_oflow>:
 800d880:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d888 <__math_oflow+0x8>
 800d884:	f7ff bfd8 	b.w	800d838 <xflow>
 800d888:	00000000 	.word	0x00000000
 800d88c:	70000000 	.word	0x70000000

0800d890 <__ieee754_sqrt>:
 800d890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	4a68      	ldr	r2, [pc, #416]	@ (800da38 <__ieee754_sqrt+0x1a8>)
 800d896:	ec55 4b10 	vmov	r4, r5, d0
 800d89a:	43aa      	bics	r2, r5
 800d89c:	462b      	mov	r3, r5
 800d89e:	4621      	mov	r1, r4
 800d8a0:	d110      	bne.n	800d8c4 <__ieee754_sqrt+0x34>
 800d8a2:	4622      	mov	r2, r4
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f7f2 fe4e 	bl	8000548 <__aeabi_dmul>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f7f2 fc92 	bl	80001dc <__adddf3>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	ec45 4b10 	vmov	d0, r4, r5
 800d8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	dc0e      	bgt.n	800d8e6 <__ieee754_sqrt+0x56>
 800d8c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d8cc:	4322      	orrs	r2, r4
 800d8ce:	d0f5      	beq.n	800d8bc <__ieee754_sqrt+0x2c>
 800d8d0:	b19d      	cbz	r5, 800d8fa <__ieee754_sqrt+0x6a>
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	f7f2 fc7e 	bl	80001d8 <__aeabi_dsub>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	f7f2 ff5c 	bl	800079c <__aeabi_ddiv>
 800d8e4:	e7e8      	b.n	800d8b8 <__ieee754_sqrt+0x28>
 800d8e6:	152a      	asrs	r2, r5, #20
 800d8e8:	d115      	bne.n	800d916 <__ieee754_sqrt+0x86>
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	e009      	b.n	800d902 <__ieee754_sqrt+0x72>
 800d8ee:	0acb      	lsrs	r3, r1, #11
 800d8f0:	3a15      	subs	r2, #21
 800d8f2:	0549      	lsls	r1, r1, #21
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d0fa      	beq.n	800d8ee <__ieee754_sqrt+0x5e>
 800d8f8:	e7f7      	b.n	800d8ea <__ieee754_sqrt+0x5a>
 800d8fa:	462a      	mov	r2, r5
 800d8fc:	e7fa      	b.n	800d8f4 <__ieee754_sqrt+0x64>
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	3001      	adds	r0, #1
 800d902:	02dc      	lsls	r4, r3, #11
 800d904:	d5fb      	bpl.n	800d8fe <__ieee754_sqrt+0x6e>
 800d906:	1e44      	subs	r4, r0, #1
 800d908:	1b12      	subs	r2, r2, r4
 800d90a:	f1c0 0420 	rsb	r4, r0, #32
 800d90e:	fa21 f404 	lsr.w	r4, r1, r4
 800d912:	4323      	orrs	r3, r4
 800d914:	4081      	lsls	r1, r0
 800d916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d91a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d91e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d922:	07d2      	lsls	r2, r2, #31
 800d924:	bf5c      	itt	pl
 800d926:	005b      	lslpl	r3, r3, #1
 800d928:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d92c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d930:	bf58      	it	pl
 800d932:	0049      	lslpl	r1, r1, #1
 800d934:	2600      	movs	r6, #0
 800d936:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d93a:	106d      	asrs	r5, r5, #1
 800d93c:	0049      	lsls	r1, r1, #1
 800d93e:	2016      	movs	r0, #22
 800d940:	4632      	mov	r2, r6
 800d942:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d946:	1917      	adds	r7, r2, r4
 800d948:	429f      	cmp	r7, r3
 800d94a:	bfde      	ittt	le
 800d94c:	193a      	addle	r2, r7, r4
 800d94e:	1bdb      	suble	r3, r3, r7
 800d950:	1936      	addle	r6, r6, r4
 800d952:	0fcf      	lsrs	r7, r1, #31
 800d954:	3801      	subs	r0, #1
 800d956:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d95a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d95e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d962:	d1f0      	bne.n	800d946 <__ieee754_sqrt+0xb6>
 800d964:	4604      	mov	r4, r0
 800d966:	2720      	movs	r7, #32
 800d968:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d96c:	429a      	cmp	r2, r3
 800d96e:	eb00 0e0c 	add.w	lr, r0, ip
 800d972:	db02      	blt.n	800d97a <__ieee754_sqrt+0xea>
 800d974:	d113      	bne.n	800d99e <__ieee754_sqrt+0x10e>
 800d976:	458e      	cmp	lr, r1
 800d978:	d811      	bhi.n	800d99e <__ieee754_sqrt+0x10e>
 800d97a:	f1be 0f00 	cmp.w	lr, #0
 800d97e:	eb0e 000c 	add.w	r0, lr, ip
 800d982:	da42      	bge.n	800da0a <__ieee754_sqrt+0x17a>
 800d984:	2800      	cmp	r0, #0
 800d986:	db40      	blt.n	800da0a <__ieee754_sqrt+0x17a>
 800d988:	f102 0801 	add.w	r8, r2, #1
 800d98c:	1a9b      	subs	r3, r3, r2
 800d98e:	458e      	cmp	lr, r1
 800d990:	bf88      	it	hi
 800d992:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d996:	eba1 010e 	sub.w	r1, r1, lr
 800d99a:	4464      	add	r4, ip
 800d99c:	4642      	mov	r2, r8
 800d99e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d9a2:	3f01      	subs	r7, #1
 800d9a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d9a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d9ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d9b0:	d1dc      	bne.n	800d96c <__ieee754_sqrt+0xdc>
 800d9b2:	4319      	orrs	r1, r3
 800d9b4:	d01b      	beq.n	800d9ee <__ieee754_sqrt+0x15e>
 800d9b6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800da3c <__ieee754_sqrt+0x1ac>
 800d9ba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800da40 <__ieee754_sqrt+0x1b0>
 800d9be:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9c2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9c6:	f7f2 fc07 	bl	80001d8 <__aeabi_dsub>
 800d9ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	f7f3 f833 	bl	8000a40 <__aeabi_dcmple>
 800d9da:	b140      	cbz	r0, 800d9ee <__ieee754_sqrt+0x15e>
 800d9dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d9e0:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9e8:	d111      	bne.n	800da0e <__ieee754_sqrt+0x17e>
 800d9ea:	3601      	adds	r6, #1
 800d9ec:	463c      	mov	r4, r7
 800d9ee:	1072      	asrs	r2, r6, #1
 800d9f0:	0863      	lsrs	r3, r4, #1
 800d9f2:	07f1      	lsls	r1, r6, #31
 800d9f4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d9f8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d9fc:	bf48      	it	mi
 800d9fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800da02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800da06:	4618      	mov	r0, r3
 800da08:	e756      	b.n	800d8b8 <__ieee754_sqrt+0x28>
 800da0a:	4690      	mov	r8, r2
 800da0c:	e7be      	b.n	800d98c <__ieee754_sqrt+0xfc>
 800da0e:	f7f2 fbe5 	bl	80001dc <__adddf3>
 800da12:	e9da 8900 	ldrd	r8, r9, [sl]
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
 800da1a:	4640      	mov	r0, r8
 800da1c:	4649      	mov	r1, r9
 800da1e:	f7f3 f805 	bl	8000a2c <__aeabi_dcmplt>
 800da22:	b120      	cbz	r0, 800da2e <__ieee754_sqrt+0x19e>
 800da24:	1ca0      	adds	r0, r4, #2
 800da26:	bf08      	it	eq
 800da28:	3601      	addeq	r6, #1
 800da2a:	3402      	adds	r4, #2
 800da2c:	e7df      	b.n	800d9ee <__ieee754_sqrt+0x15e>
 800da2e:	1c63      	adds	r3, r4, #1
 800da30:	f023 0401 	bic.w	r4, r3, #1
 800da34:	e7db      	b.n	800d9ee <__ieee754_sqrt+0x15e>
 800da36:	bf00      	nop
 800da38:	7ff00000 	.word	0x7ff00000
 800da3c:	20000ae8 	.word	0x20000ae8
 800da40:	20000ae0 	.word	0x20000ae0

0800da44 <_init>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	bf00      	nop
 800da48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da4a:	bc08      	pop	{r3}
 800da4c:	469e      	mov	lr, r3
 800da4e:	4770      	bx	lr

0800da50 <_fini>:
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da52:	bf00      	nop
 800da54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da56:	bc08      	pop	{r3}
 800da58:	469e      	mov	lr, r3
 800da5a:	4770      	bx	lr
